# auth_token : Auth_token generated from Telegram BotFather
auth_token: xxxxxxxxx:xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

#  the directory where Rpi-WebRTC-Streamer stores h.264 files
motion_h264_path: /home/pi/Videos

# Set the interval to invoke process to check for new files added.
checking_interval: 5

# the file to store the telegram chat_id to use when sending the message. 
# the below example is default value 
#
chat_id_filename: /opt/rws/etc/run/telegrambot.pickle

# specify the location of the file to store the admin id.
# 
admin_list_filename: /opt/rws/etc/run/telegrambotadmin.pickle

# specifies whether the h.264 file generated by rws is converted to an mp4 file 
# and included in the telegram message. if you set the default value to true 
# and set it to false, only the name of the newly created file will be transferred 
# to the message without the mp4 file.
# default value is true
mp4_upload_enable: true

# specifies the system command to use when converting to mp4 file. 
# the specified command string must have $input_file and $output_file, 
# and it is a template to replace internally.
#
# there are two ffmpeg_neon and ffmpeg_armv6 files in the tools directory, 
# and ffmpeg_neon should be used on pi2 or higher hardware. 
# and ffmpeg_armv6 should be used on ZeroW or PI1 
#
#converting_command: '/opt/rws/tools/ffmpeg_armv6 -y -i $input_file $output_file'
#
# When you convert h.264 video to mp4, the size will be smaller than h.264 original 
# file and it is advantageous when you send the file to Messenger like Telegram or
# upload it to Cloud Storage  like GoogleDrive
#
# However, conversion to mp4 is very slow on hardware such as PI 1 or PI Zero W 
# with an ARMv6 family of CPUs, so it can hardly be used. 
# In this case, you should use '-vcodec copy' to convert the file to a level 
# that simply changes the container, as shown below.
#
converting_command: '/opt/rws/tools/ffmpeg_armv6 -y -vcodec copy -i $input_file $output_file'

#
# When telegram message upload, specify the value of upload timeout seconds. 
# If network upload is slow, you should increase the timeout value.
upload_timeout: 120

# Keep the message waiting for a period of time after transmission. 
# No new messages are sent during this period.
# The default value is 120. 
# When set to 0, new motion detection messages will continue to be transmitted 
# without waiting time.
noti_cooling_period: 120


# Always disable sound alert when sending messages. 
# The Telegram Client receives new messages but without a sound alert.
#
sound_alerts_in_schedule: False

# specifies the hour of day
noti_schedule_hour: '[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23]'
# specifies the day of week. 0 is Monday, ... 6 is Sunday
noti_schedule_day: '[0,1,2,3,4,5,6]'
