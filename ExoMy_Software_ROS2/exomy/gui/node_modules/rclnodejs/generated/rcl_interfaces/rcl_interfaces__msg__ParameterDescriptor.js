// This file is automatically generated by Intel rclnodejs
//
// *** DO NOT EDIT directly
//
'use strict';
const ref = require('ref-napi');
const StructType = require('ref-struct-di')(ref);
const ArrayType = require('ref-array-di')(ref);
const primitiveTypes = require('../../rosidl_gen/primitive_types.js');
const deallocator = require('../../rosidl_gen/deallocator.js');
const translator = require('../../rosidl_gen/message_translator.js');
const StringWrapper = require('../../generated/std_msgs/std_msgs__msg__String.js');
const FloatingPointRangeWrapper = require('../../generated/rcl_interfaces/rcl_interfaces__msg__FloatingPointRange.js');
const IntegerRangeWrapper = require('../../generated/rcl_interfaces/rcl_interfaces__msg__IntegerRange.js');
const ParameterDescriptorRefStruct = StructType({
  name: primitiveTypes.string,
  type: primitiveTypes.uint8,
  description: primitiveTypes.string,
  additional_constraints: primitiveTypes.string,
  read_only: primitiveTypes.bool,
  floating_point_range: FloatingPointRangeWrapper.refObjectArrayType,
  integer_range: IntegerRangeWrapper.refObjectArrayType,
});
const ParameterDescriptorRefArray = ArrayType(ParameterDescriptorRefStruct);
const ParameterDescriptorRefStructArray = StructType({
  data: ParameterDescriptorRefArray,
  size: ref.types.size_t,
  capacity: ref.types.size_t
});
// Define the wrapper class.
class ParameterDescriptorWrapper {
  constructor(other) {
    this._wrapperFields = {};
    if (typeof other === 'object' && other._refObject) {
      this._refObject = new ParameterDescriptorRefStruct(other._refObject.toObject());
      this._nameIntialized = true;
      this._wrapperFields.name =  new StringWrapper(other._wrapperFields.name);
      this._typeIntialized = true;
      this._descriptionIntialized = true;
      this._wrapperFields.description =  new StringWrapper(other._wrapperFields.description);
      this._additional_constraintsIntialized = true;
      this._wrapperFields.additional_constraints =  new StringWrapper(other._wrapperFields.additional_constraints);
      this._read_onlyIntialized = true;
      this._wrapperFields.floating_point_range = FloatingPointRangeWrapper.createArray();
      this._wrapperFields.floating_point_range.copy(other._wrapperFields.floating_point_range);
      this._wrapperFields.integer_range = IntegerRangeWrapper.createArray();
      this._wrapperFields.integer_range.copy(other._wrapperFields.integer_range);
    } else if (typeof other !== 'undefined') {
      this._initMembers();
      translator.constructFromPlanObject(this, other);
    } else {
      this._initMembers();
    }
    this.freeze();
  }
  _initMembers() {
    this._refObject = new ParameterDescriptorRefStruct();
    this._nameIntialized = false;
    this._wrapperFields.name = new StringWrapper();
    this._typeIntialized = false;
    this._descriptionIntialized = false;
    this._wrapperFields.description = new StringWrapper();
    this._additional_constraintsIntialized = false;
    this._wrapperFields.additional_constraints = new StringWrapper();
    this._refObject.read_only = false;
    this._read_onlyIntialized = true;
    this._wrapperFields.floating_point_range = FloatingPointRangeWrapper.createArray();
    this._wrapperFields.integer_range = IntegerRangeWrapper.createArray();
  }
  static createFromRefObject(refObject) {
    let self = new ParameterDescriptorWrapper();
    self.copyRefObject(refObject);
    return self;
  }
  static createArray() {
    return new ParameterDescriptorArrayWrapper;
  }
  static get ArrayType() {
    return ParameterDescriptorArrayWrapper;
  }
  static get refObjectArrayType() {
    return ParameterDescriptorRefStructArray
  }
  static get refObjectType() {
    return ParameterDescriptorRefStruct;
  }
  toRawROS() {
    this.freeze(true);
    return this._refObject.ref();
  }
  freeze(own = false, checkConsistency = false) {
    if (checkConsistency) {
      if (!this._nameIntialized) {
        throw new TypeError('Invalid argument: name in ParameterDescriptor');
      }
      if (!this._typeIntialized) {
        throw new TypeError('Invalid argument: type in ParameterDescriptor');
      }
      if (!this._descriptionIntialized) {
        throw new TypeError('Invalid argument: description in ParameterDescriptor');
      }
      if (!this._additional_constraintsIntialized) {
        throw new TypeError('Invalid argument: additional_constraints in ParameterDescriptor');
      }
      if (!this._read_onlyIntialized) {
        throw new TypeError('Invalid argument: read_only in ParameterDescriptor');
      }
    }
    if (own) {
      this._wrapperFields.name.freeze(own, checkConsistency);
    }
    this._refObject.name = this._wrapperFields.name.refObject;
    if (own) {
      this._wrapperFields.description.freeze(own, checkConsistency);
    }
    this._refObject.description = this._wrapperFields.description.refObject;
    if (own) {
      this._wrapperFields.additional_constraints.freeze(own, checkConsistency);
    }
    this._refObject.additional_constraints = this._wrapperFields.additional_constraints.refObject;
    this._wrapperFields.floating_point_range.freeze(own, checkConsistency);
    this._refObject.floating_point_range = this._wrapperFields.floating_point_range.refObject;
    this._wrapperFields.integer_range.freeze(own, checkConsistency);
    this._refObject.integer_range = this._wrapperFields.integer_range.refObject;
  }
  serialize() {
    this.freeze(false, true);
    return this._refObject.ref();
  }
  deserialize(refObject) {
    this._nameIntialized = true;
    this._wrapperFields.name.data = refObject.name.data;
    this._typeIntialized = true;
    this._refObject.type = refObject.type;
    this._descriptionIntialized = true;
    this._wrapperFields.description.data = refObject.description.data;
    this._additional_constraintsIntialized = true;
    this._wrapperFields.additional_constraints.data = refObject.additional_constraints.data;
    this._read_onlyIntialized = true;
    this._refObject.read_only = refObject.read_only;
    this._wrapperFields.floating_point_range.copyRefObject(refObject.floating_point_range);
    this._wrapperFields.integer_range.copyRefObject(refObject.integer_range);
  }
  toPlainObject(enableTypedArray) {
    return translator.toPlainObject(this, enableTypedArray);
  }
  static freeStruct(refObject) {
    StringWrapper.freeStruct(refObject.name);
    StringWrapper.freeStruct(refObject.description);
    StringWrapper.freeStruct(refObject.additional_constraints);
    if (refObject.floating_point_range.size != 0) {
      FloatingPointRangeWrapper.ArrayType.freeArray(refObject.floating_point_range);
      if (FloatingPointRangeWrapper.ArrayType.useTypedArray) {
        // Do nothing, the v8 will take the ownership of the ArrayBuffer used by the typed array.
      } else {
        deallocator.freeStructMember(refObject.floating_point_range, FloatingPointRangeWrapper.refObjectArrayType, 'data');
      }
    }
    if (refObject.integer_range.size != 0) {
      IntegerRangeWrapper.ArrayType.freeArray(refObject.integer_range);
      if (IntegerRangeWrapper.ArrayType.useTypedArray) {
        // Do nothing, the v8 will take the ownership of the ArrayBuffer used by the typed array.
      } else {
        deallocator.freeStructMember(refObject.integer_range, IntegerRangeWrapper.refObjectArrayType, 'data');
      }
    }
  }
  static destoryRawROS(msg) {
    ParameterDescriptorWrapper.freeStruct(msg.refObject);
  }
  static type() {
    return {pkgName: 'rcl_interfaces', subFolder: 'msg', interfaceName: 'ParameterDescriptor'};
  }
  static isPrimitive() {
    return false;
  }
  static get isROSArray() {
    return false;
  }
  get refObject() {
    return this._refObject;
  }
  get name() {
    if (!this._nameIntialized) {
      return undefined;
    }
    return this._wrapperFields.name.data;
  }
  set name(value) {
    this._nameIntialized = true;
    this._wrapperFields.name.data = value;
  }
  get type() {
    if (!this._typeIntialized) {
      return undefined;
    }
    return this._refObject.type;
  }
  set type(value) {
    this._typeIntialized = true;
    this._refObject.type = value;
  }
  get description() {
    if (!this._descriptionIntialized) {
      return undefined;
    }
    return this._wrapperFields.description.data;
  }
  set description(value) {
    this._descriptionIntialized = true;
    this._wrapperFields.description.data = value;
  }
  get additional_constraints() {
    if (!this._additional_constraintsIntialized) {
      return undefined;
    }
    return this._wrapperFields.additional_constraints.data;
  }
  set additional_constraints(value) {
    this._additional_constraintsIntialized = true;
    this._wrapperFields.additional_constraints.data = value;
  }
  get read_only() {
    if (!this._read_onlyIntialized) {
      return undefined;
    }
    return this._refObject.read_only;
  }
  set read_only(value) {
    this._read_onlyIntialized = true;
    this._refObject.read_only = value;
  }
  get floating_point_range() {
    return this._wrapperFields.floating_point_range;
  }
  set floating_point_range(value) {
    if (value.length > 1) {
      throw new RangeError('The length of array floating_point_range must be <= 1.');
    }
    this._wrapperFields.floating_point_range.fill(value);
  }
  get integer_range() {
    return this._wrapperFields.integer_range;
  }
  set integer_range(value) {
    if (value.length > 1) {
      throw new RangeError('The length of array integer_range must be <= 1.');
    }
    this._wrapperFields.integer_range.fill(value);
  }
  copyRefObject(refObject) {
    this._refObject = new ParameterDescriptorRefStruct(refObject.toObject());
    this._nameIntialized = true;
    this._wrapperFields.name.copyRefObject(this._refObject.name);
    this._typeIntialized = true;
    this._descriptionIntialized = true;
    this._wrapperFields.description.copyRefObject(this._refObject.description);
    this._additional_constraintsIntialized = true;
    this._wrapperFields.additional_constraints.copyRefObject(this._refObject.additional_constraints);
    this._read_onlyIntialized = true;
    this._wrapperFields.floating_point_range.copyRefObject(this._refObject.floating_point_range);
    this._wrapperFields.integer_range.copyRefObject(this._refObject.integer_range);
  }
  copy(other) {
    this._refObject = new ParameterDescriptorRefStruct(other._refObject.toObject());
    this._nameIntialized = true;
    this._wrapperFields.name.copy(other._wrapperFields.name);
    this._typeIntialized = true;
    this._descriptionIntialized = true;
    this._wrapperFields.description.copy(other._wrapperFields.description);
    this._additional_constraintsIntialized = true;
    this._wrapperFields.additional_constraints.copy(other._wrapperFields.additional_constraints);
    this._read_onlyIntialized = true;
    this._wrapperFields.floating_point_range.copy(other._wrapperFields.floating_point_range);
    this._wrapperFields.integer_range.copy(other._wrapperFields.integer_range);
  }
  static get classType() {
    return ParameterDescriptorWrapper;
  }
  static get ROSMessageDef() {
    return {"constants":[],"fields":[{"name":"name","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"string","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"type","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint8","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"description","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"string","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"additional_constraints","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"string","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"read_only","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"bool","stringUpperBound":null,"isPrimitiveType":true},"default_value":false},{"name":"floating_point_range","type":{"isArray":true,"arraySize":1,"isUpperBound":true,"isDynamicArray":true,"isFixedSizeArray":false,"pkgName":"rcl_interfaces","type":"FloatingPointRange","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"integer_range","type":{"isArray":true,"arraySize":1,"isUpperBound":true,"isDynamicArray":true,"isFixedSizeArray":false,"pkgName":"rcl_interfaces","type":"IntegerRange","stringUpperBound":null,"isPrimitiveType":false},"default_value":null}],"baseType":{"pkgName":"rcl_interfaces","type":"ParameterDescriptor","stringUpperBound":null,"isPrimitiveType":false},"msgName":"ParameterDescriptor"};
  }
  hasMember(name) {
    let memberNames = ["name","type","description","additional_constraints","read_only","floating_point_range","integer_range"];
    return memberNames.indexOf(name) !== -1;
  }
}
// Define the wrapper of array class.
class ParameterDescriptorArrayWrapper {
  constructor(size = 0) {
    this._resize(size);
  }
  toRawROS() {
    return this._refObject.ref();
  }
  fill(values) {
    const length = values.length;
    this._resize(length);
    values.forEach((value, index) => {
      if (value instanceof ParameterDescriptorWrapper) {
        this._wrappers[index].copy(value);
      } else {
        this._wrappers[index] = new ParameterDescriptorWrapper(value);
      }
    });
  }
  // Put all data currently stored in `this._wrappers` into `this._refObject`
  freeze(own) {
    this._wrappers.forEach((wrapper, index) => {
      wrapper.freeze(own);
      this._refArray[index] = wrapper.refObject;
    });
    this._refObject.size = this._wrappers.length;
    this._refObject.capacity = this._wrappers.length;
    if (this._refObject.capacity === 0) {
      this._refObject.data = null
    } else {
    this._refObject.data = this._refArray.buffer;
    }
  }
  get refObject() {
    return this._refObject;
  }
  get data() {
    return this._wrappers;
  }
  get size() {
    return this._wrappers.length;
  }
  set size(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to ParameterDescriptorArrayWrapper.size setter');
      return;
    }
    return this._resize(value);
  }
  get capacity() {
    return this._wrappers.length;
  }
  set capacity(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to ParameterDescriptorArrayWrapper.capacity setter');
    }
    return this._resize(value);
  }
  get refObject() {
    return this._refObject;
  }
  _resize(size) {
    if (size < 0) {
      throw new RangeError('Invalid argument: should provide a positive number');
      return;
    }
    this._refArray = new ParameterDescriptorRefArray(size);
    this._refObject = new ParameterDescriptorRefStructArray();
    this._refObject.size = size;
    this._refObject.capacity = size;
    this._wrappers = new Array();
    for (let i = 0; i < size; i++) {
      this._wrappers.push(new ParameterDescriptorWrapper());
    }
  }
  // Copy all data from `this._refObject` into `this._wrappers`
  copyRefObject(refObject) {
    this._refObject = refObject;
    let refObjectArray = this._refObject.data;
    refObjectArray.length = this._refObject.size;
    this._resize(this._refObject.size);
    for (let index = 0; index < this._refObject.size; index++) {
      this._wrappers[index].copyRefObject(refObjectArray[index]);
    }
  }
  copy(other) {
    if (! (other instanceof ParameterDescriptorArrayWrapper)) {
      throw new TypeError('Invalid argument: should provide "ParameterDescriptorArrayWrapper".');
    }
    this._resize(other.size);
    // Array deep copy
    other._wrappers.forEach((wrapper, index) => {
      this._wrappers[index].copy(wrapper);
    });
  }
  static freeArray(refObject) {
    let refObjectArray = refObject.data;
    refObjectArray.length = refObject.size;
    for (let index = 0; index < refObject.size; index++) {
      ParameterDescriptorWrapper.freeStruct(refObjectArray[index]);
    }
  }
  static get elementType() {
    return ParameterDescriptorWrapper;
  }
  static get isROSArray() {
    return true;
  }
  static get useTypedArray() {
    return false;
  }
  get classType() {
    return ParameterDescriptorArrayWrapper;
  }
}
module.exports = ParameterDescriptorWrapper;
/*
 * The following is the original spec object coming from parser:
{
  "constants": [],
  "fields": [
    {
      "name": "name",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "string",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "type",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint8",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "description",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "string",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "additional_constraints",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "string",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "read_only",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "bool",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": false
    },
    {
      "name": "floating_point_range",
      "type": {
        "isArray": true,
        "arraySize": 1,
        "isUpperBound": true,
        "isDynamicArray": true,
        "isFixedSizeArray": false,
        "pkgName": "rcl_interfaces",
        "type": "FloatingPointRange",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "integer_range",
      "type": {
        "isArray": true,
        "arraySize": 1,
        "isUpperBound": true,
        "isDynamicArray": true,
        "isFixedSizeArray": false,
        "pkgName": "rcl_interfaces",
        "type": "IntegerRange",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    }
  ],
  "baseType": {
    "pkgName": "rcl_interfaces",
    "type": "ParameterDescriptor",
    "stringUpperBound": null,
    "isPrimitiveType": false
  },
  "msgName": "ParameterDescriptor"
}
*/
