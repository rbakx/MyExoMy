// This file is automatically generated by Intel rclnodejs
//
// *** DO NOT EDIT directly
//
'use strict';
const ref = require('ref-napi');
const StructType = require('ref-struct-di')(ref);
const ArrayType = require('ref-array-di')(ref);
const primitiveTypes = require('../../rosidl_gen/primitive_types.js');
const deallocator = require('../../rosidl_gen/deallocator.js');
const translator = require('../../rosidl_gen/message_translator.js');
const HeaderWrapper = require('../../generated/std_msgs/std_msgs__msg__Header.js');
const PointFieldWrapper = require('../../generated/sensor_msgs/sensor_msgs__msg__PointField.js');
const UInt8Wrapper = require('../../generated/std_msgs/std_msgs__msg__UInt8.js');
const PointCloud2RefStruct = StructType({
  header: HeaderWrapper.refObjectType,
  height: primitiveTypes.uint32,
  width: primitiveTypes.uint32,
  fields: PointFieldWrapper.refObjectArrayType,
  is_bigendian: primitiveTypes.bool,
  point_step: primitiveTypes.uint32,
  row_step: primitiveTypes.uint32,
  data: UInt8Wrapper.refObjectArrayType,
  is_dense: primitiveTypes.bool,
});
const PointCloud2RefArray = ArrayType(PointCloud2RefStruct);
const PointCloud2RefStructArray = StructType({
  data: PointCloud2RefArray,
  size: ref.types.size_t,
  capacity: ref.types.size_t
});
// Define the wrapper class.
class PointCloud2Wrapper {
  constructor(other) {
    this._wrapperFields = {};
    if (typeof other === 'object' && other._refObject) {
      this._refObject = new PointCloud2RefStruct(other._refObject.toObject());
      this._wrapperFields.header =  new HeaderWrapper(other._wrapperFields.header);
      this._heightIntialized = true;
      this._widthIntialized = true;
      this._wrapperFields.fields = PointFieldWrapper.createArray();
      this._wrapperFields.fields.copy(other._wrapperFields.fields);
      this._is_bigendianIntialized = true;
      this._point_stepIntialized = true;
      this._row_stepIntialized = true;
      this._wrapperFields.data = UInt8Wrapper.createArray();
      this._wrapperFields.data.copy(other._wrapperFields.data);
      this._is_denseIntialized = true;
    } else if (typeof other !== 'undefined') {
      this._initMembers();
      translator.constructFromPlanObject(this, other);
    } else {
      this._initMembers();
    }
    this.freeze();
  }
  _initMembers() {
    this._refObject = new PointCloud2RefStruct();
    this._wrapperFields.header = new HeaderWrapper();
    this._heightIntialized = false;
    this._widthIntialized = false;
    this._wrapperFields.fields = PointFieldWrapper.createArray();
    this._is_bigendianIntialized = false;
    this._point_stepIntialized = false;
    this._row_stepIntialized = false;
    this._wrapperFields.data = UInt8Wrapper.createArray();
    this._is_denseIntialized = false;
  }
  static createFromRefObject(refObject) {
    let self = new PointCloud2Wrapper();
    self.copyRefObject(refObject);
    return self;
  }
  static createArray() {
    return new PointCloud2ArrayWrapper;
  }
  static get ArrayType() {
    return PointCloud2ArrayWrapper;
  }
  static get refObjectArrayType() {
    return PointCloud2RefStructArray
  }
  static get refObjectType() {
    return PointCloud2RefStruct;
  }
  toRawROS() {
    this.freeze(true);
    return this._refObject.ref();
  }
  freeze(own = false, checkConsistency = false) {
    if (checkConsistency) {
      if (!this._heightIntialized) {
        throw new TypeError('Invalid argument: height in PointCloud2');
      }
      if (!this._widthIntialized) {
        throw new TypeError('Invalid argument: width in PointCloud2');
      }
      if (!this._is_bigendianIntialized) {
        throw new TypeError('Invalid argument: is_bigendian in PointCloud2');
      }
      if (!this._point_stepIntialized) {
        throw new TypeError('Invalid argument: point_step in PointCloud2');
      }
      if (!this._row_stepIntialized) {
        throw new TypeError('Invalid argument: row_step in PointCloud2');
      }
      if (!this._is_denseIntialized) {
        throw new TypeError('Invalid argument: is_dense in PointCloud2');
      }
    }
    this._wrapperFields.header.freeze(own, checkConsistency);
    this._refObject.header = this._wrapperFields.header.refObject;
    this._wrapperFields.fields.freeze(own, checkConsistency);
    this._refObject.fields = this._wrapperFields.fields.refObject;
    this._wrapperFields.data.freeze(own, checkConsistency);
    this._refObject.data = this._wrapperFields.data.refObject;
    if (own) {
      this._wrapperFields.data.fill(Uint8Array.from([]));
      this._wrapperFields.data.freeze(own, checkConsistency);
      this._refObject.data = this._wrapperFields.data.refObject;
    }
  }
  serialize() {
    this.freeze(false, true);
    return this._refObject.ref();
  }
  deserialize(refObject) {
    this._wrapperFields.header.copyRefObject(refObject.header);
    this._heightIntialized = true;
    this._refObject.height = refObject.height;
    this._widthIntialized = true;
    this._refObject.width = refObject.width;
    this._wrapperFields.fields.copyRefObject(refObject.fields);
    this._is_bigendianIntialized = true;
    this._refObject.is_bigendian = refObject.is_bigendian;
    this._point_stepIntialized = true;
    this._refObject.point_step = refObject.point_step;
    this._row_stepIntialized = true;
    this._refObject.row_step = refObject.row_step;
    this._wrapperFields.data.copyRefObject(refObject.data);
    this._is_denseIntialized = true;
    this._refObject.is_dense = refObject.is_dense;
  }
  toPlainObject(enableTypedArray) {
    return translator.toPlainObject(this, enableTypedArray);
  }
  static freeStruct(refObject) {
    HeaderWrapper.freeStruct(refObject.header);
    if (refObject.fields.size != 0) {
      PointFieldWrapper.ArrayType.freeArray(refObject.fields);
      if (PointFieldWrapper.ArrayType.useTypedArray) {
        // Do nothing, the v8 will take the ownership of the ArrayBuffer used by the typed array.
      } else {
        deallocator.freeStructMember(refObject.fields, PointFieldWrapper.refObjectArrayType, 'data');
      }
    }
    if (refObject.data.size != 0) {
      UInt8Wrapper.ArrayType.freeArray(refObject.data);
      if (UInt8Wrapper.ArrayType.useTypedArray) {
        // Do nothing, the v8 will take the ownership of the ArrayBuffer used by the typed array.
      } else {
        deallocator.freeStructMember(refObject.data, UInt8Wrapper.refObjectArrayType, 'data');
      }
    }
  }
  static destoryRawROS(msg) {
    PointCloud2Wrapper.freeStruct(msg.refObject);
  }
  static type() {
    return {pkgName: 'sensor_msgs', subFolder: 'msg', interfaceName: 'PointCloud2'};
  }
  static isPrimitive() {
    return false;
  }
  static get isROSArray() {
    return false;
  }
  get refObject() {
    return this._refObject;
  }
  get header() {
    return this._wrapperFields.header;
  }
  set header(value) {
    if (value instanceof HeaderWrapper) {
      this._wrapperFields.header.copy(value);
    } else {
      this._wrapperFields.header.copy(new HeaderWrapper(value));
    }
  }
  get height() {
    if (!this._heightIntialized) {
      return undefined;
    }
    return this._refObject.height;
  }
  set height(value) {
    this._heightIntialized = true;
    this._refObject.height = value;
  }
  get width() {
    if (!this._widthIntialized) {
      return undefined;
    }
    return this._refObject.width;
  }
  set width(value) {
    this._widthIntialized = true;
    this._refObject.width = value;
  }
  get fields() {
    return this._wrapperFields.fields;
  }
  set fields(value) {
    this._wrapperFields.fields.fill(value);
  }
  get is_bigendian() {
    if (!this._is_bigendianIntialized) {
      return undefined;
    }
    return this._refObject.is_bigendian;
  }
  set is_bigendian(value) {
    this._is_bigendianIntialized = true;
    this._refObject.is_bigendian = value;
  }
  get point_step() {
    if (!this._point_stepIntialized) {
      return undefined;
    }
    return this._refObject.point_step;
  }
  set point_step(value) {
    this._point_stepIntialized = true;
    this._refObject.point_step = value;
  }
  get row_step() {
    if (!this._row_stepIntialized) {
      return undefined;
    }
    return this._refObject.row_step;
  }
  set row_step(value) {
    this._row_stepIntialized = true;
    this._refObject.row_step = value;
  }
  get data() {
    return this._wrapperFields['data'].data;
  }
  set data(value) {
    this._wrapperFields['data'].fill(value);
  }
  get is_dense() {
    if (!this._is_denseIntialized) {
      return undefined;
    }
    return this._refObject.is_dense;
  }
  set is_dense(value) {
    this._is_denseIntialized = true;
    this._refObject.is_dense = value;
  }
  copyRefObject(refObject) {
    this._refObject = new PointCloud2RefStruct(refObject.toObject());
    this._wrapperFields.header.copyRefObject(this._refObject.header);
    this._heightIntialized = true;
    this._widthIntialized = true;
    this._wrapperFields.fields.copyRefObject(this._refObject.fields);
    this._is_bigendianIntialized = true;
    this._point_stepIntialized = true;
    this._row_stepIntialized = true;
    this._wrapperFields.data.copyRefObject(this._refObject.data);
    this._is_denseIntialized = true;
  }
  copy(other) {
    this._refObject = new PointCloud2RefStruct(other._refObject.toObject());
    this._wrapperFields.header.copy(other._wrapperFields.header);
    this._heightIntialized = true;
    this._widthIntialized = true;
    this._wrapperFields.fields.copy(other._wrapperFields.fields);
    this._is_bigendianIntialized = true;
    this._point_stepIntialized = true;
    this._row_stepIntialized = true;
    this._wrapperFields.data.copy(other._wrapperFields.data);
    this._is_denseIntialized = true;
  }
  static get classType() {
    return PointCloud2Wrapper;
  }
  static get ROSMessageDef() {
    return {"constants":[],"fields":[{"name":"header","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":"std_msgs","type":"Header","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"height","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"width","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"fields","type":{"isArray":true,"arraySize":null,"isUpperBound":false,"isDynamicArray":true,"isFixedSizeArray":null,"pkgName":"sensor_msgs","type":"PointField","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"is_bigendian","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"bool","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"point_step","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"row_step","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"data","type":{"isArray":true,"arraySize":null,"isUpperBound":false,"isDynamicArray":true,"isFixedSizeArray":null,"pkgName":null,"type":"uint8","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"is_dense","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"bool","stringUpperBound":null,"isPrimitiveType":true},"default_value":null}],"baseType":{"pkgName":"sensor_msgs","type":"PointCloud2","stringUpperBound":null,"isPrimitiveType":false},"msgName":"PointCloud2"};
  }
  hasMember(name) {
    let memberNames = ["header","height","width","fields","is_bigendian","point_step","row_step","data","is_dense"];
    return memberNames.indexOf(name) !== -1;
  }
}
// Define the wrapper of array class.
class PointCloud2ArrayWrapper {
  constructor(size = 0) {
    this._resize(size);
  }
  toRawROS() {
    return this._refObject.ref();
  }
  fill(values) {
    const length = values.length;
    this._resize(length);
    values.forEach((value, index) => {
      if (value instanceof PointCloud2Wrapper) {
        this._wrappers[index].copy(value);
      } else {
        this._wrappers[index] = new PointCloud2Wrapper(value);
      }
    });
  }
  // Put all data currently stored in `this._wrappers` into `this._refObject`
  freeze(own) {
    this._wrappers.forEach((wrapper, index) => {
      wrapper.freeze(own);
      this._refArray[index] = wrapper.refObject;
    });
    this._refObject.size = this._wrappers.length;
    this._refObject.capacity = this._wrappers.length;
    if (this._refObject.capacity === 0) {
      this._refObject.data = null
    } else {
    this._refObject.data = this._refArray.buffer;
    }
  }
  get refObject() {
    return this._refObject;
  }
  get data() {
    return this._wrappers;
  }
  get size() {
    return this._wrappers.length;
  }
  set size(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to PointCloud2ArrayWrapper.size setter');
      return;
    }
    return this._resize(value);
  }
  get capacity() {
    return this._wrappers.length;
  }
  set capacity(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to PointCloud2ArrayWrapper.capacity setter');
    }
    return this._resize(value);
  }
  get refObject() {
    return this._refObject;
  }
  _resize(size) {
    if (size < 0) {
      throw new RangeError('Invalid argument: should provide a positive number');
      return;
    }
    this._refArray = new PointCloud2RefArray(size);
    this._refObject = new PointCloud2RefStructArray();
    this._refObject.size = size;
    this._refObject.capacity = size;
    this._wrappers = new Array();
    for (let i = 0; i < size; i++) {
      this._wrappers.push(new PointCloud2Wrapper());
    }
  }
  // Copy all data from `this._refObject` into `this._wrappers`
  copyRefObject(refObject) {
    this._refObject = refObject;
    let refObjectArray = this._refObject.data;
    refObjectArray.length = this._refObject.size;
    this._resize(this._refObject.size);
    for (let index = 0; index < this._refObject.size; index++) {
      this._wrappers[index].copyRefObject(refObjectArray[index]);
    }
  }
  copy(other) {
    if (! (other instanceof PointCloud2ArrayWrapper)) {
      throw new TypeError('Invalid argument: should provide "PointCloud2ArrayWrapper".');
    }
    this._resize(other.size);
    // Array deep copy
    other._wrappers.forEach((wrapper, index) => {
      this._wrappers[index].copy(wrapper);
    });
  }
  static freeArray(refObject) {
    let refObjectArray = refObject.data;
    refObjectArray.length = refObject.size;
    for (let index = 0; index < refObject.size; index++) {
      PointCloud2Wrapper.freeStruct(refObjectArray[index]);
    }
  }
  static get elementType() {
    return PointCloud2Wrapper;
  }
  static get isROSArray() {
    return true;
  }
  static get useTypedArray() {
    return false;
  }
  get classType() {
    return PointCloud2ArrayWrapper;
  }
}
module.exports = PointCloud2Wrapper;
/*
 * The following is the original spec object coming from parser:
{
  "constants": [],
  "fields": [
    {
      "name": "header",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": "std_msgs",
        "type": "Header",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "height",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "width",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "fields",
      "type": {
        "isArray": true,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": true,
        "isFixedSizeArray": null,
        "pkgName": "sensor_msgs",
        "type": "PointField",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "is_bigendian",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "bool",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "point_step",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "row_step",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "data",
      "type": {
        "isArray": true,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": true,
        "isFixedSizeArray": null,
        "pkgName": null,
        "type": "uint8",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "is_dense",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "bool",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    }
  ],
  "baseType": {
    "pkgName": "sensor_msgs",
    "type": "PointCloud2",
    "stringUpperBound": null,
    "isPrimitiveType": false
  },
  "msgName": "PointCloud2"
}
*/
