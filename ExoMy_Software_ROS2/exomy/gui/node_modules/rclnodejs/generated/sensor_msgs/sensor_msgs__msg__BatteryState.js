// This file is automatically generated by Intel rclnodejs
//
// *** DO NOT EDIT directly
//
'use strict';
const ref = require('ref-napi');
const StructType = require('ref-struct-di')(ref);
const ArrayType = require('ref-array-di')(ref);
const primitiveTypes = require('../../rosidl_gen/primitive_types.js');
const deallocator = require('../../rosidl_gen/deallocator.js');
const translator = require('../../rosidl_gen/message_translator.js');
const HeaderWrapper = require('../../generated/std_msgs/std_msgs__msg__Header.js');
const Float32Wrapper = require('../../generated/std_msgs/std_msgs__msg__Float32.js');
const StringWrapper = require('../../generated/std_msgs/std_msgs__msg__String.js');
const BatteryStateRefStruct = StructType({
  header: HeaderWrapper.refObjectType,
  voltage: primitiveTypes.float32,
  temperature: primitiveTypes.float32,
  current: primitiveTypes.float32,
  charge: primitiveTypes.float32,
  capacity: primitiveTypes.float32,
  design_capacity: primitiveTypes.float32,
  percentage: primitiveTypes.float32,
  power_supply_status: primitiveTypes.uint8,
  power_supply_health: primitiveTypes.uint8,
  power_supply_technology: primitiveTypes.uint8,
  present: primitiveTypes.bool,
  cell_voltage: Float32Wrapper.refObjectArrayType,
  cell_temperature: Float32Wrapper.refObjectArrayType,
  location: primitiveTypes.string,
  serial_number: primitiveTypes.string,
});
const BatteryStateRefArray = ArrayType(BatteryStateRefStruct);
const BatteryStateRefStructArray = StructType({
  data: BatteryStateRefArray,
  size: ref.types.size_t,
  capacity: ref.types.size_t
});
// Define the wrapper class.
class BatteryStateWrapper {
  constructor(other) {
    this._wrapperFields = {};
    if (typeof other === 'object' && other._refObject) {
      this._refObject = new BatteryStateRefStruct(other._refObject.toObject());
      this._wrapperFields.header =  new HeaderWrapper(other._wrapperFields.header);
      this._voltageIntialized = true;
      this._temperatureIntialized = true;
      this._currentIntialized = true;
      this._chargeIntialized = true;
      this._capacityIntialized = true;
      this._design_capacityIntialized = true;
      this._percentageIntialized = true;
      this._power_supply_statusIntialized = true;
      this._power_supply_healthIntialized = true;
      this._power_supply_technologyIntialized = true;
      this._presentIntialized = true;
      this._wrapperFields.cell_voltage = Float32Wrapper.createArray();
      this._wrapperFields.cell_voltage.copy(other._wrapperFields.cell_voltage);
      this._wrapperFields.cell_temperature = Float32Wrapper.createArray();
      this._wrapperFields.cell_temperature.copy(other._wrapperFields.cell_temperature);
      this._locationIntialized = true;
      this._wrapperFields.location =  new StringWrapper(other._wrapperFields.location);
      this._serial_numberIntialized = true;
      this._wrapperFields.serial_number =  new StringWrapper(other._wrapperFields.serial_number);
    } else if (typeof other !== 'undefined') {
      this._initMembers();
      translator.constructFromPlanObject(this, other);
    } else {
      this._initMembers();
    }
    this.freeze();
  }
  _initMembers() {
    this._refObject = new BatteryStateRefStruct();
    this._wrapperFields.header = new HeaderWrapper();
    this._voltageIntialized = false;
    this._temperatureIntialized = false;
    this._currentIntialized = false;
    this._chargeIntialized = false;
    this._capacityIntialized = false;
    this._design_capacityIntialized = false;
    this._percentageIntialized = false;
    this._power_supply_statusIntialized = false;
    this._power_supply_healthIntialized = false;
    this._power_supply_technologyIntialized = false;
    this._presentIntialized = false;
    this._wrapperFields.cell_voltage = Float32Wrapper.createArray();
    this._wrapperFields.cell_temperature = Float32Wrapper.createArray();
    this._locationIntialized = false;
    this._wrapperFields.location = new StringWrapper();
    this._serial_numberIntialized = false;
    this._wrapperFields.serial_number = new StringWrapper();
  }
  static createFromRefObject(refObject) {
    let self = new BatteryStateWrapper();
    self.copyRefObject(refObject);
    return self;
  }
  static createArray() {
    return new BatteryStateArrayWrapper;
  }
  static get ArrayType() {
    return BatteryStateArrayWrapper;
  }
  static get refObjectArrayType() {
    return BatteryStateRefStructArray
  }
  static get refObjectType() {
    return BatteryStateRefStruct;
  }
  toRawROS() {
    this.freeze(true);
    return this._refObject.ref();
  }
  freeze(own = false, checkConsistency = false) {
    if (checkConsistency) {
      if (!this._voltageIntialized) {
        throw new TypeError('Invalid argument: voltage in BatteryState');
      }
      if (!this._temperatureIntialized) {
        throw new TypeError('Invalid argument: temperature in BatteryState');
      }
      if (!this._currentIntialized) {
        throw new TypeError('Invalid argument: current in BatteryState');
      }
      if (!this._chargeIntialized) {
        throw new TypeError('Invalid argument: charge in BatteryState');
      }
      if (!this._capacityIntialized) {
        throw new TypeError('Invalid argument: capacity in BatteryState');
      }
      if (!this._design_capacityIntialized) {
        throw new TypeError('Invalid argument: design_capacity in BatteryState');
      }
      if (!this._percentageIntialized) {
        throw new TypeError('Invalid argument: percentage in BatteryState');
      }
      if (!this._power_supply_statusIntialized) {
        throw new TypeError('Invalid argument: power_supply_status in BatteryState');
      }
      if (!this._power_supply_healthIntialized) {
        throw new TypeError('Invalid argument: power_supply_health in BatteryState');
      }
      if (!this._power_supply_technologyIntialized) {
        throw new TypeError('Invalid argument: power_supply_technology in BatteryState');
      }
      if (!this._presentIntialized) {
        throw new TypeError('Invalid argument: present in BatteryState');
      }
      if (!this._locationIntialized) {
        throw new TypeError('Invalid argument: location in BatteryState');
      }
      if (!this._serial_numberIntialized) {
        throw new TypeError('Invalid argument: serial_number in BatteryState');
      }
    }
    this._wrapperFields.header.freeze(own, checkConsistency);
    this._refObject.header = this._wrapperFields.header.refObject;
    this._wrapperFields.cell_voltage.freeze(own, checkConsistency);
    this._refObject.cell_voltage = this._wrapperFields.cell_voltage.refObject;
    if (own) {
      this._wrapperFields.cell_voltage.fill(Float32Array.from([]));
      this._wrapperFields.cell_voltage.freeze(own, checkConsistency);
      this._refObject.cell_voltage = this._wrapperFields.cell_voltage.refObject;
    }
    this._wrapperFields.cell_temperature.freeze(own, checkConsistency);
    this._refObject.cell_temperature = this._wrapperFields.cell_temperature.refObject;
    if (own) {
      this._wrapperFields.cell_temperature.fill(Float32Array.from([]));
      this._wrapperFields.cell_temperature.freeze(own, checkConsistency);
      this._refObject.cell_temperature = this._wrapperFields.cell_temperature.refObject;
    }
    if (own) {
      this._wrapperFields.location.freeze(own, checkConsistency);
    }
    this._refObject.location = this._wrapperFields.location.refObject;
    if (own) {
      this._wrapperFields.serial_number.freeze(own, checkConsistency);
    }
    this._refObject.serial_number = this._wrapperFields.serial_number.refObject;
  }
  serialize() {
    this.freeze(false, true);
    return this._refObject.ref();
  }
  deserialize(refObject) {
    this._wrapperFields.header.copyRefObject(refObject.header);
    this._voltageIntialized = true;
    this._refObject.voltage = refObject.voltage;
    this._temperatureIntialized = true;
    this._refObject.temperature = refObject.temperature;
    this._currentIntialized = true;
    this._refObject.current = refObject.current;
    this._chargeIntialized = true;
    this._refObject.charge = refObject.charge;
    this._capacityIntialized = true;
    this._refObject.capacity = refObject.capacity;
    this._design_capacityIntialized = true;
    this._refObject.design_capacity = refObject.design_capacity;
    this._percentageIntialized = true;
    this._refObject.percentage = refObject.percentage;
    this._power_supply_statusIntialized = true;
    this._refObject.power_supply_status = refObject.power_supply_status;
    this._power_supply_healthIntialized = true;
    this._refObject.power_supply_health = refObject.power_supply_health;
    this._power_supply_technologyIntialized = true;
    this._refObject.power_supply_technology = refObject.power_supply_technology;
    this._presentIntialized = true;
    this._refObject.present = refObject.present;
    this._wrapperFields.cell_voltage.copyRefObject(refObject.cell_voltage);
    this._wrapperFields.cell_temperature.copyRefObject(refObject.cell_temperature);
    this._locationIntialized = true;
    this._wrapperFields.location.data = refObject.location.data;
    this._serial_numberIntialized = true;
    this._wrapperFields.serial_number.data = refObject.serial_number.data;
  }
  toPlainObject(enableTypedArray) {
    return translator.toPlainObject(this, enableTypedArray);
  }
  static freeStruct(refObject) {
    HeaderWrapper.freeStruct(refObject.header);
    if (refObject.cell_voltage.size != 0) {
      Float32Wrapper.ArrayType.freeArray(refObject.cell_voltage);
      if (Float32Wrapper.ArrayType.useTypedArray) {
        // Do nothing, the v8 will take the ownership of the ArrayBuffer used by the typed array.
      } else {
        deallocator.freeStructMember(refObject.cell_voltage, Float32Wrapper.refObjectArrayType, 'data');
      }
    }
    if (refObject.cell_temperature.size != 0) {
      Float32Wrapper.ArrayType.freeArray(refObject.cell_temperature);
      if (Float32Wrapper.ArrayType.useTypedArray) {
        // Do nothing, the v8 will take the ownership of the ArrayBuffer used by the typed array.
      } else {
        deallocator.freeStructMember(refObject.cell_temperature, Float32Wrapper.refObjectArrayType, 'data');
      }
    }
    StringWrapper.freeStruct(refObject.location);
    StringWrapper.freeStruct(refObject.serial_number);
  }
  static destoryRawROS(msg) {
    BatteryStateWrapper.freeStruct(msg.refObject);
  }
  static type() {
    return {pkgName: 'sensor_msgs', subFolder: 'msg', interfaceName: 'BatteryState'};
  }
  static isPrimitive() {
    return false;
  }
  static get isROSArray() {
    return false;
  }
  get refObject() {
    return this._refObject;
  }
  get header() {
    return this._wrapperFields.header;
  }
  set header(value) {
    if (value instanceof HeaderWrapper) {
      this._wrapperFields.header.copy(value);
    } else {
      this._wrapperFields.header.copy(new HeaderWrapper(value));
    }
  }
  get voltage() {
    if (!this._voltageIntialized) {
      return undefined;
    }
    return this._refObject.voltage;
  }
  set voltage(value) {
    this._voltageIntialized = true;
    this._refObject.voltage = value;
  }
  get temperature() {
    if (!this._temperatureIntialized) {
      return undefined;
    }
    return this._refObject.temperature;
  }
  set temperature(value) {
    this._temperatureIntialized = true;
    this._refObject.temperature = value;
  }
  get current() {
    if (!this._currentIntialized) {
      return undefined;
    }
    return this._refObject.current;
  }
  set current(value) {
    this._currentIntialized = true;
    this._refObject.current = value;
  }
  get charge() {
    if (!this._chargeIntialized) {
      return undefined;
    }
    return this._refObject.charge;
  }
  set charge(value) {
    this._chargeIntialized = true;
    this._refObject.charge = value;
  }
  get capacity() {
    if (!this._capacityIntialized) {
      return undefined;
    }
    return this._refObject.capacity;
  }
  set capacity(value) {
    this._capacityIntialized = true;
    this._refObject.capacity = value;
  }
  get design_capacity() {
    if (!this._design_capacityIntialized) {
      return undefined;
    }
    return this._refObject.design_capacity;
  }
  set design_capacity(value) {
    this._design_capacityIntialized = true;
    this._refObject.design_capacity = value;
  }
  get percentage() {
    if (!this._percentageIntialized) {
      return undefined;
    }
    return this._refObject.percentage;
  }
  set percentage(value) {
    this._percentageIntialized = true;
    this._refObject.percentage = value;
  }
  get power_supply_status() {
    if (!this._power_supply_statusIntialized) {
      return undefined;
    }
    return this._refObject.power_supply_status;
  }
  set power_supply_status(value) {
    this._power_supply_statusIntialized = true;
    this._refObject.power_supply_status = value;
  }
  get power_supply_health() {
    if (!this._power_supply_healthIntialized) {
      return undefined;
    }
    return this._refObject.power_supply_health;
  }
  set power_supply_health(value) {
    this._power_supply_healthIntialized = true;
    this._refObject.power_supply_health = value;
  }
  get power_supply_technology() {
    if (!this._power_supply_technologyIntialized) {
      return undefined;
    }
    return this._refObject.power_supply_technology;
  }
  set power_supply_technology(value) {
    this._power_supply_technologyIntialized = true;
    this._refObject.power_supply_technology = value;
  }
  get present() {
    if (!this._presentIntialized) {
      return undefined;
    }
    return this._refObject.present;
  }
  set present(value) {
    this._presentIntialized = true;
    this._refObject.present = value;
  }
  get cell_voltage() {
    return this._wrapperFields['cell_voltage'].data;
  }
  set cell_voltage(value) {
    this._wrapperFields['cell_voltage'].fill(value);
  }
  get cell_temperature() {
    return this._wrapperFields['cell_temperature'].data;
  }
  set cell_temperature(value) {
    this._wrapperFields['cell_temperature'].fill(value);
  }
  get location() {
    if (!this._locationIntialized) {
      return undefined;
    }
    return this._wrapperFields.location.data;
  }
  set location(value) {
    this._locationIntialized = true;
    this._wrapperFields.location.data = value;
  }
  get serial_number() {
    if (!this._serial_numberIntialized) {
      return undefined;
    }
    return this._wrapperFields.serial_number.data;
  }
  set serial_number(value) {
    this._serial_numberIntialized = true;
    this._wrapperFields.serial_number.data = value;
  }
  copyRefObject(refObject) {
    this._refObject = new BatteryStateRefStruct(refObject.toObject());
    this._wrapperFields.header.copyRefObject(this._refObject.header);
    this._voltageIntialized = true;
    this._temperatureIntialized = true;
    this._currentIntialized = true;
    this._chargeIntialized = true;
    this._capacityIntialized = true;
    this._design_capacityIntialized = true;
    this._percentageIntialized = true;
    this._power_supply_statusIntialized = true;
    this._power_supply_healthIntialized = true;
    this._power_supply_technologyIntialized = true;
    this._presentIntialized = true;
    this._wrapperFields.cell_voltage.copyRefObject(this._refObject.cell_voltage);
    this._wrapperFields.cell_temperature.copyRefObject(this._refObject.cell_temperature);
    this._locationIntialized = true;
    this._wrapperFields.location.copyRefObject(this._refObject.location);
    this._serial_numberIntialized = true;
    this._wrapperFields.serial_number.copyRefObject(this._refObject.serial_number);
  }
  copy(other) {
    this._refObject = new BatteryStateRefStruct(other._refObject.toObject());
    this._wrapperFields.header.copy(other._wrapperFields.header);
    this._voltageIntialized = true;
    this._temperatureIntialized = true;
    this._currentIntialized = true;
    this._chargeIntialized = true;
    this._capacityIntialized = true;
    this._design_capacityIntialized = true;
    this._percentageIntialized = true;
    this._power_supply_statusIntialized = true;
    this._power_supply_healthIntialized = true;
    this._power_supply_technologyIntialized = true;
    this._presentIntialized = true;
    this._wrapperFields.cell_voltage.copy(other._wrapperFields.cell_voltage);
    this._wrapperFields.cell_temperature.copy(other._wrapperFields.cell_temperature);
    this._locationIntialized = true;
    this._wrapperFields.location.copy(other._wrapperFields.location);
    this._serial_numberIntialized = true;
    this._wrapperFields.serial_number.copy(other._wrapperFields.serial_number);
  }
  static get classType() {
    return BatteryStateWrapper;
  }
  static get ROSMessageDef() {
    return {"constants":[{"type":"uint8","name":"POWER_SUPPLY_STATUS_UNKNOWN","value":0},{"type":"uint8","name":"POWER_SUPPLY_STATUS_CHARGING","value":1},{"type":"uint8","name":"POWER_SUPPLY_STATUS_DISCHARGING","value":2},{"type":"uint8","name":"POWER_SUPPLY_STATUS_NOT_CHARGING","value":3},{"type":"uint8","name":"POWER_SUPPLY_STATUS_FULL","value":4},{"type":"uint8","name":"POWER_SUPPLY_HEALTH_UNKNOWN","value":0},{"type":"uint8","name":"POWER_SUPPLY_HEALTH_GOOD","value":1},{"type":"uint8","name":"POWER_SUPPLY_HEALTH_OVERHEAT","value":2},{"type":"uint8","name":"POWER_SUPPLY_HEALTH_DEAD","value":3},{"type":"uint8","name":"POWER_SUPPLY_HEALTH_OVERVOLTAGE","value":4},{"type":"uint8","name":"POWER_SUPPLY_HEALTH_UNSPEC_FAILURE","value":5},{"type":"uint8","name":"POWER_SUPPLY_HEALTH_COLD","value":6},{"type":"uint8","name":"POWER_SUPPLY_HEALTH_WATCHDOG_TIMER_EXPIRE","value":7},{"type":"uint8","name":"POWER_SUPPLY_HEALTH_SAFETY_TIMER_EXPIRE","value":8},{"type":"uint8","name":"POWER_SUPPLY_TECHNOLOGY_UNKNOWN","value":0},{"type":"uint8","name":"POWER_SUPPLY_TECHNOLOGY_NIMH","value":1},{"type":"uint8","name":"POWER_SUPPLY_TECHNOLOGY_LION","value":2},{"type":"uint8","name":"POWER_SUPPLY_TECHNOLOGY_LIPO","value":3},{"type":"uint8","name":"POWER_SUPPLY_TECHNOLOGY_LIFE","value":4},{"type":"uint8","name":"POWER_SUPPLY_TECHNOLOGY_NICD","value":5},{"type":"uint8","name":"POWER_SUPPLY_TECHNOLOGY_LIMN","value":6}],"fields":[{"name":"header","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":"std_msgs","type":"Header","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"voltage","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"temperature","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"current","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"charge","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"capacity","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"design_capacity","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"percentage","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"power_supply_status","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint8","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"power_supply_health","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint8","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"power_supply_technology","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint8","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"present","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"bool","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"cell_voltage","type":{"isArray":true,"arraySize":null,"isUpperBound":false,"isDynamicArray":true,"isFixedSizeArray":null,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"cell_temperature","type":{"isArray":true,"arraySize":null,"isUpperBound":false,"isDynamicArray":true,"isFixedSizeArray":null,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"location","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"string","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"serial_number","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"string","stringUpperBound":null,"isPrimitiveType":true},"default_value":null}],"baseType":{"pkgName":"sensor_msgs","type":"BatteryState","stringUpperBound":null,"isPrimitiveType":false},"msgName":"BatteryState"};
  }
  hasMember(name) {
    let memberNames = ["header","voltage","temperature","current","charge","capacity","design_capacity","percentage","power_supply_status","power_supply_health","power_supply_technology","present","cell_voltage","cell_temperature","location","serial_number"];
    return memberNames.indexOf(name) !== -1;
  }
}
// Define the wrapper of array class.
class BatteryStateArrayWrapper {
  constructor(size = 0) {
    this._resize(size);
  }
  toRawROS() {
    return this._refObject.ref();
  }
  fill(values) {
    const length = values.length;
    this._resize(length);
    values.forEach((value, index) => {
      if (value instanceof BatteryStateWrapper) {
        this._wrappers[index].copy(value);
      } else {
        this._wrappers[index] = new BatteryStateWrapper(value);
      }
    });
  }
  // Put all data currently stored in `this._wrappers` into `this._refObject`
  freeze(own) {
    this._wrappers.forEach((wrapper, index) => {
      wrapper.freeze(own);
      this._refArray[index] = wrapper.refObject;
    });
    this._refObject.size = this._wrappers.length;
    this._refObject.capacity = this._wrappers.length;
    if (this._refObject.capacity === 0) {
      this._refObject.data = null
    } else {
    this._refObject.data = this._refArray.buffer;
    }
  }
  get refObject() {
    return this._refObject;
  }
  get data() {
    return this._wrappers;
  }
  get size() {
    return this._wrappers.length;
  }
  set size(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to BatteryStateArrayWrapper.size setter');
      return;
    }
    return this._resize(value);
  }
  get capacity() {
    return this._wrappers.length;
  }
  set capacity(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to BatteryStateArrayWrapper.capacity setter');
    }
    return this._resize(value);
  }
  get refObject() {
    return this._refObject;
  }
  _resize(size) {
    if (size < 0) {
      throw new RangeError('Invalid argument: should provide a positive number');
      return;
    }
    this._refArray = new BatteryStateRefArray(size);
    this._refObject = new BatteryStateRefStructArray();
    this._refObject.size = size;
    this._refObject.capacity = size;
    this._wrappers = new Array();
    for (let i = 0; i < size; i++) {
      this._wrappers.push(new BatteryStateWrapper());
    }
  }
  // Copy all data from `this._refObject` into `this._wrappers`
  copyRefObject(refObject) {
    this._refObject = refObject;
    let refObjectArray = this._refObject.data;
    refObjectArray.length = this._refObject.size;
    this._resize(this._refObject.size);
    for (let index = 0; index < this._refObject.size; index++) {
      this._wrappers[index].copyRefObject(refObjectArray[index]);
    }
  }
  copy(other) {
    if (! (other instanceof BatteryStateArrayWrapper)) {
      throw new TypeError('Invalid argument: should provide "BatteryStateArrayWrapper".');
    }
    this._resize(other.size);
    // Array deep copy
    other._wrappers.forEach((wrapper, index) => {
      this._wrappers[index].copy(wrapper);
    });
  }
  static freeArray(refObject) {
    let refObjectArray = refObject.data;
    refObjectArray.length = refObject.size;
    for (let index = 0; index < refObject.size; index++) {
      BatteryStateWrapper.freeStruct(refObjectArray[index]);
    }
  }
  static get elementType() {
    return BatteryStateWrapper;
  }
  static get isROSArray() {
    return true;
  }
  static get useTypedArray() {
    return false;
  }
  get classType() {
    return BatteryStateArrayWrapper;
  }
}
// Define constants (21 in total)
Object.defineProperty(BatteryStateWrapper, "POWER_SUPPLY_STATUS_UNKNOWN", {value: 0, writable: false, enumerable: true, configurable: true});
Object.defineProperty(BatteryStateWrapper, "POWER_SUPPLY_STATUS_CHARGING", {value: 1, writable: false, enumerable: true, configurable: true});
Object.defineProperty(BatteryStateWrapper, "POWER_SUPPLY_STATUS_DISCHARGING", {value: 2, writable: false, enumerable: true, configurable: true});
Object.defineProperty(BatteryStateWrapper, "POWER_SUPPLY_STATUS_NOT_CHARGING", {value: 3, writable: false, enumerable: true, configurable: true});
Object.defineProperty(BatteryStateWrapper, "POWER_SUPPLY_STATUS_FULL", {value: 4, writable: false, enumerable: true, configurable: true});
Object.defineProperty(BatteryStateWrapper, "POWER_SUPPLY_HEALTH_UNKNOWN", {value: 0, writable: false, enumerable: true, configurable: true});
Object.defineProperty(BatteryStateWrapper, "POWER_SUPPLY_HEALTH_GOOD", {value: 1, writable: false, enumerable: true, configurable: true});
Object.defineProperty(BatteryStateWrapper, "POWER_SUPPLY_HEALTH_OVERHEAT", {value: 2, writable: false, enumerable: true, configurable: true});
Object.defineProperty(BatteryStateWrapper, "POWER_SUPPLY_HEALTH_DEAD", {value: 3, writable: false, enumerable: true, configurable: true});
Object.defineProperty(BatteryStateWrapper, "POWER_SUPPLY_HEALTH_OVERVOLTAGE", {value: 4, writable: false, enumerable: true, configurable: true});
Object.defineProperty(BatteryStateWrapper, "POWER_SUPPLY_HEALTH_UNSPEC_FAILURE", {value: 5, writable: false, enumerable: true, configurable: true});
Object.defineProperty(BatteryStateWrapper, "POWER_SUPPLY_HEALTH_COLD", {value: 6, writable: false, enumerable: true, configurable: true});
Object.defineProperty(BatteryStateWrapper, "POWER_SUPPLY_HEALTH_WATCHDOG_TIMER_EXPIRE", {value: 7, writable: false, enumerable: true, configurable: true});
Object.defineProperty(BatteryStateWrapper, "POWER_SUPPLY_HEALTH_SAFETY_TIMER_EXPIRE", {value: 8, writable: false, enumerable: true, configurable: true});
Object.defineProperty(BatteryStateWrapper, "POWER_SUPPLY_TECHNOLOGY_UNKNOWN", {value: 0, writable: false, enumerable: true, configurable: true});
Object.defineProperty(BatteryStateWrapper, "POWER_SUPPLY_TECHNOLOGY_NIMH", {value: 1, writable: false, enumerable: true, configurable: true});
Object.defineProperty(BatteryStateWrapper, "POWER_SUPPLY_TECHNOLOGY_LION", {value: 2, writable: false, enumerable: true, configurable: true});
Object.defineProperty(BatteryStateWrapper, "POWER_SUPPLY_TECHNOLOGY_LIPO", {value: 3, writable: false, enumerable: true, configurable: true});
Object.defineProperty(BatteryStateWrapper, "POWER_SUPPLY_TECHNOLOGY_LIFE", {value: 4, writable: false, enumerable: true, configurable: true});
Object.defineProperty(BatteryStateWrapper, "POWER_SUPPLY_TECHNOLOGY_NICD", {value: 5, writable: false, enumerable: true, configurable: true});
Object.defineProperty(BatteryStateWrapper, "POWER_SUPPLY_TECHNOLOGY_LIMN", {value: 6, writable: false, enumerable: true, configurable: true});
module.exports = BatteryStateWrapper;
/*
 * The following is the original spec object coming from parser:
{
  "constants": [
    {
      "type": "uint8",
      "name": "POWER_SUPPLY_STATUS_UNKNOWN",
      "value": 0
    },
    {
      "type": "uint8",
      "name": "POWER_SUPPLY_STATUS_CHARGING",
      "value": 1
    },
    {
      "type": "uint8",
      "name": "POWER_SUPPLY_STATUS_DISCHARGING",
      "value": 2
    },
    {
      "type": "uint8",
      "name": "POWER_SUPPLY_STATUS_NOT_CHARGING",
      "value": 3
    },
    {
      "type": "uint8",
      "name": "POWER_SUPPLY_STATUS_FULL",
      "value": 4
    },
    {
      "type": "uint8",
      "name": "POWER_SUPPLY_HEALTH_UNKNOWN",
      "value": 0
    },
    {
      "type": "uint8",
      "name": "POWER_SUPPLY_HEALTH_GOOD",
      "value": 1
    },
    {
      "type": "uint8",
      "name": "POWER_SUPPLY_HEALTH_OVERHEAT",
      "value": 2
    },
    {
      "type": "uint8",
      "name": "POWER_SUPPLY_HEALTH_DEAD",
      "value": 3
    },
    {
      "type": "uint8",
      "name": "POWER_SUPPLY_HEALTH_OVERVOLTAGE",
      "value": 4
    },
    {
      "type": "uint8",
      "name": "POWER_SUPPLY_HEALTH_UNSPEC_FAILURE",
      "value": 5
    },
    {
      "type": "uint8",
      "name": "POWER_SUPPLY_HEALTH_COLD",
      "value": 6
    },
    {
      "type": "uint8",
      "name": "POWER_SUPPLY_HEALTH_WATCHDOG_TIMER_EXPIRE",
      "value": 7
    },
    {
      "type": "uint8",
      "name": "POWER_SUPPLY_HEALTH_SAFETY_TIMER_EXPIRE",
      "value": 8
    },
    {
      "type": "uint8",
      "name": "POWER_SUPPLY_TECHNOLOGY_UNKNOWN",
      "value": 0
    },
    {
      "type": "uint8",
      "name": "POWER_SUPPLY_TECHNOLOGY_NIMH",
      "value": 1
    },
    {
      "type": "uint8",
      "name": "POWER_SUPPLY_TECHNOLOGY_LION",
      "value": 2
    },
    {
      "type": "uint8",
      "name": "POWER_SUPPLY_TECHNOLOGY_LIPO",
      "value": 3
    },
    {
      "type": "uint8",
      "name": "POWER_SUPPLY_TECHNOLOGY_LIFE",
      "value": 4
    },
    {
      "type": "uint8",
      "name": "POWER_SUPPLY_TECHNOLOGY_NICD",
      "value": 5
    },
    {
      "type": "uint8",
      "name": "POWER_SUPPLY_TECHNOLOGY_LIMN",
      "value": 6
    }
  ],
  "fields": [
    {
      "name": "header",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": "std_msgs",
        "type": "Header",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "voltage",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "temperature",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "current",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "charge",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "capacity",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "design_capacity",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "percentage",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "power_supply_status",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint8",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "power_supply_health",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint8",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "power_supply_technology",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint8",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "present",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "bool",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "cell_voltage",
      "type": {
        "isArray": true,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": true,
        "isFixedSizeArray": null,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "cell_temperature",
      "type": {
        "isArray": true,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": true,
        "isFixedSizeArray": null,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "location",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "string",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "serial_number",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "string",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    }
  ],
  "baseType": {
    "pkgName": "sensor_msgs",
    "type": "BatteryState",
    "stringUpperBound": null,
    "isPrimitiveType": false
  },
  "msgName": "BatteryState"
}
*/
