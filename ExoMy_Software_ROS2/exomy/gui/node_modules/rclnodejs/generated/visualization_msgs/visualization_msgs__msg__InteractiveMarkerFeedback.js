// This file is automatically generated by Intel rclnodejs
//
// *** DO NOT EDIT directly
//
'use strict';
const ref = require('ref-napi');
const StructType = require('ref-struct-di')(ref);
const ArrayType = require('ref-array-di')(ref);
const primitiveTypes = require('../../rosidl_gen/primitive_types.js');
const deallocator = require('../../rosidl_gen/deallocator.js');
const translator = require('../../rosidl_gen/message_translator.js');
const HeaderWrapper = require('../../generated/std_msgs/std_msgs__msg__Header.js');
const StringWrapper = require('../../generated/std_msgs/std_msgs__msg__String.js');
const PoseWrapper = require('../../generated/geometry_msgs/geometry_msgs__msg__Pose.js');
const PointWrapper = require('../../generated/geometry_msgs/geometry_msgs__msg__Point.js');
const InteractiveMarkerFeedbackRefStruct = StructType({
  header: HeaderWrapper.refObjectType,
  client_id: primitiveTypes.string,
  marker_name: primitiveTypes.string,
  control_name: primitiveTypes.string,
  event_type: primitiveTypes.uint8,
  pose: PoseWrapper.refObjectType,
  menu_entry_id: primitiveTypes.uint32,
  mouse_point: PointWrapper.refObjectType,
  mouse_point_valid: primitiveTypes.bool,
});
const InteractiveMarkerFeedbackRefArray = ArrayType(InteractiveMarkerFeedbackRefStruct);
const InteractiveMarkerFeedbackRefStructArray = StructType({
  data: InteractiveMarkerFeedbackRefArray,
  size: ref.types.size_t,
  capacity: ref.types.size_t
});
// Define the wrapper class.
class InteractiveMarkerFeedbackWrapper {
  constructor(other) {
    this._wrapperFields = {};
    if (typeof other === 'object' && other._refObject) {
      this._refObject = new InteractiveMarkerFeedbackRefStruct(other._refObject.toObject());
      this._wrapperFields.header =  new HeaderWrapper(other._wrapperFields.header);
      this._client_idIntialized = true;
      this._wrapperFields.client_id =  new StringWrapper(other._wrapperFields.client_id);
      this._marker_nameIntialized = true;
      this._wrapperFields.marker_name =  new StringWrapper(other._wrapperFields.marker_name);
      this._control_nameIntialized = true;
      this._wrapperFields.control_name =  new StringWrapper(other._wrapperFields.control_name);
      this._event_typeIntialized = true;
      this._wrapperFields.pose =  new PoseWrapper(other._wrapperFields.pose);
      this._menu_entry_idIntialized = true;
      this._wrapperFields.mouse_point =  new PointWrapper(other._wrapperFields.mouse_point);
      this._mouse_point_validIntialized = true;
    } else if (typeof other !== 'undefined') {
      this._initMembers();
      translator.constructFromPlanObject(this, other);
    } else {
      this._initMembers();
    }
    this.freeze();
  }
  _initMembers() {
    this._refObject = new InteractiveMarkerFeedbackRefStruct();
    this._wrapperFields.header = new HeaderWrapper();
    this._client_idIntialized = false;
    this._wrapperFields.client_id = new StringWrapper();
    this._marker_nameIntialized = false;
    this._wrapperFields.marker_name = new StringWrapper();
    this._control_nameIntialized = false;
    this._wrapperFields.control_name = new StringWrapper();
    this._event_typeIntialized = false;
    this._wrapperFields.pose = new PoseWrapper();
    this._menu_entry_idIntialized = false;
    this._wrapperFields.mouse_point = new PointWrapper();
    this._mouse_point_validIntialized = false;
  }
  static createFromRefObject(refObject) {
    let self = new InteractiveMarkerFeedbackWrapper();
    self.copyRefObject(refObject);
    return self;
  }
  static createArray() {
    return new InteractiveMarkerFeedbackArrayWrapper;
  }
  static get ArrayType() {
    return InteractiveMarkerFeedbackArrayWrapper;
  }
  static get refObjectArrayType() {
    return InteractiveMarkerFeedbackRefStructArray
  }
  static get refObjectType() {
    return InteractiveMarkerFeedbackRefStruct;
  }
  toRawROS() {
    this.freeze(true);
    return this._refObject.ref();
  }
  freeze(own = false, checkConsistency = false) {
    if (checkConsistency) {
      if (!this._client_idIntialized) {
        throw new TypeError('Invalid argument: client_id in InteractiveMarkerFeedback');
      }
      if (!this._marker_nameIntialized) {
        throw new TypeError('Invalid argument: marker_name in InteractiveMarkerFeedback');
      }
      if (!this._control_nameIntialized) {
        throw new TypeError('Invalid argument: control_name in InteractiveMarkerFeedback');
      }
      if (!this._event_typeIntialized) {
        throw new TypeError('Invalid argument: event_type in InteractiveMarkerFeedback');
      }
      if (!this._menu_entry_idIntialized) {
        throw new TypeError('Invalid argument: menu_entry_id in InteractiveMarkerFeedback');
      }
      if (!this._mouse_point_validIntialized) {
        throw new TypeError('Invalid argument: mouse_point_valid in InteractiveMarkerFeedback');
      }
    }
    this._wrapperFields.header.freeze(own, checkConsistency);
    this._refObject.header = this._wrapperFields.header.refObject;
    if (own) {
      this._wrapperFields.client_id.freeze(own, checkConsistency);
    }
    this._refObject.client_id = this._wrapperFields.client_id.refObject;
    if (own) {
      this._wrapperFields.marker_name.freeze(own, checkConsistency);
    }
    this._refObject.marker_name = this._wrapperFields.marker_name.refObject;
    if (own) {
      this._wrapperFields.control_name.freeze(own, checkConsistency);
    }
    this._refObject.control_name = this._wrapperFields.control_name.refObject;
    this._wrapperFields.pose.freeze(own, checkConsistency);
    this._refObject.pose = this._wrapperFields.pose.refObject;
    this._wrapperFields.mouse_point.freeze(own, checkConsistency);
    this._refObject.mouse_point = this._wrapperFields.mouse_point.refObject;
  }
  serialize() {
    this.freeze(false, true);
    return this._refObject.ref();
  }
  deserialize(refObject) {
    this._wrapperFields.header.copyRefObject(refObject.header);
    this._client_idIntialized = true;
    this._wrapperFields.client_id.data = refObject.client_id.data;
    this._marker_nameIntialized = true;
    this._wrapperFields.marker_name.data = refObject.marker_name.data;
    this._control_nameIntialized = true;
    this._wrapperFields.control_name.data = refObject.control_name.data;
    this._event_typeIntialized = true;
    this._refObject.event_type = refObject.event_type;
    this._wrapperFields.pose.copyRefObject(refObject.pose);
    this._menu_entry_idIntialized = true;
    this._refObject.menu_entry_id = refObject.menu_entry_id;
    this._wrapperFields.mouse_point.copyRefObject(refObject.mouse_point);
    this._mouse_point_validIntialized = true;
    this._refObject.mouse_point_valid = refObject.mouse_point_valid;
  }
  toPlainObject(enableTypedArray) {
    return translator.toPlainObject(this, enableTypedArray);
  }
  static freeStruct(refObject) {
    HeaderWrapper.freeStruct(refObject.header);
    StringWrapper.freeStruct(refObject.client_id);
    StringWrapper.freeStruct(refObject.marker_name);
    StringWrapper.freeStruct(refObject.control_name);
    PoseWrapper.freeStruct(refObject.pose);
    PointWrapper.freeStruct(refObject.mouse_point);
  }
  static destoryRawROS(msg) {
    InteractiveMarkerFeedbackWrapper.freeStruct(msg.refObject);
  }
  static type() {
    return {pkgName: 'visualization_msgs', subFolder: 'msg', interfaceName: 'InteractiveMarkerFeedback'};
  }
  static isPrimitive() {
    return false;
  }
  static get isROSArray() {
    return false;
  }
  get refObject() {
    return this._refObject;
  }
  get header() {
    return this._wrapperFields.header;
  }
  set header(value) {
    if (value instanceof HeaderWrapper) {
      this._wrapperFields.header.copy(value);
    } else {
      this._wrapperFields.header.copy(new HeaderWrapper(value));
    }
  }
  get client_id() {
    if (!this._client_idIntialized) {
      return undefined;
    }
    return this._wrapperFields.client_id.data;
  }
  set client_id(value) {
    this._client_idIntialized = true;
    this._wrapperFields.client_id.data = value;
  }
  get marker_name() {
    if (!this._marker_nameIntialized) {
      return undefined;
    }
    return this._wrapperFields.marker_name.data;
  }
  set marker_name(value) {
    this._marker_nameIntialized = true;
    this._wrapperFields.marker_name.data = value;
  }
  get control_name() {
    if (!this._control_nameIntialized) {
      return undefined;
    }
    return this._wrapperFields.control_name.data;
  }
  set control_name(value) {
    this._control_nameIntialized = true;
    this._wrapperFields.control_name.data = value;
  }
  get event_type() {
    if (!this._event_typeIntialized) {
      return undefined;
    }
    return this._refObject.event_type;
  }
  set event_type(value) {
    this._event_typeIntialized = true;
    this._refObject.event_type = value;
  }
  get pose() {
    return this._wrapperFields.pose;
  }
  set pose(value) {
    if (value instanceof PoseWrapper) {
      this._wrapperFields.pose.copy(value);
    } else {
      this._wrapperFields.pose.copy(new PoseWrapper(value));
    }
  }
  get menu_entry_id() {
    if (!this._menu_entry_idIntialized) {
      return undefined;
    }
    return this._refObject.menu_entry_id;
  }
  set menu_entry_id(value) {
    this._menu_entry_idIntialized = true;
    this._refObject.menu_entry_id = value;
  }
  get mouse_point() {
    return this._wrapperFields.mouse_point;
  }
  set mouse_point(value) {
    if (value instanceof PointWrapper) {
      this._wrapperFields.mouse_point.copy(value);
    } else {
      this._wrapperFields.mouse_point.copy(new PointWrapper(value));
    }
  }
  get mouse_point_valid() {
    if (!this._mouse_point_validIntialized) {
      return undefined;
    }
    return this._refObject.mouse_point_valid;
  }
  set mouse_point_valid(value) {
    this._mouse_point_validIntialized = true;
    this._refObject.mouse_point_valid = value;
  }
  copyRefObject(refObject) {
    this._refObject = new InteractiveMarkerFeedbackRefStruct(refObject.toObject());
    this._wrapperFields.header.copyRefObject(this._refObject.header);
    this._client_idIntialized = true;
    this._wrapperFields.client_id.copyRefObject(this._refObject.client_id);
    this._marker_nameIntialized = true;
    this._wrapperFields.marker_name.copyRefObject(this._refObject.marker_name);
    this._control_nameIntialized = true;
    this._wrapperFields.control_name.copyRefObject(this._refObject.control_name);
    this._event_typeIntialized = true;
    this._wrapperFields.pose.copyRefObject(this._refObject.pose);
    this._menu_entry_idIntialized = true;
    this._wrapperFields.mouse_point.copyRefObject(this._refObject.mouse_point);
    this._mouse_point_validIntialized = true;
  }
  copy(other) {
    this._refObject = new InteractiveMarkerFeedbackRefStruct(other._refObject.toObject());
    this._wrapperFields.header.copy(other._wrapperFields.header);
    this._client_idIntialized = true;
    this._wrapperFields.client_id.copy(other._wrapperFields.client_id);
    this._marker_nameIntialized = true;
    this._wrapperFields.marker_name.copy(other._wrapperFields.marker_name);
    this._control_nameIntialized = true;
    this._wrapperFields.control_name.copy(other._wrapperFields.control_name);
    this._event_typeIntialized = true;
    this._wrapperFields.pose.copy(other._wrapperFields.pose);
    this._menu_entry_idIntialized = true;
    this._wrapperFields.mouse_point.copy(other._wrapperFields.mouse_point);
    this._mouse_point_validIntialized = true;
  }
  static get classType() {
    return InteractiveMarkerFeedbackWrapper;
  }
  static get ROSMessageDef() {
    return {"constants":[{"type":"uint8","name":"KEEP_ALIVE","value":0},{"type":"uint8","name":"POSE_UPDATE","value":1},{"type":"uint8","name":"MENU_SELECT","value":2},{"type":"uint8","name":"BUTTON_CLICK","value":3},{"type":"uint8","name":"MOUSE_DOWN","value":4},{"type":"uint8","name":"MOUSE_UP","value":5}],"fields":[{"name":"header","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":"std_msgs","type":"Header","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"client_id","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"string","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"marker_name","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"string","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"control_name","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"string","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"event_type","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint8","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"pose","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":"geometry_msgs","type":"Pose","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"menu_entry_id","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"mouse_point","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":"geometry_msgs","type":"Point","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"mouse_point_valid","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"bool","stringUpperBound":null,"isPrimitiveType":true},"default_value":null}],"baseType":{"pkgName":"visualization_msgs","type":"InteractiveMarkerFeedback","stringUpperBound":null,"isPrimitiveType":false},"msgName":"InteractiveMarkerFeedback"};
  }
  hasMember(name) {
    let memberNames = ["header","client_id","marker_name","control_name","event_type","pose","menu_entry_id","mouse_point","mouse_point_valid"];
    return memberNames.indexOf(name) !== -1;
  }
}
// Define the wrapper of array class.
class InteractiveMarkerFeedbackArrayWrapper {
  constructor(size = 0) {
    this._resize(size);
  }
  toRawROS() {
    return this._refObject.ref();
  }
  fill(values) {
    const length = values.length;
    this._resize(length);
    values.forEach((value, index) => {
      if (value instanceof InteractiveMarkerFeedbackWrapper) {
        this._wrappers[index].copy(value);
      } else {
        this._wrappers[index] = new InteractiveMarkerFeedbackWrapper(value);
      }
    });
  }
  // Put all data currently stored in `this._wrappers` into `this._refObject`
  freeze(own) {
    this._wrappers.forEach((wrapper, index) => {
      wrapper.freeze(own);
      this._refArray[index] = wrapper.refObject;
    });
    this._refObject.size = this._wrappers.length;
    this._refObject.capacity = this._wrappers.length;
    if (this._refObject.capacity === 0) {
      this._refObject.data = null
    } else {
    this._refObject.data = this._refArray.buffer;
    }
  }
  get refObject() {
    return this._refObject;
  }
  get data() {
    return this._wrappers;
  }
  get size() {
    return this._wrappers.length;
  }
  set size(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to InteractiveMarkerFeedbackArrayWrapper.size setter');
      return;
    }
    return this._resize(value);
  }
  get capacity() {
    return this._wrappers.length;
  }
  set capacity(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to InteractiveMarkerFeedbackArrayWrapper.capacity setter');
    }
    return this._resize(value);
  }
  get refObject() {
    return this._refObject;
  }
  _resize(size) {
    if (size < 0) {
      throw new RangeError('Invalid argument: should provide a positive number');
      return;
    }
    this._refArray = new InteractiveMarkerFeedbackRefArray(size);
    this._refObject = new InteractiveMarkerFeedbackRefStructArray();
    this._refObject.size = size;
    this._refObject.capacity = size;
    this._wrappers = new Array();
    for (let i = 0; i < size; i++) {
      this._wrappers.push(new InteractiveMarkerFeedbackWrapper());
    }
  }
  // Copy all data from `this._refObject` into `this._wrappers`
  copyRefObject(refObject) {
    this._refObject = refObject;
    let refObjectArray = this._refObject.data;
    refObjectArray.length = this._refObject.size;
    this._resize(this._refObject.size);
    for (let index = 0; index < this._refObject.size; index++) {
      this._wrappers[index].copyRefObject(refObjectArray[index]);
    }
  }
  copy(other) {
    if (! (other instanceof InteractiveMarkerFeedbackArrayWrapper)) {
      throw new TypeError('Invalid argument: should provide "InteractiveMarkerFeedbackArrayWrapper".');
    }
    this._resize(other.size);
    // Array deep copy
    other._wrappers.forEach((wrapper, index) => {
      this._wrappers[index].copy(wrapper);
    });
  }
  static freeArray(refObject) {
    let refObjectArray = refObject.data;
    refObjectArray.length = refObject.size;
    for (let index = 0; index < refObject.size; index++) {
      InteractiveMarkerFeedbackWrapper.freeStruct(refObjectArray[index]);
    }
  }
  static get elementType() {
    return InteractiveMarkerFeedbackWrapper;
  }
  static get isROSArray() {
    return true;
  }
  static get useTypedArray() {
    return false;
  }
  get classType() {
    return InteractiveMarkerFeedbackArrayWrapper;
  }
}
// Define constants (6 in total)
Object.defineProperty(InteractiveMarkerFeedbackWrapper, "KEEP_ALIVE", {value: 0, writable: false, enumerable: true, configurable: true});
Object.defineProperty(InteractiveMarkerFeedbackWrapper, "POSE_UPDATE", {value: 1, writable: false, enumerable: true, configurable: true});
Object.defineProperty(InteractiveMarkerFeedbackWrapper, "MENU_SELECT", {value: 2, writable: false, enumerable: true, configurable: true});
Object.defineProperty(InteractiveMarkerFeedbackWrapper, "BUTTON_CLICK", {value: 3, writable: false, enumerable: true, configurable: true});
Object.defineProperty(InteractiveMarkerFeedbackWrapper, "MOUSE_DOWN", {value: 4, writable: false, enumerable: true, configurable: true});
Object.defineProperty(InteractiveMarkerFeedbackWrapper, "MOUSE_UP", {value: 5, writable: false, enumerable: true, configurable: true});
module.exports = InteractiveMarkerFeedbackWrapper;
/*
 * The following is the original spec object coming from parser:
{
  "constants": [
    {
      "type": "uint8",
      "name": "KEEP_ALIVE",
      "value": 0
    },
    {
      "type": "uint8",
      "name": "POSE_UPDATE",
      "value": 1
    },
    {
      "type": "uint8",
      "name": "MENU_SELECT",
      "value": 2
    },
    {
      "type": "uint8",
      "name": "BUTTON_CLICK",
      "value": 3
    },
    {
      "type": "uint8",
      "name": "MOUSE_DOWN",
      "value": 4
    },
    {
      "type": "uint8",
      "name": "MOUSE_UP",
      "value": 5
    }
  ],
  "fields": [
    {
      "name": "header",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": "std_msgs",
        "type": "Header",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "client_id",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "string",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "marker_name",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "string",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "control_name",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "string",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "event_type",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint8",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "pose",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": "geometry_msgs",
        "type": "Pose",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "menu_entry_id",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "mouse_point",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": "geometry_msgs",
        "type": "Point",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "mouse_point_valid",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "bool",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    }
  ],
  "baseType": {
    "pkgName": "visualization_msgs",
    "type": "InteractiveMarkerFeedback",
    "stringUpperBound": null,
    "isPrimitiveType": false
  },
  "msgName": "InteractiveMarkerFeedback"
}
*/
