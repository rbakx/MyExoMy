/**
 * Predefined relative difference/error scalers.
 */
export declare class IsCloseScalers {
    /**
     * Relative difference scaling: Max(|a|,|b|)
     * @param {number} a
     * @param {number} b
     * @returns {number}
     */
    static maxAbsAOrB(a: number, b: number): number;
    /**
     * Relative difference scaling: Max(a,b)
     * @param {number} a
     * @param {number} b
     * @returns {number}
     */
    static maxAOrB(a: number, b: number): number;
    /**
     * Relative difference scaling: Min(|a|,|b|)
     * @param {number} a
     * @param {number} b
     * @returns {number}
     */
    static minAbsAOrB(a: number, b: number): number;
    /**
     * Relative difference scaling: Min(a,b)
     * @param {number} a
     * @param {number} b
     * @returns {number}
     */
    static minAOrB(a: number, b: number): number;
    /**
     * Relative difference scaling: Mean: (|a|+|b|)/2, using Welford's method
     * @param {number} a
     * @param {number} b
     * @returns {number}
     */
    static meanAbs(a: number, b: number): number;
    /**
     * Relative difference scaling: Mean: (a+b)/2, using Welford's method
     * @param {number} a
     * @param {number} b
     * @returns {number}
     */
    static mean(a: number, b: number): number;
    /**
     * Relative error scaling: abs(a)
     * @param {number} a Treated as theoretical expected value for calculating relative error
     * @returns {number}
     */
    static absA(a: number): number;
    /**
     * Relative error scaling: abs(b)
     * @param {number} a ignored
     * @param {number} b Treated as theoretical expected value for calculating relative error
     * @returns {number}
     */
    static absB(a: number, b: number): number;
}
