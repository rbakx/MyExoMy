"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
require("mocha");
var index_1 = require("./index");
describe('maxAbsAOrB function test', function () {
    it('should return largest magnitude of a and b', function () {
        var result = index_1.IsCloseScalers.maxAbsAOrB(-2.0, 1);
        chai_1.expect(result).to.equal(2.0);
    });
});
describe('maxAOrB function test', function () {
    it('should return largest value of a and b', function () {
        var result = index_1.IsCloseScalers.maxAOrB(-2.0, 1);
        chai_1.expect(result).to.equal(1.0);
    });
});
describe('minAbsAOrB function test', function () {
    it('should return smallest magnitude of a and b', function () {
        var result = index_1.IsCloseScalers.minAbsAOrB(-1.0, -2);
        chai_1.expect(result).to.equal(1);
    });
});
describe('minAOrB function test', function () {
    it('should return smallest value of a and b', function () {
        var result = index_1.IsCloseScalers.minAOrB(-1.0, -2);
        chai_1.expect(result).to.equal(-2);
    });
});
describe('meanAbs function test', function () {
    it('should return mean of magnitudes of a and b', function () {
        var result = index_1.IsCloseScalers.meanAbs(-1.0, -2);
        chai_1.expect(result).to.equal(1.5);
    });
});
describe('mean function test', function () {
    it('should return mean of a and b', function () {
        var result = index_1.IsCloseScalers.mean(-1.0, -2);
        chai_1.expect(result).to.equal(-1.5);
    });
});
describe('absA function test', function () {
    it('should return absolute value of a', function () {
        var result = index_1.IsCloseScalers.absA(-1.0);
        chai_1.expect(result).to.equal(1.0);
    });
});
describe('absB function test', function () {
    it('should return absolute value of b', function () {
        var result = index_1.IsCloseScalers.absB(-1.0, -2);
        chai_1.expect(result).to.equal(2);
    });
});
