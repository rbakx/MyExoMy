// This file is automatically generated by Intel rclnodejs
//
// *** DO NOT EDIT directly
//
'use strict';
const ref = require('ref-napi');
const StructType = require('ref-struct-di')(ref);
const ArrayType = require('ref-array-di')(ref);
const primitiveTypes = require('../../rosidl_gen/primitive_types.js');
const deallocator = require('../../rosidl_gen/deallocator.js');
const translator = require('../../rosidl_gen/message_translator.js');
const HeaderWrapper = require('../../generated/std_msgs/std_msgs__msg__Header.js');
const QuaternionWrapper = require('../../generated/geometry_msgs/geometry_msgs__msg__Quaternion.js');
const Float64Wrapper = require('../../generated/std_msgs/std_msgs__msg__Float64.js');
const Vector3Wrapper = require('../../generated/geometry_msgs/geometry_msgs__msg__Vector3.js');
const ImuRefStruct = StructType({
  header: HeaderWrapper.refObjectType,
  orientation: QuaternionWrapper.refObjectType,
  orientation_covariance: ArrayType(primitiveTypes.float64, 9),
  angular_velocity: Vector3Wrapper.refObjectType,
  angular_velocity_covariance: ArrayType(primitiveTypes.float64, 9),
  linear_acceleration: Vector3Wrapper.refObjectType,
  linear_acceleration_covariance: ArrayType(primitiveTypes.float64, 9),
});
const ImuRefArray = ArrayType(ImuRefStruct);
const ImuRefStructArray = StructType({
  data: ImuRefArray,
  size: ref.types.size_t,
  capacity: ref.types.size_t
});
// Define the wrapper class.
class ImuWrapper {
  constructor(other) {
    this._wrapperFields = {};
    if (typeof other === 'object' && other._refObject) {
      this._refObject = new ImuRefStruct(other._refObject.toObject());
      this._wrapperFields.header =  new HeaderWrapper(other._wrapperFields.header);
      this._wrapperFields.orientation =  new QuaternionWrapper(other._wrapperFields.orientation);
      this._wrapperFields.orientation_covariance = Float64Wrapper.createArray();
      this._wrapperFields.orientation_covariance.copy(other._wrapperFields.orientation_covariance);
      this._wrapperFields.angular_velocity =  new Vector3Wrapper(other._wrapperFields.angular_velocity);
      this._wrapperFields.angular_velocity_covariance = Float64Wrapper.createArray();
      this._wrapperFields.angular_velocity_covariance.copy(other._wrapperFields.angular_velocity_covariance);
      this._wrapperFields.linear_acceleration =  new Vector3Wrapper(other._wrapperFields.linear_acceleration);
      this._wrapperFields.linear_acceleration_covariance = Float64Wrapper.createArray();
      this._wrapperFields.linear_acceleration_covariance.copy(other._wrapperFields.linear_acceleration_covariance);
    } else if (typeof other !== 'undefined') {
      this._initMembers();
      translator.constructFromPlanObject(this, other);
    } else {
      this._initMembers();
    }
    this.freeze();
  }
  _initMembers() {
    this._refObject = new ImuRefStruct();
    this._wrapperFields.header = new HeaderWrapper();
    this._wrapperFields.orientation = new QuaternionWrapper();
    this._wrapperFields.orientation_covariance = Float64Wrapper.createArray();
    this._wrapperFields.angular_velocity = new Vector3Wrapper();
    this._wrapperFields.angular_velocity_covariance = Float64Wrapper.createArray();
    this._wrapperFields.linear_acceleration = new Vector3Wrapper();
    this._wrapperFields.linear_acceleration_covariance = Float64Wrapper.createArray();
  }
  static createFromRefObject(refObject) {
    let self = new ImuWrapper();
    self.copyRefObject(refObject);
    return self;
  }
  static createArray() {
    return new ImuArrayWrapper;
  }
  static get ArrayType() {
    return ImuArrayWrapper;
  }
  static get refObjectArrayType() {
    return ImuRefStructArray
  }
  static get refObjectType() {
    return ImuRefStruct;
  }
  toRawROS() {
    this.freeze(true);
    return this._refObject.ref();
  }
  freeze(own = false, checkConsistency = false) {
    if (checkConsistency) {
    }
    this._wrapperFields.header.freeze(own, checkConsistency);
    this._refObject.header = this._wrapperFields.header.refObject;
    this._wrapperFields.orientation.freeze(own, checkConsistency);
    this._refObject.orientation = this._wrapperFields.orientation.refObject;
    for (let i = 0; i < this._wrapperFields.orientation_covariance.data.length; i++) {
      this._refObject.orientation_covariance[i] = this._wrapperFields.orientation_covariance.data[i];
    }
    this._wrapperFields.angular_velocity.freeze(own, checkConsistency);
    this._refObject.angular_velocity = this._wrapperFields.angular_velocity.refObject;
    for (let i = 0; i < this._wrapperFields.angular_velocity_covariance.data.length; i++) {
      this._refObject.angular_velocity_covariance[i] = this._wrapperFields.angular_velocity_covariance.data[i];
    }
    this._wrapperFields.linear_acceleration.freeze(own, checkConsistency);
    this._refObject.linear_acceleration = this._wrapperFields.linear_acceleration.refObject;
    for (let i = 0; i < this._wrapperFields.linear_acceleration_covariance.data.length; i++) {
      this._refObject.linear_acceleration_covariance[i] = this._wrapperFields.linear_acceleration_covariance.data[i];
    }
  }
  serialize() {
    this.freeze(false, true);
    return this._refObject.ref();
  }
  deserialize(refObject) {
    this._wrapperFields.header.copyRefObject(refObject.header);
    this._wrapperFields.orientation.copyRefObject(refObject.orientation);
    this._refObject.orientation_covariance = refObject.orientation_covariance;
    this._wrapperFields.orientation_covariance.fill(refObject.orientation_covariance.toArray());
    this._wrapperFields.angular_velocity.copyRefObject(refObject.angular_velocity);
    this._refObject.angular_velocity_covariance = refObject.angular_velocity_covariance;
    this._wrapperFields.angular_velocity_covariance.fill(refObject.angular_velocity_covariance.toArray());
    this._wrapperFields.linear_acceleration.copyRefObject(refObject.linear_acceleration);
    this._refObject.linear_acceleration_covariance = refObject.linear_acceleration_covariance;
    this._wrapperFields.linear_acceleration_covariance.fill(refObject.linear_acceleration_covariance.toArray());
  }
  toPlainObject(enableTypedArray) {
    return translator.toPlainObject(this, enableTypedArray);
  }
  static freeStruct(refObject) {
    HeaderWrapper.freeStruct(refObject.header);
    QuaternionWrapper.freeStruct(refObject.orientation);
    Vector3Wrapper.freeStruct(refObject.angular_velocity);
    Vector3Wrapper.freeStruct(refObject.linear_acceleration);
  }
  static destoryRawROS(msg) {
    ImuWrapper.freeStruct(msg.refObject);
  }
  static type() {
    return {pkgName: 'sensor_msgs', subFolder: 'msg', interfaceName: 'Imu'};
  }
  static isPrimitive() {
    return false;
  }
  static get isROSArray() {
    return false;
  }
  get refObject() {
    return this._refObject;
  }
  get header() {
    return this._wrapperFields.header;
  }
  set header(value) {
    if (value instanceof HeaderWrapper) {
      this._wrapperFields.header.copy(value);
    } else {
      this._wrapperFields.header.copy(new HeaderWrapper(value));
    }
  }
  get orientation() {
    return this._wrapperFields.orientation;
  }
  set orientation(value) {
    if (value instanceof QuaternionWrapper) {
      this._wrapperFields.orientation.copy(value);
    } else {
      this._wrapperFields.orientation.copy(new QuaternionWrapper(value));
    }
  }
  get orientation_covariance() {
    return this._wrapperFields['orientation_covariance'].data;
  }
  set orientation_covariance(value) {
    if (value.length !== 9) {
      throw new RangeError('The length of the array must be 9.');
    }
    this._wrapperFields['orientation_covariance'].fill(value);
  }
  get angular_velocity() {
    return this._wrapperFields.angular_velocity;
  }
  set angular_velocity(value) {
    if (value instanceof Vector3Wrapper) {
      this._wrapperFields.angular_velocity.copy(value);
    } else {
      this._wrapperFields.angular_velocity.copy(new Vector3Wrapper(value));
    }
  }
  get angular_velocity_covariance() {
    return this._wrapperFields['angular_velocity_covariance'].data;
  }
  set angular_velocity_covariance(value) {
    if (value.length !== 9) {
      throw new RangeError('The length of the array must be 9.');
    }
    this._wrapperFields['angular_velocity_covariance'].fill(value);
  }
  get linear_acceleration() {
    return this._wrapperFields.linear_acceleration;
  }
  set linear_acceleration(value) {
    if (value instanceof Vector3Wrapper) {
      this._wrapperFields.linear_acceleration.copy(value);
    } else {
      this._wrapperFields.linear_acceleration.copy(new Vector3Wrapper(value));
    }
  }
  get linear_acceleration_covariance() {
    return this._wrapperFields['linear_acceleration_covariance'].data;
  }
  set linear_acceleration_covariance(value) {
    if (value.length !== 9) {
      throw new RangeError('The length of the array must be 9.');
    }
    this._wrapperFields['linear_acceleration_covariance'].fill(value);
  }
  copyRefObject(refObject) {
    this._refObject = new ImuRefStruct(refObject.toObject());
    this._wrapperFields.header.copyRefObject(this._refObject.header);
    this._wrapperFields.orientation.copyRefObject(this._refObject.orientation);
    this._wrapperFields.orientation_covariance.fill(refObject.orientation_covariance.toArray());
    this._wrapperFields.angular_velocity.copyRefObject(this._refObject.angular_velocity);
    this._wrapperFields.angular_velocity_covariance.fill(refObject.angular_velocity_covariance.toArray());
    this._wrapperFields.linear_acceleration.copyRefObject(this._refObject.linear_acceleration);
    this._wrapperFields.linear_acceleration_covariance.fill(refObject.linear_acceleration_covariance.toArray());
  }
  copy(other) {
    this._refObject = new ImuRefStruct(other._refObject.toObject());
    this._wrapperFields.header.copy(other._wrapperFields.header);
    this._wrapperFields.orientation.copy(other._wrapperFields.orientation);
    this._wrapperFields.orientation_covariance.copy(other._wrapperFields.orientation_covariance);
    this._wrapperFields.angular_velocity.copy(other._wrapperFields.angular_velocity);
    this._wrapperFields.angular_velocity_covariance.copy(other._wrapperFields.angular_velocity_covariance);
    this._wrapperFields.linear_acceleration.copy(other._wrapperFields.linear_acceleration);
    this._wrapperFields.linear_acceleration_covariance.copy(other._wrapperFields.linear_acceleration_covariance);
  }
  static get classType() {
    return ImuWrapper;
  }
  static get ROSMessageDef() {
    return {"constants":[],"fields":[{"name":"header","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":"std_msgs","type":"Header","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"orientation","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":"geometry_msgs","type":"Quaternion","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"orientation_covariance","type":{"isArray":true,"arraySize":9,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":true,"pkgName":null,"type":"float64","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"angular_velocity","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":"geometry_msgs","type":"Vector3","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"angular_velocity_covariance","type":{"isArray":true,"arraySize":9,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":true,"pkgName":null,"type":"float64","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"linear_acceleration","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":"geometry_msgs","type":"Vector3","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"linear_acceleration_covariance","type":{"isArray":true,"arraySize":9,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":true,"pkgName":null,"type":"float64","stringUpperBound":null,"isPrimitiveType":true},"default_value":null}],"baseType":{"pkgName":"sensor_msgs","type":"Imu","stringUpperBound":null,"isPrimitiveType":false},"msgName":"Imu"};
  }
  hasMember(name) {
    let memberNames = ["header","orientation","orientation_covariance","angular_velocity","angular_velocity_covariance","linear_acceleration","linear_acceleration_covariance"];
    return memberNames.indexOf(name) !== -1;
  }
}
// Define the wrapper of array class.
class ImuArrayWrapper {
  constructor(size = 0) {
    this._resize(size);
  }
  toRawROS() {
    return this._refObject.ref();
  }
  fill(values) {
    const length = values.length;
    this._resize(length);
    values.forEach((value, index) => {
      if (value instanceof ImuWrapper) {
        this._wrappers[index].copy(value);
      } else {
        this._wrappers[index] = new ImuWrapper(value);
      }
    });
  }
  // Put all data currently stored in `this._wrappers` into `this._refObject`
  freeze(own) {
    this._wrappers.forEach((wrapper, index) => {
      wrapper.freeze(own);
      this._refArray[index] = wrapper.refObject;
    });
    this._refObject.size = this._wrappers.length;
    this._refObject.capacity = this._wrappers.length;
    if (this._refObject.capacity === 0) {
      this._refObject.data = null
    } else {
    this._refObject.data = this._refArray.buffer;
    }
  }
  get refObject() {
    return this._refObject;
  }
  get data() {
    return this._wrappers;
  }
  get size() {
    return this._wrappers.length;
  }
  set size(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to ImuArrayWrapper.size setter');
      return;
    }
    return this._resize(value);
  }
  get capacity() {
    return this._wrappers.length;
  }
  set capacity(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to ImuArrayWrapper.capacity setter');
    }
    return this._resize(value);
  }
  get refObject() {
    return this._refObject;
  }
  _resize(size) {
    if (size < 0) {
      throw new RangeError('Invalid argument: should provide a positive number');
      return;
    }
    this._refArray = new ImuRefArray(size);
    this._refObject = new ImuRefStructArray();
    this._refObject.size = size;
    this._refObject.capacity = size;
    this._wrappers = new Array();
    for (let i = 0; i < size; i++) {
      this._wrappers.push(new ImuWrapper());
    }
  }
  // Copy all data from `this._refObject` into `this._wrappers`
  copyRefObject(refObject) {
    this._refObject = refObject;
    let refObjectArray = this._refObject.data;
    refObjectArray.length = this._refObject.size;
    this._resize(this._refObject.size);
    for (let index = 0; index < this._refObject.size; index++) {
      this._wrappers[index].copyRefObject(refObjectArray[index]);
    }
  }
  copy(other) {
    if (! (other instanceof ImuArrayWrapper)) {
      throw new TypeError('Invalid argument: should provide "ImuArrayWrapper".');
    }
    this._resize(other.size);
    // Array deep copy
    other._wrappers.forEach((wrapper, index) => {
      this._wrappers[index].copy(wrapper);
    });
  }
  static freeArray(refObject) {
    let refObjectArray = refObject.data;
    refObjectArray.length = refObject.size;
    for (let index = 0; index < refObject.size; index++) {
      ImuWrapper.freeStruct(refObjectArray[index]);
    }
  }
  static get elementType() {
    return ImuWrapper;
  }
  static get isROSArray() {
    return true;
  }
  static get useTypedArray() {
    return false;
  }
  get classType() {
    return ImuArrayWrapper;
  }
}
module.exports = ImuWrapper;
/*
 * The following is the original spec object coming from parser:
{
  "constants": [],
  "fields": [
    {
      "name": "header",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": "std_msgs",
        "type": "Header",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "orientation",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": "geometry_msgs",
        "type": "Quaternion",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "orientation_covariance",
      "type": {
        "isArray": true,
        "arraySize": 9,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": true,
        "pkgName": null,
        "type": "float64",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "angular_velocity",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": "geometry_msgs",
        "type": "Vector3",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "angular_velocity_covariance",
      "type": {
        "isArray": true,
        "arraySize": 9,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": true,
        "pkgName": null,
        "type": "float64",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "linear_acceleration",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": "geometry_msgs",
        "type": "Vector3",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "linear_acceleration_covariance",
      "type": {
        "isArray": true,
        "arraySize": 9,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": true,
        "pkgName": null,
        "type": "float64",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    }
  ],
  "baseType": {
    "pkgName": "sensor_msgs",
    "type": "Imu",
    "stringUpperBound": null,
    "isPrimitiveType": false
  },
  "msgName": "Imu"
}
*/
