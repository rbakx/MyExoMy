// This file is automatically generated by Intel rclnodejs
//
// *** DO NOT EDIT directly
//
'use strict';
const ref = require('ref-napi');
const StructType = require('ref-struct-di')(ref);
const ArrayType = require('ref-array-di')(ref);
const primitiveTypes = require('../../rosidl_gen/primitive_types.js');
const deallocator = require('../../rosidl_gen/deallocator.js');
const translator = require('../../rosidl_gen/message_translator.js');
const HeaderWrapper = require('../../generated/std_msgs/std_msgs__msg__Header.js');
const StringWrapper = require('../../generated/std_msgs/std_msgs__msg__String.js');
const Float64Wrapper = require('../../generated/std_msgs/std_msgs__msg__Float64.js');
const JointStateRefStruct = StructType({
  header: HeaderWrapper.refObjectType,
  name: StringWrapper.refObjectArrayType,
  position: Float64Wrapper.refObjectArrayType,
  velocity: Float64Wrapper.refObjectArrayType,
  effort: Float64Wrapper.refObjectArrayType,
});
const JointStateRefArray = ArrayType(JointStateRefStruct);
const JointStateRefStructArray = StructType({
  data: JointStateRefArray,
  size: ref.types.size_t,
  capacity: ref.types.size_t
});
// Define the wrapper class.
class JointStateWrapper {
  constructor(other) {
    this._wrapperFields = {};
    this._nameArray = [];
    if (typeof other === 'object' && other._refObject) {
      this._refObject = new JointStateRefStruct(other._refObject.toObject());
      this._wrapperFields.header =  new HeaderWrapper(other._wrapperFields.header);
      this._wrapperFields.name = StringWrapper.createArray();
      this._wrapperFields.name.copy(other._wrapperFields.name);
      this.name = other.name;
      this._wrapperFields.position = Float64Wrapper.createArray();
      this._wrapperFields.position.copy(other._wrapperFields.position);
      this._wrapperFields.velocity = Float64Wrapper.createArray();
      this._wrapperFields.velocity.copy(other._wrapperFields.velocity);
      this._wrapperFields.effort = Float64Wrapper.createArray();
      this._wrapperFields.effort.copy(other._wrapperFields.effort);
    } else if (typeof other !== 'undefined') {
      this._initMembers();
      translator.constructFromPlanObject(this, other);
    } else {
      this._initMembers();
    }
    this.freeze();
  }
  _initMembers() {
    this._refObject = new JointStateRefStruct();
    this._wrapperFields.header = new HeaderWrapper();
    this._wrapperFields.name = StringWrapper.createArray();
    this._wrapperFields.position = Float64Wrapper.createArray();
    this._wrapperFields.velocity = Float64Wrapper.createArray();
    this._wrapperFields.effort = Float64Wrapper.createArray();
  }
  static createFromRefObject(refObject) {
    let self = new JointStateWrapper();
    self.copyRefObject(refObject);
    return self;
  }
  static createArray() {
    return new JointStateArrayWrapper;
  }
  static get ArrayType() {
    return JointStateArrayWrapper;
  }
  static get refObjectArrayType() {
    return JointStateRefStructArray
  }
  static get refObjectType() {
    return JointStateRefStruct;
  }
  toRawROS() {
    this.freeze(true);
    return this._refObject.ref();
  }
  freeze(own = false, checkConsistency = false) {
    if (checkConsistency) {
    }
    this._wrapperFields.header.freeze(own, checkConsistency);
    this._refObject.header = this._wrapperFields.header.refObject;
    if (!own) {
      this._wrapperFields.name.fill(this._nameArray);
      this._wrapperFields.name.freeze(own, checkConsistency);
      this._refObject.name = this._wrapperFields.name.refObject;
    } else {
      this._wrapperFields.name.fill([]);
      this._wrapperFields.name.freeze(own, checkConsistency);
      this._refObject.name = this._wrapperFields.name.refObject;
    }
    this._wrapperFields.position.freeze(own, checkConsistency);
    this._refObject.position = this._wrapperFields.position.refObject;
    if (own) {
      this._wrapperFields.position.fill(Float64Array.from([]));
      this._wrapperFields.position.freeze(own, checkConsistency);
      this._refObject.position = this._wrapperFields.position.refObject;
    }
    this._wrapperFields.velocity.freeze(own, checkConsistency);
    this._refObject.velocity = this._wrapperFields.velocity.refObject;
    if (own) {
      this._wrapperFields.velocity.fill(Float64Array.from([]));
      this._wrapperFields.velocity.freeze(own, checkConsistency);
      this._refObject.velocity = this._wrapperFields.velocity.refObject;
    }
    this._wrapperFields.effort.freeze(own, checkConsistency);
    this._refObject.effort = this._wrapperFields.effort.refObject;
    if (own) {
      this._wrapperFields.effort.fill(Float64Array.from([]));
      this._wrapperFields.effort.freeze(own, checkConsistency);
      this._refObject.effort = this._wrapperFields.effort.refObject;
    }
  }
  serialize() {
    this.freeze(false, true);
    return this._refObject.ref();
  }
  deserialize(refObject) {
    this._wrapperFields.header.copyRefObject(refObject.header);
    refObject.name.data.length = refObject.name.size;
    for (let index = 0; index < refObject.name.size; index++) {
      this._nameArray[index] = refObject.name.data[index].data;
    }
    this._wrapperFields.position.copyRefObject(refObject.position);
    this._wrapperFields.velocity.copyRefObject(refObject.velocity);
    this._wrapperFields.effort.copyRefObject(refObject.effort);
  }
  toPlainObject(enableTypedArray) {
    return translator.toPlainObject(this, enableTypedArray);
  }
  static freeStruct(refObject) {
    HeaderWrapper.freeStruct(refObject.header);
    if (refObject.name.size != 0) {
      StringWrapper.ArrayType.freeArray(refObject.name);
      if (StringWrapper.ArrayType.useTypedArray) {
        // Do nothing, the v8 will take the ownership of the ArrayBuffer used by the typed array.
      } else {
        deallocator.freeStructMember(refObject.name, StringWrapper.refObjectArrayType, 'data');
      }
    }
    if (refObject.position.size != 0) {
      Float64Wrapper.ArrayType.freeArray(refObject.position);
      if (Float64Wrapper.ArrayType.useTypedArray) {
        // Do nothing, the v8 will take the ownership of the ArrayBuffer used by the typed array.
      } else {
        deallocator.freeStructMember(refObject.position, Float64Wrapper.refObjectArrayType, 'data');
      }
    }
    if (refObject.velocity.size != 0) {
      Float64Wrapper.ArrayType.freeArray(refObject.velocity);
      if (Float64Wrapper.ArrayType.useTypedArray) {
        // Do nothing, the v8 will take the ownership of the ArrayBuffer used by the typed array.
      } else {
        deallocator.freeStructMember(refObject.velocity, Float64Wrapper.refObjectArrayType, 'data');
      }
    }
    if (refObject.effort.size != 0) {
      Float64Wrapper.ArrayType.freeArray(refObject.effort);
      if (Float64Wrapper.ArrayType.useTypedArray) {
        // Do nothing, the v8 will take the ownership of the ArrayBuffer used by the typed array.
      } else {
        deallocator.freeStructMember(refObject.effort, Float64Wrapper.refObjectArrayType, 'data');
      }
    }
  }
  static destoryRawROS(msg) {
    JointStateWrapper.freeStruct(msg.refObject);
  }
  static type() {
    return {pkgName: 'sensor_msgs', subFolder: 'msg', interfaceName: 'JointState'};
  }
  static isPrimitive() {
    return false;
  }
  static get isROSArray() {
    return false;
  }
  get refObject() {
    return this._refObject;
  }
  get header() {
    return this._wrapperFields.header;
  }
  set header(value) {
    if (value instanceof HeaderWrapper) {
      this._wrapperFields.header.copy(value);
    } else {
      this._wrapperFields.header.copy(new HeaderWrapper(value));
    }
  }
  get name() {
    return this._nameArray;
  }
  set name(value) {
    this._nameArray = value;
  }
  get position() {
    return this._wrapperFields['position'].data;
  }
  set position(value) {
    this._wrapperFields['position'].fill(value);
  }
  get velocity() {
    return this._wrapperFields['velocity'].data;
  }
  set velocity(value) {
    this._wrapperFields['velocity'].fill(value);
  }
  get effort() {
    return this._wrapperFields['effort'].data;
  }
  set effort(value) {
    this._wrapperFields['effort'].fill(value);
  }
  copyRefObject(refObject) {
    this._refObject = new JointStateRefStruct(refObject.toObject());
    this._wrapperFields.header.copyRefObject(this._refObject.header);
    refObject.name.data.length = refObject.name.size;
    for (let index = 0; index < refObject.name.size; index++) {
      this._nameArray[index] = refObject.name.data[index].data;
    }
    this._wrapperFields.position.copyRefObject(this._refObject.position);
    this._wrapperFields.velocity.copyRefObject(this._refObject.velocity);
    this._wrapperFields.effort.copyRefObject(this._refObject.effort);
  }
  copy(other) {
    this._refObject = new JointStateRefStruct(other._refObject.toObject());
    this._wrapperFields.header.copy(other._wrapperFields.header);
    this._nameArray = other._nameArray.slice();
    this._wrapperFields.position.copy(other._wrapperFields.position);
    this._wrapperFields.velocity.copy(other._wrapperFields.velocity);
    this._wrapperFields.effort.copy(other._wrapperFields.effort);
  }
  static get classType() {
    return JointStateWrapper;
  }
  static get ROSMessageDef() {
    return {"constants":[],"fields":[{"name":"header","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":"std_msgs","type":"Header","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"name","type":{"isArray":true,"arraySize":null,"isUpperBound":false,"isDynamicArray":true,"isFixedSizeArray":null,"pkgName":null,"type":"string","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"position","type":{"isArray":true,"arraySize":null,"isUpperBound":false,"isDynamicArray":true,"isFixedSizeArray":null,"pkgName":null,"type":"float64","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"velocity","type":{"isArray":true,"arraySize":null,"isUpperBound":false,"isDynamicArray":true,"isFixedSizeArray":null,"pkgName":null,"type":"float64","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"effort","type":{"isArray":true,"arraySize":null,"isUpperBound":false,"isDynamicArray":true,"isFixedSizeArray":null,"pkgName":null,"type":"float64","stringUpperBound":null,"isPrimitiveType":true},"default_value":null}],"baseType":{"pkgName":"sensor_msgs","type":"JointState","stringUpperBound":null,"isPrimitiveType":false},"msgName":"JointState"};
  }
  hasMember(name) {
    let memberNames = ["header","name","position","velocity","effort"];
    return memberNames.indexOf(name) !== -1;
  }
}
// Define the wrapper of array class.
class JointStateArrayWrapper {
  constructor(size = 0) {
    this._resize(size);
  }
  toRawROS() {
    return this._refObject.ref();
  }
  fill(values) {
    const length = values.length;
    this._resize(length);
    values.forEach((value, index) => {
      if (value instanceof JointStateWrapper) {
        this._wrappers[index].copy(value);
      } else {
        this._wrappers[index] = new JointStateWrapper(value);
      }
    });
  }
  // Put all data currently stored in `this._wrappers` into `this._refObject`
  freeze(own) {
    this._wrappers.forEach((wrapper, index) => {
      wrapper.freeze(own);
      this._refArray[index] = wrapper.refObject;
    });
    this._refObject.size = this._wrappers.length;
    this._refObject.capacity = this._wrappers.length;
    if (this._refObject.capacity === 0) {
      this._refObject.data = null
    } else {
    this._refObject.data = this._refArray.buffer;
    }
  }
  get refObject() {
    return this._refObject;
  }
  get data() {
    return this._wrappers;
  }
  get size() {
    return this._wrappers.length;
  }
  set size(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to JointStateArrayWrapper.size setter');
      return;
    }
    return this._resize(value);
  }
  get capacity() {
    return this._wrappers.length;
  }
  set capacity(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to JointStateArrayWrapper.capacity setter');
    }
    return this._resize(value);
  }
  get refObject() {
    return this._refObject;
  }
  _resize(size) {
    if (size < 0) {
      throw new RangeError('Invalid argument: should provide a positive number');
      return;
    }
    this._refArray = new JointStateRefArray(size);
    this._refObject = new JointStateRefStructArray();
    this._refObject.size = size;
    this._refObject.capacity = size;
    this._wrappers = new Array();
    for (let i = 0; i < size; i++) {
      this._wrappers.push(new JointStateWrapper());
    }
  }
  // Copy all data from `this._refObject` into `this._wrappers`
  copyRefObject(refObject) {
    this._refObject = refObject;
    let refObjectArray = this._refObject.data;
    refObjectArray.length = this._refObject.size;
    this._resize(this._refObject.size);
    for (let index = 0; index < this._refObject.size; index++) {
      this._wrappers[index].copyRefObject(refObjectArray[index]);
    }
  }
  copy(other) {
    if (! (other instanceof JointStateArrayWrapper)) {
      throw new TypeError('Invalid argument: should provide "JointStateArrayWrapper".');
    }
    this._resize(other.size);
    // Array deep copy
    other._wrappers.forEach((wrapper, index) => {
      this._wrappers[index].copy(wrapper);
    });
  }
  static freeArray(refObject) {
    let refObjectArray = refObject.data;
    refObjectArray.length = refObject.size;
    for (let index = 0; index < refObject.size; index++) {
      JointStateWrapper.freeStruct(refObjectArray[index]);
    }
  }
  static get elementType() {
    return JointStateWrapper;
  }
  static get isROSArray() {
    return true;
  }
  static get useTypedArray() {
    return false;
  }
  get classType() {
    return JointStateArrayWrapper;
  }
}
module.exports = JointStateWrapper;
/*
 * The following is the original spec object coming from parser:
{
  "constants": [],
  "fields": [
    {
      "name": "header",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": "std_msgs",
        "type": "Header",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "name",
      "type": {
        "isArray": true,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": true,
        "isFixedSizeArray": null,
        "pkgName": null,
        "type": "string",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "position",
      "type": {
        "isArray": true,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": true,
        "isFixedSizeArray": null,
        "pkgName": null,
        "type": "float64",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "velocity",
      "type": {
        "isArray": true,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": true,
        "isFixedSizeArray": null,
        "pkgName": null,
        "type": "float64",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "effort",
      "type": {
        "isArray": true,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": true,
        "isFixedSizeArray": null,
        "pkgName": null,
        "type": "float64",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    }
  ],
  "baseType": {
    "pkgName": "sensor_msgs",
    "type": "JointState",
    "stringUpperBound": null,
    "isPrimitiveType": false
  },
  "msgName": "JointState"
}
*/
