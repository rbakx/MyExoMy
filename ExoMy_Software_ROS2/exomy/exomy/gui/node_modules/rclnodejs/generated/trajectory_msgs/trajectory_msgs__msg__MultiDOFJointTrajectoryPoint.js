// This file is automatically generated by Intel rclnodejs
//
// *** DO NOT EDIT directly
//
'use strict';
const ref = require('ref-napi');
const StructType = require('ref-struct-di')(ref);
const ArrayType = require('ref-array-di')(ref);
const primitiveTypes = require('../../rosidl_gen/primitive_types.js');
const deallocator = require('../../rosidl_gen/deallocator.js');
const translator = require('../../rosidl_gen/message_translator.js');
const TransformWrapper = require('../../generated/geometry_msgs/geometry_msgs__msg__Transform.js');
const TwistWrapper = require('../../generated/geometry_msgs/geometry_msgs__msg__Twist.js');
const DurationWrapper = require('../../generated/builtin_interfaces/builtin_interfaces__msg__Duration.js');
const MultiDOFJointTrajectoryPointRefStruct = StructType({
  transforms: TransformWrapper.refObjectArrayType,
  velocities: TwistWrapper.refObjectArrayType,
  accelerations: TwistWrapper.refObjectArrayType,
  time_from_start: DurationWrapper.refObjectType,
});
const MultiDOFJointTrajectoryPointRefArray = ArrayType(MultiDOFJointTrajectoryPointRefStruct);
const MultiDOFJointTrajectoryPointRefStructArray = StructType({
  data: MultiDOFJointTrajectoryPointRefArray,
  size: ref.types.size_t,
  capacity: ref.types.size_t
});
// Define the wrapper class.
class MultiDOFJointTrajectoryPointWrapper {
  constructor(other) {
    this._wrapperFields = {};
    if (typeof other === 'object' && other._refObject) {
      this._refObject = new MultiDOFJointTrajectoryPointRefStruct(other._refObject.toObject());
      this._wrapperFields.transforms = TransformWrapper.createArray();
      this._wrapperFields.transforms.copy(other._wrapperFields.transforms);
      this._wrapperFields.velocities = TwistWrapper.createArray();
      this._wrapperFields.velocities.copy(other._wrapperFields.velocities);
      this._wrapperFields.accelerations = TwistWrapper.createArray();
      this._wrapperFields.accelerations.copy(other._wrapperFields.accelerations);
      this._wrapperFields.time_from_start =  new DurationWrapper(other._wrapperFields.time_from_start);
    } else if (typeof other !== 'undefined') {
      this._initMembers();
      translator.constructFromPlanObject(this, other);
    } else {
      this._initMembers();
    }
    this.freeze();
  }
  _initMembers() {
    this._refObject = new MultiDOFJointTrajectoryPointRefStruct();
    this._wrapperFields.transforms = TransformWrapper.createArray();
    this._wrapperFields.velocities = TwistWrapper.createArray();
    this._wrapperFields.accelerations = TwistWrapper.createArray();
    this._wrapperFields.time_from_start = new DurationWrapper();
  }
  static createFromRefObject(refObject) {
    let self = new MultiDOFJointTrajectoryPointWrapper();
    self.copyRefObject(refObject);
    return self;
  }
  static createArray() {
    return new MultiDOFJointTrajectoryPointArrayWrapper;
  }
  static get ArrayType() {
    return MultiDOFJointTrajectoryPointArrayWrapper;
  }
  static get refObjectArrayType() {
    return MultiDOFJointTrajectoryPointRefStructArray
  }
  static get refObjectType() {
    return MultiDOFJointTrajectoryPointRefStruct;
  }
  toRawROS() {
    this.freeze(true);
    return this._refObject.ref();
  }
  freeze(own = false, checkConsistency = false) {
    if (checkConsistency) {
    }
    this._wrapperFields.transforms.freeze(own, checkConsistency);
    this._refObject.transforms = this._wrapperFields.transforms.refObject;
    this._wrapperFields.velocities.freeze(own, checkConsistency);
    this._refObject.velocities = this._wrapperFields.velocities.refObject;
    this._wrapperFields.accelerations.freeze(own, checkConsistency);
    this._refObject.accelerations = this._wrapperFields.accelerations.refObject;
    this._wrapperFields.time_from_start.freeze(own, checkConsistency);
    this._refObject.time_from_start = this._wrapperFields.time_from_start.refObject;
  }
  serialize() {
    this.freeze(false, true);
    return this._refObject.ref();
  }
  deserialize(refObject) {
    this._wrapperFields.transforms.copyRefObject(refObject.transforms);
    this._wrapperFields.velocities.copyRefObject(refObject.velocities);
    this._wrapperFields.accelerations.copyRefObject(refObject.accelerations);
    this._wrapperFields.time_from_start.copyRefObject(refObject.time_from_start);
  }
  toPlainObject(enableTypedArray) {
    return translator.toPlainObject(this, enableTypedArray);
  }
  static freeStruct(refObject) {
    if (refObject.transforms.size != 0) {
      TransformWrapper.ArrayType.freeArray(refObject.transforms);
      if (TransformWrapper.ArrayType.useTypedArray) {
        // Do nothing, the v8 will take the ownership of the ArrayBuffer used by the typed array.
      } else {
        deallocator.freeStructMember(refObject.transforms, TransformWrapper.refObjectArrayType, 'data');
      }
    }
    if (refObject.velocities.size != 0) {
      TwistWrapper.ArrayType.freeArray(refObject.velocities);
      if (TwistWrapper.ArrayType.useTypedArray) {
        // Do nothing, the v8 will take the ownership of the ArrayBuffer used by the typed array.
      } else {
        deallocator.freeStructMember(refObject.velocities, TwistWrapper.refObjectArrayType, 'data');
      }
    }
    if (refObject.accelerations.size != 0) {
      TwistWrapper.ArrayType.freeArray(refObject.accelerations);
      if (TwistWrapper.ArrayType.useTypedArray) {
        // Do nothing, the v8 will take the ownership of the ArrayBuffer used by the typed array.
      } else {
        deallocator.freeStructMember(refObject.accelerations, TwistWrapper.refObjectArrayType, 'data');
      }
    }
    DurationWrapper.freeStruct(refObject.time_from_start);
  }
  static destoryRawROS(msg) {
    MultiDOFJointTrajectoryPointWrapper.freeStruct(msg.refObject);
  }
  static type() {
    return {pkgName: 'trajectory_msgs', subFolder: 'msg', interfaceName: 'MultiDOFJointTrajectoryPoint'};
  }
  static isPrimitive() {
    return false;
  }
  static get isROSArray() {
    return false;
  }
  get refObject() {
    return this._refObject;
  }
  get transforms() {
    return this._wrapperFields.transforms;
  }
  set transforms(value) {
    this._wrapperFields.transforms.fill(value);
  }
  get velocities() {
    return this._wrapperFields.velocities;
  }
  set velocities(value) {
    this._wrapperFields.velocities.fill(value);
  }
  get accelerations() {
    return this._wrapperFields.accelerations;
  }
  set accelerations(value) {
    this._wrapperFields.accelerations.fill(value);
  }
  get time_from_start() {
    return this._wrapperFields.time_from_start;
  }
  set time_from_start(value) {
    if (value instanceof DurationWrapper) {
      this._wrapperFields.time_from_start.copy(value);
    } else {
      this._wrapperFields.time_from_start.copy(new DurationWrapper(value));
    }
  }
  copyRefObject(refObject) {
    this._refObject = new MultiDOFJointTrajectoryPointRefStruct(refObject.toObject());
    this._wrapperFields.transforms.copyRefObject(this._refObject.transforms);
    this._wrapperFields.velocities.copyRefObject(this._refObject.velocities);
    this._wrapperFields.accelerations.copyRefObject(this._refObject.accelerations);
    this._wrapperFields.time_from_start.copyRefObject(this._refObject.time_from_start);
  }
  copy(other) {
    this._refObject = new MultiDOFJointTrajectoryPointRefStruct(other._refObject.toObject());
    this._wrapperFields.transforms.copy(other._wrapperFields.transforms);
    this._wrapperFields.velocities.copy(other._wrapperFields.velocities);
    this._wrapperFields.accelerations.copy(other._wrapperFields.accelerations);
    this._wrapperFields.time_from_start.copy(other._wrapperFields.time_from_start);
  }
  static get classType() {
    return MultiDOFJointTrajectoryPointWrapper;
  }
  static get ROSMessageDef() {
    return {"constants":[],"fields":[{"name":"transforms","type":{"isArray":true,"arraySize":null,"isUpperBound":false,"isDynamicArray":true,"isFixedSizeArray":null,"pkgName":"geometry_msgs","type":"Transform","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"velocities","type":{"isArray":true,"arraySize":null,"isUpperBound":false,"isDynamicArray":true,"isFixedSizeArray":null,"pkgName":"geometry_msgs","type":"Twist","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"accelerations","type":{"isArray":true,"arraySize":null,"isUpperBound":false,"isDynamicArray":true,"isFixedSizeArray":null,"pkgName":"geometry_msgs","type":"Twist","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"time_from_start","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":"builtin_interfaces","type":"Duration","stringUpperBound":null,"isPrimitiveType":false},"default_value":null}],"baseType":{"pkgName":"trajectory_msgs","type":"MultiDOFJointTrajectoryPoint","stringUpperBound":null,"isPrimitiveType":false},"msgName":"MultiDOFJointTrajectoryPoint"};
  }
  hasMember(name) {
    let memberNames = ["transforms","velocities","accelerations","time_from_start"];
    return memberNames.indexOf(name) !== -1;
  }
}
// Define the wrapper of array class.
class MultiDOFJointTrajectoryPointArrayWrapper {
  constructor(size = 0) {
    this._resize(size);
  }
  toRawROS() {
    return this._refObject.ref();
  }
  fill(values) {
    const length = values.length;
    this._resize(length);
    values.forEach((value, index) => {
      if (value instanceof MultiDOFJointTrajectoryPointWrapper) {
        this._wrappers[index].copy(value);
      } else {
        this._wrappers[index] = new MultiDOFJointTrajectoryPointWrapper(value);
      }
    });
  }
  // Put all data currently stored in `this._wrappers` into `this._refObject`
  freeze(own) {
    this._wrappers.forEach((wrapper, index) => {
      wrapper.freeze(own);
      this._refArray[index] = wrapper.refObject;
    });
    this._refObject.size = this._wrappers.length;
    this._refObject.capacity = this._wrappers.length;
    if (this._refObject.capacity === 0) {
      this._refObject.data = null
    } else {
    this._refObject.data = this._refArray.buffer;
    }
  }
  get refObject() {
    return this._refObject;
  }
  get data() {
    return this._wrappers;
  }
  get size() {
    return this._wrappers.length;
  }
  set size(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to MultiDOFJointTrajectoryPointArrayWrapper.size setter');
      return;
    }
    return this._resize(value);
  }
  get capacity() {
    return this._wrappers.length;
  }
  set capacity(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to MultiDOFJointTrajectoryPointArrayWrapper.capacity setter');
    }
    return this._resize(value);
  }
  get refObject() {
    return this._refObject;
  }
  _resize(size) {
    if (size < 0) {
      throw new RangeError('Invalid argument: should provide a positive number');
      return;
    }
    this._refArray = new MultiDOFJointTrajectoryPointRefArray(size);
    this._refObject = new MultiDOFJointTrajectoryPointRefStructArray();
    this._refObject.size = size;
    this._refObject.capacity = size;
    this._wrappers = new Array();
    for (let i = 0; i < size; i++) {
      this._wrappers.push(new MultiDOFJointTrajectoryPointWrapper());
    }
  }
  // Copy all data from `this._refObject` into `this._wrappers`
  copyRefObject(refObject) {
    this._refObject = refObject;
    let refObjectArray = this._refObject.data;
    refObjectArray.length = this._refObject.size;
    this._resize(this._refObject.size);
    for (let index = 0; index < this._refObject.size; index++) {
      this._wrappers[index].copyRefObject(refObjectArray[index]);
    }
  }
  copy(other) {
    if (! (other instanceof MultiDOFJointTrajectoryPointArrayWrapper)) {
      throw new TypeError('Invalid argument: should provide "MultiDOFJointTrajectoryPointArrayWrapper".');
    }
    this._resize(other.size);
    // Array deep copy
    other._wrappers.forEach((wrapper, index) => {
      this._wrappers[index].copy(wrapper);
    });
  }
  static freeArray(refObject) {
    let refObjectArray = refObject.data;
    refObjectArray.length = refObject.size;
    for (let index = 0; index < refObject.size; index++) {
      MultiDOFJointTrajectoryPointWrapper.freeStruct(refObjectArray[index]);
    }
  }
  static get elementType() {
    return MultiDOFJointTrajectoryPointWrapper;
  }
  static get isROSArray() {
    return true;
  }
  static get useTypedArray() {
    return false;
  }
  get classType() {
    return MultiDOFJointTrajectoryPointArrayWrapper;
  }
}
module.exports = MultiDOFJointTrajectoryPointWrapper;
/*
 * The following is the original spec object coming from parser:
{
  "constants": [],
  "fields": [
    {
      "name": "transforms",
      "type": {
        "isArray": true,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": true,
        "isFixedSizeArray": null,
        "pkgName": "geometry_msgs",
        "type": "Transform",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "velocities",
      "type": {
        "isArray": true,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": true,
        "isFixedSizeArray": null,
        "pkgName": "geometry_msgs",
        "type": "Twist",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "accelerations",
      "type": {
        "isArray": true,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": true,
        "isFixedSizeArray": null,
        "pkgName": "geometry_msgs",
        "type": "Twist",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "time_from_start",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": "builtin_interfaces",
        "type": "Duration",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    }
  ],
  "baseType": {
    "pkgName": "trajectory_msgs",
    "type": "MultiDOFJointTrajectoryPoint",
    "stringUpperBound": null,
    "isPrimitiveType": false
  },
  "msgName": "MultiDOFJointTrajectoryPoint"
}
*/
