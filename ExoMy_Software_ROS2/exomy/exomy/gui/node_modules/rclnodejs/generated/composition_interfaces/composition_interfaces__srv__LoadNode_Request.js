// This file is automatically generated by Intel rclnodejs
//
// *** DO NOT EDIT directly
//
'use strict';
const ref = require('ref-napi');
const StructType = require('ref-struct-di')(ref);
const ArrayType = require('ref-array-di')(ref);
const primitiveTypes = require('../../rosidl_gen/primitive_types.js');
const deallocator = require('../../rosidl_gen/deallocator.js');
const translator = require('../../rosidl_gen/message_translator.js');
const StringWrapper = require('../../generated/std_msgs/std_msgs__msg__String.js');
const ParameterWrapper = require('../../generated/rcl_interfaces/rcl_interfaces__msg__Parameter.js');
const LoadNode_RequestRefStruct = StructType({
  package_name: primitiveTypes.string,
  plugin_name: primitiveTypes.string,
  node_name: primitiveTypes.string,
  node_namespace: primitiveTypes.string,
  log_level: primitiveTypes.uint8,
  remap_rules: StringWrapper.refObjectArrayType,
  parameters: ParameterWrapper.refObjectArrayType,
  extra_arguments: ParameterWrapper.refObjectArrayType,
});
const LoadNode_RequestRefArray = ArrayType(LoadNode_RequestRefStruct);
const LoadNode_RequestRefStructArray = StructType({
  data: LoadNode_RequestRefArray,
  size: ref.types.size_t,
  capacity: ref.types.size_t
});
// Define the wrapper class.
class LoadNode_RequestWrapper {
  constructor(other) {
    this._wrapperFields = {};
    this._remap_rulesArray = [];
    if (typeof other === 'object' && other._refObject) {
      this._refObject = new LoadNode_RequestRefStruct(other._refObject.toObject());
      this._package_nameIntialized = true;
      this._wrapperFields.package_name =  new StringWrapper(other._wrapperFields.package_name);
      this._plugin_nameIntialized = true;
      this._wrapperFields.plugin_name =  new StringWrapper(other._wrapperFields.plugin_name);
      this._node_nameIntialized = true;
      this._wrapperFields.node_name =  new StringWrapper(other._wrapperFields.node_name);
      this._node_namespaceIntialized = true;
      this._wrapperFields.node_namespace =  new StringWrapper(other._wrapperFields.node_namespace);
      this._log_levelIntialized = true;
      this._wrapperFields.remap_rules = StringWrapper.createArray();
      this._wrapperFields.remap_rules.copy(other._wrapperFields.remap_rules);
      this.remap_rules = other.remap_rules;
      this._wrapperFields.parameters = ParameterWrapper.createArray();
      this._wrapperFields.parameters.copy(other._wrapperFields.parameters);
      this._wrapperFields.extra_arguments = ParameterWrapper.createArray();
      this._wrapperFields.extra_arguments.copy(other._wrapperFields.extra_arguments);
    } else if (typeof other !== 'undefined') {
      this._initMembers();
      translator.constructFromPlanObject(this, other);
    } else {
      this._initMembers();
    }
    this.freeze();
  }
  _initMembers() {
    this._refObject = new LoadNode_RequestRefStruct();
    this._package_nameIntialized = false;
    this._wrapperFields.package_name = new StringWrapper();
    this._plugin_nameIntialized = false;
    this._wrapperFields.plugin_name = new StringWrapper();
    this._node_nameIntialized = false;
    this._wrapperFields.node_name = new StringWrapper();
    this._node_namespaceIntialized = false;
    this._wrapperFields.node_namespace = new StringWrapper();
    this._log_levelIntialized = false;
    this._wrapperFields.remap_rules = StringWrapper.createArray();
    this._wrapperFields.parameters = ParameterWrapper.createArray();
    this._wrapperFields.extra_arguments = ParameterWrapper.createArray();
  }
  static createFromRefObject(refObject) {
    let self = new LoadNode_RequestWrapper();
    self.copyRefObject(refObject);
    return self;
  }
  static createArray() {
    return new LoadNode_RequestArrayWrapper;
  }
  static get ArrayType() {
    return LoadNode_RequestArrayWrapper;
  }
  static get refObjectArrayType() {
    return LoadNode_RequestRefStructArray
  }
  static get refObjectType() {
    return LoadNode_RequestRefStruct;
  }
  toRawROS() {
    this.freeze(true);
    return this._refObject.ref();
  }
  freeze(own = false, checkConsistency = false) {
    if (checkConsistency) {
      if (!this._package_nameIntialized) {
        throw new TypeError('Invalid argument: package_name in LoadNode_Request');
      }
      if (!this._plugin_nameIntialized) {
        throw new TypeError('Invalid argument: plugin_name in LoadNode_Request');
      }
      if (!this._node_nameIntialized) {
        throw new TypeError('Invalid argument: node_name in LoadNode_Request');
      }
      if (!this._node_namespaceIntialized) {
        throw new TypeError('Invalid argument: node_namespace in LoadNode_Request');
      }
      if (!this._log_levelIntialized) {
        throw new TypeError('Invalid argument: log_level in LoadNode_Request');
      }
    }
    if (own) {
      this._wrapperFields.package_name.freeze(own, checkConsistency);
    }
    this._refObject.package_name = this._wrapperFields.package_name.refObject;
    if (own) {
      this._wrapperFields.plugin_name.freeze(own, checkConsistency);
    }
    this._refObject.plugin_name = this._wrapperFields.plugin_name.refObject;
    if (own) {
      this._wrapperFields.node_name.freeze(own, checkConsistency);
    }
    this._refObject.node_name = this._wrapperFields.node_name.refObject;
    if (own) {
      this._wrapperFields.node_namespace.freeze(own, checkConsistency);
    }
    this._refObject.node_namespace = this._wrapperFields.node_namespace.refObject;
    if (!own) {
      this._wrapperFields.remap_rules.fill(this._remap_rulesArray);
      this._wrapperFields.remap_rules.freeze(own, checkConsistency);
      this._refObject.remap_rules = this._wrapperFields.remap_rules.refObject;
    } else {
      this._wrapperFields.remap_rules.fill([]);
      this._wrapperFields.remap_rules.freeze(own, checkConsistency);
      this._refObject.remap_rules = this._wrapperFields.remap_rules.refObject;
    }
    this._wrapperFields.parameters.freeze(own, checkConsistency);
    this._refObject.parameters = this._wrapperFields.parameters.refObject;
    this._wrapperFields.extra_arguments.freeze(own, checkConsistency);
    this._refObject.extra_arguments = this._wrapperFields.extra_arguments.refObject;
  }
  serialize() {
    this.freeze(false, true);
    return this._refObject.ref();
  }
  deserialize(refObject) {
    this._package_nameIntialized = true;
    this._wrapperFields.package_name.data = refObject.package_name.data;
    this._plugin_nameIntialized = true;
    this._wrapperFields.plugin_name.data = refObject.plugin_name.data;
    this._node_nameIntialized = true;
    this._wrapperFields.node_name.data = refObject.node_name.data;
    this._node_namespaceIntialized = true;
    this._wrapperFields.node_namespace.data = refObject.node_namespace.data;
    this._log_levelIntialized = true;
    this._refObject.log_level = refObject.log_level;
    refObject.remap_rules.data.length = refObject.remap_rules.size;
    for (let index = 0; index < refObject.remap_rules.size; index++) {
      this._remap_rulesArray[index] = refObject.remap_rules.data[index].data;
    }
    this._wrapperFields.parameters.copyRefObject(refObject.parameters);
    this._wrapperFields.extra_arguments.copyRefObject(refObject.extra_arguments);
  }
  toPlainObject(enableTypedArray) {
    return translator.toPlainObject(this, enableTypedArray);
  }
  static freeStruct(refObject) {
    StringWrapper.freeStruct(refObject.package_name);
    StringWrapper.freeStruct(refObject.plugin_name);
    StringWrapper.freeStruct(refObject.node_name);
    StringWrapper.freeStruct(refObject.node_namespace);
    if (refObject.remap_rules.size != 0) {
      StringWrapper.ArrayType.freeArray(refObject.remap_rules);
      if (StringWrapper.ArrayType.useTypedArray) {
        // Do nothing, the v8 will take the ownership of the ArrayBuffer used by the typed array.
      } else {
        deallocator.freeStructMember(refObject.remap_rules, StringWrapper.refObjectArrayType, 'data');
      }
    }
    if (refObject.parameters.size != 0) {
      ParameterWrapper.ArrayType.freeArray(refObject.parameters);
      if (ParameterWrapper.ArrayType.useTypedArray) {
        // Do nothing, the v8 will take the ownership of the ArrayBuffer used by the typed array.
      } else {
        deallocator.freeStructMember(refObject.parameters, ParameterWrapper.refObjectArrayType, 'data');
      }
    }
    if (refObject.extra_arguments.size != 0) {
      ParameterWrapper.ArrayType.freeArray(refObject.extra_arguments);
      if (ParameterWrapper.ArrayType.useTypedArray) {
        // Do nothing, the v8 will take the ownership of the ArrayBuffer used by the typed array.
      } else {
        deallocator.freeStructMember(refObject.extra_arguments, ParameterWrapper.refObjectArrayType, 'data');
      }
    }
  }
  static destoryRawROS(msg) {
    LoadNode_RequestWrapper.freeStruct(msg.refObject);
  }
  static type() {
    return {pkgName: 'composition_interfaces', subFolder: 'srv', interfaceName: 'LoadNode_Request'};
  }
  static isPrimitive() {
    return false;
  }
  static get isROSArray() {
    return false;
  }
  get refObject() {
    return this._refObject;
  }
  get package_name() {
    if (!this._package_nameIntialized) {
      return undefined;
    }
    return this._wrapperFields.package_name.data;
  }
  set package_name(value) {
    this._package_nameIntialized = true;
    this._wrapperFields.package_name.data = value;
  }
  get plugin_name() {
    if (!this._plugin_nameIntialized) {
      return undefined;
    }
    return this._wrapperFields.plugin_name.data;
  }
  set plugin_name(value) {
    this._plugin_nameIntialized = true;
    this._wrapperFields.plugin_name.data = value;
  }
  get node_name() {
    if (!this._node_nameIntialized) {
      return undefined;
    }
    return this._wrapperFields.node_name.data;
  }
  set node_name(value) {
    this._node_nameIntialized = true;
    this._wrapperFields.node_name.data = value;
  }
  get node_namespace() {
    if (!this._node_namespaceIntialized) {
      return undefined;
    }
    return this._wrapperFields.node_namespace.data;
  }
  set node_namespace(value) {
    this._node_namespaceIntialized = true;
    this._wrapperFields.node_namespace.data = value;
  }
  get log_level() {
    if (!this._log_levelIntialized) {
      return undefined;
    }
    return this._refObject.log_level;
  }
  set log_level(value) {
    this._log_levelIntialized = true;
    this._refObject.log_level = value;
  }
  get remap_rules() {
    return this._remap_rulesArray;
  }
  set remap_rules(value) {
    this._remap_rulesArray = value;
  }
  get parameters() {
    return this._wrapperFields.parameters;
  }
  set parameters(value) {
    this._wrapperFields.parameters.fill(value);
  }
  get extra_arguments() {
    return this._wrapperFields.extra_arguments;
  }
  set extra_arguments(value) {
    this._wrapperFields.extra_arguments.fill(value);
  }
  copyRefObject(refObject) {
    this._refObject = new LoadNode_RequestRefStruct(refObject.toObject());
    this._package_nameIntialized = true;
    this._wrapperFields.package_name.copyRefObject(this._refObject.package_name);
    this._plugin_nameIntialized = true;
    this._wrapperFields.plugin_name.copyRefObject(this._refObject.plugin_name);
    this._node_nameIntialized = true;
    this._wrapperFields.node_name.copyRefObject(this._refObject.node_name);
    this._node_namespaceIntialized = true;
    this._wrapperFields.node_namespace.copyRefObject(this._refObject.node_namespace);
    this._log_levelIntialized = true;
    refObject.remap_rules.data.length = refObject.remap_rules.size;
    for (let index = 0; index < refObject.remap_rules.size; index++) {
      this._remap_rulesArray[index] = refObject.remap_rules.data[index].data;
    }
    this._wrapperFields.parameters.copyRefObject(this._refObject.parameters);
    this._wrapperFields.extra_arguments.copyRefObject(this._refObject.extra_arguments);
  }
  copy(other) {
    this._refObject = new LoadNode_RequestRefStruct(other._refObject.toObject());
    this._package_nameIntialized = true;
    this._wrapperFields.package_name.copy(other._wrapperFields.package_name);
    this._plugin_nameIntialized = true;
    this._wrapperFields.plugin_name.copy(other._wrapperFields.plugin_name);
    this._node_nameIntialized = true;
    this._wrapperFields.node_name.copy(other._wrapperFields.node_name);
    this._node_namespaceIntialized = true;
    this._wrapperFields.node_namespace.copy(other._wrapperFields.node_namespace);
    this._log_levelIntialized = true;
    this._remap_rulesArray = other._remap_rulesArray.slice();
    this._wrapperFields.parameters.copy(other._wrapperFields.parameters);
    this._wrapperFields.extra_arguments.copy(other._wrapperFields.extra_arguments);
  }
  static get classType() {
    return LoadNode_RequestWrapper;
  }
  static get ROSMessageDef() {
    return {"constants":[],"fields":[{"name":"package_name","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"string","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"plugin_name","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"string","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"node_name","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"string","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"node_namespace","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"string","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"log_level","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint8","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"remap_rules","type":{"isArray":true,"arraySize":null,"isUpperBound":false,"isDynamicArray":true,"isFixedSizeArray":null,"pkgName":null,"type":"string","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"parameters","type":{"isArray":true,"arraySize":null,"isUpperBound":false,"isDynamicArray":true,"isFixedSizeArray":null,"pkgName":"rcl_interfaces","type":"Parameter","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"extra_arguments","type":{"isArray":true,"arraySize":null,"isUpperBound":false,"isDynamicArray":true,"isFixedSizeArray":null,"pkgName":"rcl_interfaces","type":"Parameter","stringUpperBound":null,"isPrimitiveType":false},"default_value":null}],"baseType":{"pkgName":"composition_interfaces","type":"LoadNode_Request","stringUpperBound":null,"isPrimitiveType":false},"msgName":"LoadNode_Request"};
  }
  hasMember(name) {
    let memberNames = ["package_name","plugin_name","node_name","node_namespace","log_level","remap_rules","parameters","extra_arguments"];
    return memberNames.indexOf(name) !== -1;
  }
}
// Define the wrapper of array class.
class LoadNode_RequestArrayWrapper {
  constructor(size = 0) {
    this._resize(size);
  }
  toRawROS() {
    return this._refObject.ref();
  }
  fill(values) {
    const length = values.length;
    this._resize(length);
    values.forEach((value, index) => {
      if (value instanceof LoadNode_RequestWrapper) {
        this._wrappers[index].copy(value);
      } else {
        this._wrappers[index] = new LoadNode_RequestWrapper(value);
      }
    });
  }
  // Put all data currently stored in `this._wrappers` into `this._refObject`
  freeze(own) {
    this._wrappers.forEach((wrapper, index) => {
      wrapper.freeze(own);
      this._refArray[index] = wrapper.refObject;
    });
    this._refObject.size = this._wrappers.length;
    this._refObject.capacity = this._wrappers.length;
    if (this._refObject.capacity === 0) {
      this._refObject.data = null
    } else {
    this._refObject.data = this._refArray.buffer;
    }
  }
  get refObject() {
    return this._refObject;
  }
  get data() {
    return this._wrappers;
  }
  get size() {
    return this._wrappers.length;
  }
  set size(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to LoadNode_RequestArrayWrapper.size setter');
      return;
    }
    return this._resize(value);
  }
  get capacity() {
    return this._wrappers.length;
  }
  set capacity(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to LoadNode_RequestArrayWrapper.capacity setter');
    }
    return this._resize(value);
  }
  get refObject() {
    return this._refObject;
  }
  _resize(size) {
    if (size < 0) {
      throw new RangeError('Invalid argument: should provide a positive number');
      return;
    }
    this._refArray = new LoadNode_RequestRefArray(size);
    this._refObject = new LoadNode_RequestRefStructArray();
    this._refObject.size = size;
    this._refObject.capacity = size;
    this._wrappers = new Array();
    for (let i = 0; i < size; i++) {
      this._wrappers.push(new LoadNode_RequestWrapper());
    }
  }
  // Copy all data from `this._refObject` into `this._wrappers`
  copyRefObject(refObject) {
    this._refObject = refObject;
    let refObjectArray = this._refObject.data;
    refObjectArray.length = this._refObject.size;
    this._resize(this._refObject.size);
    for (let index = 0; index < this._refObject.size; index++) {
      this._wrappers[index].copyRefObject(refObjectArray[index]);
    }
  }
  copy(other) {
    if (! (other instanceof LoadNode_RequestArrayWrapper)) {
      throw new TypeError('Invalid argument: should provide "LoadNode_RequestArrayWrapper".');
    }
    this._resize(other.size);
    // Array deep copy
    other._wrappers.forEach((wrapper, index) => {
      this._wrappers[index].copy(wrapper);
    });
  }
  static freeArray(refObject) {
    let refObjectArray = refObject.data;
    refObjectArray.length = refObject.size;
    for (let index = 0; index < refObject.size; index++) {
      LoadNode_RequestWrapper.freeStruct(refObjectArray[index]);
    }
  }
  static get elementType() {
    return LoadNode_RequestWrapper;
  }
  static get isROSArray() {
    return true;
  }
  static get useTypedArray() {
    return false;
  }
  get classType() {
    return LoadNode_RequestArrayWrapper;
  }
}
module.exports = LoadNode_RequestWrapper;
/*
 * The following is the original spec object coming from parser:
{
  "constants": [],
  "fields": [
    {
      "name": "package_name",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "string",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "plugin_name",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "string",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "node_name",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "string",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "node_namespace",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "string",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "log_level",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint8",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "remap_rules",
      "type": {
        "isArray": true,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": true,
        "isFixedSizeArray": null,
        "pkgName": null,
        "type": "string",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "parameters",
      "type": {
        "isArray": true,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": true,
        "isFixedSizeArray": null,
        "pkgName": "rcl_interfaces",
        "type": "Parameter",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "extra_arguments",
      "type": {
        "isArray": true,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": true,
        "isFixedSizeArray": null,
        "pkgName": "rcl_interfaces",
        "type": "Parameter",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    }
  ],
  "baseType": {
    "pkgName": "composition_interfaces",
    "type": "LoadNode_Request",
    "stringUpperBound": null,
    "isPrimitiveType": false
  },
  "msgName": "LoadNode_Request"
}
*/
