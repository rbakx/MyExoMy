// This file is automatically generated by Intel rclnodejs
//
// *** DO NOT EDIT directly
//
'use strict';
const ref = require('ref-napi');
const StructType = require('ref-struct-di')(ref);
const ArrayType = require('ref-array-di')(ref);
const primitiveTypes = require('../../rosidl_gen/primitive_types.js');
const deallocator = require('../../rosidl_gen/deallocator.js');
const translator = require('../../rosidl_gen/message_translator.js');
const HeaderWrapper = require('../../generated/std_msgs/std_msgs__msg__Header.js');
const ImageWrapper = require('../../generated/sensor_msgs/sensor_msgs__msg__Image.js');
const RegionOfInterestWrapper = require('../../generated/sensor_msgs/sensor_msgs__msg__RegionOfInterest.js');
const DisparityImageRefStruct = StructType({
  header: HeaderWrapper.refObjectType,
  image: ImageWrapper.refObjectType,
  f: primitiveTypes.float32,
  t: primitiveTypes.float32,
  valid_window: RegionOfInterestWrapper.refObjectType,
  min_disparity: primitiveTypes.float32,
  max_disparity: primitiveTypes.float32,
  delta_d: primitiveTypes.float32,
});
const DisparityImageRefArray = ArrayType(DisparityImageRefStruct);
const DisparityImageRefStructArray = StructType({
  data: DisparityImageRefArray,
  size: ref.types.size_t,
  capacity: ref.types.size_t
});
// Define the wrapper class.
class DisparityImageWrapper {
  constructor(other) {
    this._wrapperFields = {};
    if (typeof other === 'object' && other._refObject) {
      this._refObject = new DisparityImageRefStruct(other._refObject.toObject());
      this._wrapperFields.header =  new HeaderWrapper(other._wrapperFields.header);
      this._wrapperFields.image =  new ImageWrapper(other._wrapperFields.image);
      this._fIntialized = true;
      this._tIntialized = true;
      this._wrapperFields.valid_window =  new RegionOfInterestWrapper(other._wrapperFields.valid_window);
      this._min_disparityIntialized = true;
      this._max_disparityIntialized = true;
      this._delta_dIntialized = true;
    } else if (typeof other !== 'undefined') {
      this._initMembers();
      translator.constructFromPlanObject(this, other);
    } else {
      this._initMembers();
    }
    this.freeze();
  }
  _initMembers() {
    this._refObject = new DisparityImageRefStruct();
    this._wrapperFields.header = new HeaderWrapper();
    this._wrapperFields.image = new ImageWrapper();
    this._fIntialized = false;
    this._tIntialized = false;
    this._wrapperFields.valid_window = new RegionOfInterestWrapper();
    this._min_disparityIntialized = false;
    this._max_disparityIntialized = false;
    this._delta_dIntialized = false;
  }
  static createFromRefObject(refObject) {
    let self = new DisparityImageWrapper();
    self.copyRefObject(refObject);
    return self;
  }
  static createArray() {
    return new DisparityImageArrayWrapper;
  }
  static get ArrayType() {
    return DisparityImageArrayWrapper;
  }
  static get refObjectArrayType() {
    return DisparityImageRefStructArray
  }
  static get refObjectType() {
    return DisparityImageRefStruct;
  }
  toRawROS() {
    this.freeze(true);
    return this._refObject.ref();
  }
  freeze(own = false, checkConsistency = false) {
    if (checkConsistency) {
      if (!this._fIntialized) {
        throw new TypeError('Invalid argument: f in DisparityImage');
      }
      if (!this._tIntialized) {
        throw new TypeError('Invalid argument: t in DisparityImage');
      }
      if (!this._min_disparityIntialized) {
        throw new TypeError('Invalid argument: min_disparity in DisparityImage');
      }
      if (!this._max_disparityIntialized) {
        throw new TypeError('Invalid argument: max_disparity in DisparityImage');
      }
      if (!this._delta_dIntialized) {
        throw new TypeError('Invalid argument: delta_d in DisparityImage');
      }
    }
    this._wrapperFields.header.freeze(own, checkConsistency);
    this._refObject.header = this._wrapperFields.header.refObject;
    this._wrapperFields.image.freeze(own, checkConsistency);
    this._refObject.image = this._wrapperFields.image.refObject;
    this._wrapperFields.valid_window.freeze(own, checkConsistency);
    this._refObject.valid_window = this._wrapperFields.valid_window.refObject;
  }
  serialize() {
    this.freeze(false, true);
    return this._refObject.ref();
  }
  deserialize(refObject) {
    this._wrapperFields.header.copyRefObject(refObject.header);
    this._wrapperFields.image.copyRefObject(refObject.image);
    this._fIntialized = true;
    this._refObject.f = refObject.f;
    this._tIntialized = true;
    this._refObject.t = refObject.t;
    this._wrapperFields.valid_window.copyRefObject(refObject.valid_window);
    this._min_disparityIntialized = true;
    this._refObject.min_disparity = refObject.min_disparity;
    this._max_disparityIntialized = true;
    this._refObject.max_disparity = refObject.max_disparity;
    this._delta_dIntialized = true;
    this._refObject.delta_d = refObject.delta_d;
  }
  toPlainObject(enableTypedArray) {
    return translator.toPlainObject(this, enableTypedArray);
  }
  static freeStruct(refObject) {
    HeaderWrapper.freeStruct(refObject.header);
    ImageWrapper.freeStruct(refObject.image);
    RegionOfInterestWrapper.freeStruct(refObject.valid_window);
  }
  static destoryRawROS(msg) {
    DisparityImageWrapper.freeStruct(msg.refObject);
  }
  static type() {
    return {pkgName: 'stereo_msgs', subFolder: 'msg', interfaceName: 'DisparityImage'};
  }
  static isPrimitive() {
    return false;
  }
  static get isROSArray() {
    return false;
  }
  get refObject() {
    return this._refObject;
  }
  get header() {
    return this._wrapperFields.header;
  }
  set header(value) {
    if (value instanceof HeaderWrapper) {
      this._wrapperFields.header.copy(value);
    } else {
      this._wrapperFields.header.copy(new HeaderWrapper(value));
    }
  }
  get image() {
    return this._wrapperFields.image;
  }
  set image(value) {
    if (value instanceof ImageWrapper) {
      this._wrapperFields.image.copy(value);
    } else {
      this._wrapperFields.image.copy(new ImageWrapper(value));
    }
  }
  get f() {
    if (!this._fIntialized) {
      return undefined;
    }
    return this._refObject.f;
  }
  set f(value) {
    this._fIntialized = true;
    this._refObject.f = value;
  }
  get t() {
    if (!this._tIntialized) {
      return undefined;
    }
    return this._refObject.t;
  }
  set t(value) {
    this._tIntialized = true;
    this._refObject.t = value;
  }
  get valid_window() {
    return this._wrapperFields.valid_window;
  }
  set valid_window(value) {
    if (value instanceof RegionOfInterestWrapper) {
      this._wrapperFields.valid_window.copy(value);
    } else {
      this._wrapperFields.valid_window.copy(new RegionOfInterestWrapper(value));
    }
  }
  get min_disparity() {
    if (!this._min_disparityIntialized) {
      return undefined;
    }
    return this._refObject.min_disparity;
  }
  set min_disparity(value) {
    this._min_disparityIntialized = true;
    this._refObject.min_disparity = value;
  }
  get max_disparity() {
    if (!this._max_disparityIntialized) {
      return undefined;
    }
    return this._refObject.max_disparity;
  }
  set max_disparity(value) {
    this._max_disparityIntialized = true;
    this._refObject.max_disparity = value;
  }
  get delta_d() {
    if (!this._delta_dIntialized) {
      return undefined;
    }
    return this._refObject.delta_d;
  }
  set delta_d(value) {
    this._delta_dIntialized = true;
    this._refObject.delta_d = value;
  }
  copyRefObject(refObject) {
    this._refObject = new DisparityImageRefStruct(refObject.toObject());
    this._wrapperFields.header.copyRefObject(this._refObject.header);
    this._wrapperFields.image.copyRefObject(this._refObject.image);
    this._fIntialized = true;
    this._tIntialized = true;
    this._wrapperFields.valid_window.copyRefObject(this._refObject.valid_window);
    this._min_disparityIntialized = true;
    this._max_disparityIntialized = true;
    this._delta_dIntialized = true;
  }
  copy(other) {
    this._refObject = new DisparityImageRefStruct(other._refObject.toObject());
    this._wrapperFields.header.copy(other._wrapperFields.header);
    this._wrapperFields.image.copy(other._wrapperFields.image);
    this._fIntialized = true;
    this._tIntialized = true;
    this._wrapperFields.valid_window.copy(other._wrapperFields.valid_window);
    this._min_disparityIntialized = true;
    this._max_disparityIntialized = true;
    this._delta_dIntialized = true;
  }
  static get classType() {
    return DisparityImageWrapper;
  }
  static get ROSMessageDef() {
    return {"constants":[],"fields":[{"name":"header","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":"std_msgs","type":"Header","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"image","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":"sensor_msgs","type":"Image","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"f","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"t","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"valid_window","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":"sensor_msgs","type":"RegionOfInterest","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"min_disparity","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"max_disparity","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"delta_d","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null}],"baseType":{"pkgName":"stereo_msgs","type":"DisparityImage","stringUpperBound":null,"isPrimitiveType":false},"msgName":"DisparityImage"};
  }
  hasMember(name) {
    let memberNames = ["header","image","f","t","valid_window","min_disparity","max_disparity","delta_d"];
    return memberNames.indexOf(name) !== -1;
  }
}
// Define the wrapper of array class.
class DisparityImageArrayWrapper {
  constructor(size = 0) {
    this._resize(size);
  }
  toRawROS() {
    return this._refObject.ref();
  }
  fill(values) {
    const length = values.length;
    this._resize(length);
    values.forEach((value, index) => {
      if (value instanceof DisparityImageWrapper) {
        this._wrappers[index].copy(value);
      } else {
        this._wrappers[index] = new DisparityImageWrapper(value);
      }
    });
  }
  // Put all data currently stored in `this._wrappers` into `this._refObject`
  freeze(own) {
    this._wrappers.forEach((wrapper, index) => {
      wrapper.freeze(own);
      this._refArray[index] = wrapper.refObject;
    });
    this._refObject.size = this._wrappers.length;
    this._refObject.capacity = this._wrappers.length;
    if (this._refObject.capacity === 0) {
      this._refObject.data = null
    } else {
    this._refObject.data = this._refArray.buffer;
    }
  }
  get refObject() {
    return this._refObject;
  }
  get data() {
    return this._wrappers;
  }
  get size() {
    return this._wrappers.length;
  }
  set size(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to DisparityImageArrayWrapper.size setter');
      return;
    }
    return this._resize(value);
  }
  get capacity() {
    return this._wrappers.length;
  }
  set capacity(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to DisparityImageArrayWrapper.capacity setter');
    }
    return this._resize(value);
  }
  get refObject() {
    return this._refObject;
  }
  _resize(size) {
    if (size < 0) {
      throw new RangeError('Invalid argument: should provide a positive number');
      return;
    }
    this._refArray = new DisparityImageRefArray(size);
    this._refObject = new DisparityImageRefStructArray();
    this._refObject.size = size;
    this._refObject.capacity = size;
    this._wrappers = new Array();
    for (let i = 0; i < size; i++) {
      this._wrappers.push(new DisparityImageWrapper());
    }
  }
  // Copy all data from `this._refObject` into `this._wrappers`
  copyRefObject(refObject) {
    this._refObject = refObject;
    let refObjectArray = this._refObject.data;
    refObjectArray.length = this._refObject.size;
    this._resize(this._refObject.size);
    for (let index = 0; index < this._refObject.size; index++) {
      this._wrappers[index].copyRefObject(refObjectArray[index]);
    }
  }
  copy(other) {
    if (! (other instanceof DisparityImageArrayWrapper)) {
      throw new TypeError('Invalid argument: should provide "DisparityImageArrayWrapper".');
    }
    this._resize(other.size);
    // Array deep copy
    other._wrappers.forEach((wrapper, index) => {
      this._wrappers[index].copy(wrapper);
    });
  }
  static freeArray(refObject) {
    let refObjectArray = refObject.data;
    refObjectArray.length = refObject.size;
    for (let index = 0; index < refObject.size; index++) {
      DisparityImageWrapper.freeStruct(refObjectArray[index]);
    }
  }
  static get elementType() {
    return DisparityImageWrapper;
  }
  static get isROSArray() {
    return true;
  }
  static get useTypedArray() {
    return false;
  }
  get classType() {
    return DisparityImageArrayWrapper;
  }
}
module.exports = DisparityImageWrapper;
/*
 * The following is the original spec object coming from parser:
{
  "constants": [],
  "fields": [
    {
      "name": "header",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": "std_msgs",
        "type": "Header",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "image",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": "sensor_msgs",
        "type": "Image",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "f",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "t",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "valid_window",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": "sensor_msgs",
        "type": "RegionOfInterest",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "min_disparity",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "max_disparity",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "delta_d",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    }
  ],
  "baseType": {
    "pkgName": "stereo_msgs",
    "type": "DisparityImage",
    "stringUpperBound": null,
    "isPrimitiveType": false
  },
  "msgName": "DisparityImage"
}
*/
