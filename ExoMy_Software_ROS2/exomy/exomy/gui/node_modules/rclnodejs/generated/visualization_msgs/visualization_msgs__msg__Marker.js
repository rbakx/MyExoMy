// This file is automatically generated by Intel rclnodejs
//
// *** DO NOT EDIT directly
//
'use strict';
const ref = require('ref-napi');
const StructType = require('ref-struct-di')(ref);
const ArrayType = require('ref-array-di')(ref);
const primitiveTypes = require('../../rosidl_gen/primitive_types.js');
const deallocator = require('../../rosidl_gen/deallocator.js');
const translator = require('../../rosidl_gen/message_translator.js');
const HeaderWrapper = require('../../generated/std_msgs/std_msgs__msg__Header.js');
const StringWrapper = require('../../generated/std_msgs/std_msgs__msg__String.js');
const PoseWrapper = require('../../generated/geometry_msgs/geometry_msgs__msg__Pose.js');
const Vector3Wrapper = require('../../generated/geometry_msgs/geometry_msgs__msg__Vector3.js');
const ColorRGBAWrapper = require('../../generated/std_msgs/std_msgs__msg__ColorRGBA.js');
const DurationWrapper = require('../../generated/builtin_interfaces/builtin_interfaces__msg__Duration.js');
const PointWrapper = require('../../generated/geometry_msgs/geometry_msgs__msg__Point.js');
const MarkerRefStruct = StructType({
  header: HeaderWrapper.refObjectType,
  ns: primitiveTypes.string,
  id: primitiveTypes.int32,
  type: primitiveTypes.int32,
  action: primitiveTypes.int32,
  pose: PoseWrapper.refObjectType,
  scale: Vector3Wrapper.refObjectType,
  color: ColorRGBAWrapper.refObjectType,
  lifetime: DurationWrapper.refObjectType,
  frame_locked: primitiveTypes.bool,
  points: PointWrapper.refObjectArrayType,
  colors: ColorRGBAWrapper.refObjectArrayType,
  text: primitiveTypes.string,
  mesh_resource: primitiveTypes.string,
  mesh_use_embedded_materials: primitiveTypes.bool,
});
const MarkerRefArray = ArrayType(MarkerRefStruct);
const MarkerRefStructArray = StructType({
  data: MarkerRefArray,
  size: ref.types.size_t,
  capacity: ref.types.size_t
});
// Define the wrapper class.
class MarkerWrapper {
  constructor(other) {
    this._wrapperFields = {};
    if (typeof other === 'object' && other._refObject) {
      this._refObject = new MarkerRefStruct(other._refObject.toObject());
      this._wrapperFields.header =  new HeaderWrapper(other._wrapperFields.header);
      this._nsIntialized = true;
      this._wrapperFields.ns =  new StringWrapper(other._wrapperFields.ns);
      this._idIntialized = true;
      this._typeIntialized = true;
      this._actionIntialized = true;
      this._wrapperFields.pose =  new PoseWrapper(other._wrapperFields.pose);
      this._wrapperFields.scale =  new Vector3Wrapper(other._wrapperFields.scale);
      this._wrapperFields.color =  new ColorRGBAWrapper(other._wrapperFields.color);
      this._wrapperFields.lifetime =  new DurationWrapper(other._wrapperFields.lifetime);
      this._frame_lockedIntialized = true;
      this._wrapperFields.points = PointWrapper.createArray();
      this._wrapperFields.points.copy(other._wrapperFields.points);
      this._wrapperFields.colors = ColorRGBAWrapper.createArray();
      this._wrapperFields.colors.copy(other._wrapperFields.colors);
      this._textIntialized = true;
      this._wrapperFields.text =  new StringWrapper(other._wrapperFields.text);
      this._mesh_resourceIntialized = true;
      this._wrapperFields.mesh_resource =  new StringWrapper(other._wrapperFields.mesh_resource);
      this._mesh_use_embedded_materialsIntialized = true;
    } else if (typeof other !== 'undefined') {
      this._initMembers();
      translator.constructFromPlanObject(this, other);
    } else {
      this._initMembers();
    }
    this.freeze();
  }
  _initMembers() {
    this._refObject = new MarkerRefStruct();
    this._wrapperFields.header = new HeaderWrapper();
    this._nsIntialized = false;
    this._wrapperFields.ns = new StringWrapper();
    this._idIntialized = false;
    this._typeIntialized = false;
    this._actionIntialized = false;
    this._wrapperFields.pose = new PoseWrapper();
    this._wrapperFields.scale = new Vector3Wrapper();
    this._wrapperFields.color = new ColorRGBAWrapper();
    this._wrapperFields.lifetime = new DurationWrapper();
    this._frame_lockedIntialized = false;
    this._wrapperFields.points = PointWrapper.createArray();
    this._wrapperFields.colors = ColorRGBAWrapper.createArray();
    this._textIntialized = false;
    this._wrapperFields.text = new StringWrapper();
    this._mesh_resourceIntialized = false;
    this._wrapperFields.mesh_resource = new StringWrapper();
    this._mesh_use_embedded_materialsIntialized = false;
  }
  static createFromRefObject(refObject) {
    let self = new MarkerWrapper();
    self.copyRefObject(refObject);
    return self;
  }
  static createArray() {
    return new MarkerArrayWrapper;
  }
  static get ArrayType() {
    return MarkerArrayWrapper;
  }
  static get refObjectArrayType() {
    return MarkerRefStructArray
  }
  static get refObjectType() {
    return MarkerRefStruct;
  }
  toRawROS() {
    this.freeze(true);
    return this._refObject.ref();
  }
  freeze(own = false, checkConsistency = false) {
    if (checkConsistency) {
      if (!this._nsIntialized) {
        throw new TypeError('Invalid argument: ns in Marker');
      }
      if (!this._idIntialized) {
        throw new TypeError('Invalid argument: id in Marker');
      }
      if (!this._typeIntialized) {
        throw new TypeError('Invalid argument: type in Marker');
      }
      if (!this._actionIntialized) {
        throw new TypeError('Invalid argument: action in Marker');
      }
      if (!this._frame_lockedIntialized) {
        throw new TypeError('Invalid argument: frame_locked in Marker');
      }
      if (!this._textIntialized) {
        throw new TypeError('Invalid argument: text in Marker');
      }
      if (!this._mesh_resourceIntialized) {
        throw new TypeError('Invalid argument: mesh_resource in Marker');
      }
      if (!this._mesh_use_embedded_materialsIntialized) {
        throw new TypeError('Invalid argument: mesh_use_embedded_materials in Marker');
      }
    }
    this._wrapperFields.header.freeze(own, checkConsistency);
    this._refObject.header = this._wrapperFields.header.refObject;
    if (own) {
      this._wrapperFields.ns.freeze(own, checkConsistency);
    }
    this._refObject.ns = this._wrapperFields.ns.refObject;
    this._wrapperFields.pose.freeze(own, checkConsistency);
    this._refObject.pose = this._wrapperFields.pose.refObject;
    this._wrapperFields.scale.freeze(own, checkConsistency);
    this._refObject.scale = this._wrapperFields.scale.refObject;
    this._wrapperFields.color.freeze(own, checkConsistency);
    this._refObject.color = this._wrapperFields.color.refObject;
    this._wrapperFields.lifetime.freeze(own, checkConsistency);
    this._refObject.lifetime = this._wrapperFields.lifetime.refObject;
    this._wrapperFields.points.freeze(own, checkConsistency);
    this._refObject.points = this._wrapperFields.points.refObject;
    this._wrapperFields.colors.freeze(own, checkConsistency);
    this._refObject.colors = this._wrapperFields.colors.refObject;
    if (own) {
      this._wrapperFields.text.freeze(own, checkConsistency);
    }
    this._refObject.text = this._wrapperFields.text.refObject;
    if (own) {
      this._wrapperFields.mesh_resource.freeze(own, checkConsistency);
    }
    this._refObject.mesh_resource = this._wrapperFields.mesh_resource.refObject;
  }
  serialize() {
    this.freeze(false, true);
    return this._refObject.ref();
  }
  deserialize(refObject) {
    this._wrapperFields.header.copyRefObject(refObject.header);
    this._nsIntialized = true;
    this._wrapperFields.ns.data = refObject.ns.data;
    this._idIntialized = true;
    this._refObject.id = refObject.id;
    this._typeIntialized = true;
    this._refObject.type = refObject.type;
    this._actionIntialized = true;
    this._refObject.action = refObject.action;
    this._wrapperFields.pose.copyRefObject(refObject.pose);
    this._wrapperFields.scale.copyRefObject(refObject.scale);
    this._wrapperFields.color.copyRefObject(refObject.color);
    this._wrapperFields.lifetime.copyRefObject(refObject.lifetime);
    this._frame_lockedIntialized = true;
    this._refObject.frame_locked = refObject.frame_locked;
    this._wrapperFields.points.copyRefObject(refObject.points);
    this._wrapperFields.colors.copyRefObject(refObject.colors);
    this._textIntialized = true;
    this._wrapperFields.text.data = refObject.text.data;
    this._mesh_resourceIntialized = true;
    this._wrapperFields.mesh_resource.data = refObject.mesh_resource.data;
    this._mesh_use_embedded_materialsIntialized = true;
    this._refObject.mesh_use_embedded_materials = refObject.mesh_use_embedded_materials;
  }
  toPlainObject(enableTypedArray) {
    return translator.toPlainObject(this, enableTypedArray);
  }
  static freeStruct(refObject) {
    HeaderWrapper.freeStruct(refObject.header);
    StringWrapper.freeStruct(refObject.ns);
    PoseWrapper.freeStruct(refObject.pose);
    Vector3Wrapper.freeStruct(refObject.scale);
    ColorRGBAWrapper.freeStruct(refObject.color);
    DurationWrapper.freeStruct(refObject.lifetime);
    if (refObject.points.size != 0) {
      PointWrapper.ArrayType.freeArray(refObject.points);
      if (PointWrapper.ArrayType.useTypedArray) {
        // Do nothing, the v8 will take the ownership of the ArrayBuffer used by the typed array.
      } else {
        deallocator.freeStructMember(refObject.points, PointWrapper.refObjectArrayType, 'data');
      }
    }
    if (refObject.colors.size != 0) {
      ColorRGBAWrapper.ArrayType.freeArray(refObject.colors);
      if (ColorRGBAWrapper.ArrayType.useTypedArray) {
        // Do nothing, the v8 will take the ownership of the ArrayBuffer used by the typed array.
      } else {
        deallocator.freeStructMember(refObject.colors, ColorRGBAWrapper.refObjectArrayType, 'data');
      }
    }
    StringWrapper.freeStruct(refObject.text);
    StringWrapper.freeStruct(refObject.mesh_resource);
  }
  static destoryRawROS(msg) {
    MarkerWrapper.freeStruct(msg.refObject);
  }
  static type() {
    return {pkgName: 'visualization_msgs', subFolder: 'msg', interfaceName: 'Marker'};
  }
  static isPrimitive() {
    return false;
  }
  static get isROSArray() {
    return false;
  }
  get refObject() {
    return this._refObject;
  }
  get header() {
    return this._wrapperFields.header;
  }
  set header(value) {
    if (value instanceof HeaderWrapper) {
      this._wrapperFields.header.copy(value);
    } else {
      this._wrapperFields.header.copy(new HeaderWrapper(value));
    }
  }
  get ns() {
    if (!this._nsIntialized) {
      return undefined;
    }
    return this._wrapperFields.ns.data;
  }
  set ns(value) {
    this._nsIntialized = true;
    this._wrapperFields.ns.data = value;
  }
  get id() {
    if (!this._idIntialized) {
      return undefined;
    }
    return this._refObject.id;
  }
  set id(value) {
    this._idIntialized = true;
    this._refObject.id = value;
  }
  get type() {
    if (!this._typeIntialized) {
      return undefined;
    }
    return this._refObject.type;
  }
  set type(value) {
    this._typeIntialized = true;
    this._refObject.type = value;
  }
  get action() {
    if (!this._actionIntialized) {
      return undefined;
    }
    return this._refObject.action;
  }
  set action(value) {
    this._actionIntialized = true;
    this._refObject.action = value;
  }
  get pose() {
    return this._wrapperFields.pose;
  }
  set pose(value) {
    if (value instanceof PoseWrapper) {
      this._wrapperFields.pose.copy(value);
    } else {
      this._wrapperFields.pose.copy(new PoseWrapper(value));
    }
  }
  get scale() {
    return this._wrapperFields.scale;
  }
  set scale(value) {
    if (value instanceof Vector3Wrapper) {
      this._wrapperFields.scale.copy(value);
    } else {
      this._wrapperFields.scale.copy(new Vector3Wrapper(value));
    }
  }
  get color() {
    return this._wrapperFields.color;
  }
  set color(value) {
    if (value instanceof ColorRGBAWrapper) {
      this._wrapperFields.color.copy(value);
    } else {
      this._wrapperFields.color.copy(new ColorRGBAWrapper(value));
    }
  }
  get lifetime() {
    return this._wrapperFields.lifetime;
  }
  set lifetime(value) {
    if (value instanceof DurationWrapper) {
      this._wrapperFields.lifetime.copy(value);
    } else {
      this._wrapperFields.lifetime.copy(new DurationWrapper(value));
    }
  }
  get frame_locked() {
    if (!this._frame_lockedIntialized) {
      return undefined;
    }
    return this._refObject.frame_locked;
  }
  set frame_locked(value) {
    this._frame_lockedIntialized = true;
    this._refObject.frame_locked = value;
  }
  get points() {
    return this._wrapperFields.points;
  }
  set points(value) {
    this._wrapperFields.points.fill(value);
  }
  get colors() {
    return this._wrapperFields.colors;
  }
  set colors(value) {
    this._wrapperFields.colors.fill(value);
  }
  get text() {
    if (!this._textIntialized) {
      return undefined;
    }
    return this._wrapperFields.text.data;
  }
  set text(value) {
    this._textIntialized = true;
    this._wrapperFields.text.data = value;
  }
  get mesh_resource() {
    if (!this._mesh_resourceIntialized) {
      return undefined;
    }
    return this._wrapperFields.mesh_resource.data;
  }
  set mesh_resource(value) {
    this._mesh_resourceIntialized = true;
    this._wrapperFields.mesh_resource.data = value;
  }
  get mesh_use_embedded_materials() {
    if (!this._mesh_use_embedded_materialsIntialized) {
      return undefined;
    }
    return this._refObject.mesh_use_embedded_materials;
  }
  set mesh_use_embedded_materials(value) {
    this._mesh_use_embedded_materialsIntialized = true;
    this._refObject.mesh_use_embedded_materials = value;
  }
  copyRefObject(refObject) {
    this._refObject = new MarkerRefStruct(refObject.toObject());
    this._wrapperFields.header.copyRefObject(this._refObject.header);
    this._nsIntialized = true;
    this._wrapperFields.ns.copyRefObject(this._refObject.ns);
    this._idIntialized = true;
    this._typeIntialized = true;
    this._actionIntialized = true;
    this._wrapperFields.pose.copyRefObject(this._refObject.pose);
    this._wrapperFields.scale.copyRefObject(this._refObject.scale);
    this._wrapperFields.color.copyRefObject(this._refObject.color);
    this._wrapperFields.lifetime.copyRefObject(this._refObject.lifetime);
    this._frame_lockedIntialized = true;
    this._wrapperFields.points.copyRefObject(this._refObject.points);
    this._wrapperFields.colors.copyRefObject(this._refObject.colors);
    this._textIntialized = true;
    this._wrapperFields.text.copyRefObject(this._refObject.text);
    this._mesh_resourceIntialized = true;
    this._wrapperFields.mesh_resource.copyRefObject(this._refObject.mesh_resource);
    this._mesh_use_embedded_materialsIntialized = true;
  }
  copy(other) {
    this._refObject = new MarkerRefStruct(other._refObject.toObject());
    this._wrapperFields.header.copy(other._wrapperFields.header);
    this._nsIntialized = true;
    this._wrapperFields.ns.copy(other._wrapperFields.ns);
    this._idIntialized = true;
    this._typeIntialized = true;
    this._actionIntialized = true;
    this._wrapperFields.pose.copy(other._wrapperFields.pose);
    this._wrapperFields.scale.copy(other._wrapperFields.scale);
    this._wrapperFields.color.copy(other._wrapperFields.color);
    this._wrapperFields.lifetime.copy(other._wrapperFields.lifetime);
    this._frame_lockedIntialized = true;
    this._wrapperFields.points.copy(other._wrapperFields.points);
    this._wrapperFields.colors.copy(other._wrapperFields.colors);
    this._textIntialized = true;
    this._wrapperFields.text.copy(other._wrapperFields.text);
    this._mesh_resourceIntialized = true;
    this._wrapperFields.mesh_resource.copy(other._wrapperFields.mesh_resource);
    this._mesh_use_embedded_materialsIntialized = true;
  }
  static get classType() {
    return MarkerWrapper;
  }
  static get ROSMessageDef() {
    return {"constants":[{"type":"int32","name":"ARROW","value":0},{"type":"int32","name":"CUBE","value":1},{"type":"int32","name":"SPHERE","value":2},{"type":"int32","name":"CYLINDER","value":3},{"type":"int32","name":"LINE_STRIP","value":4},{"type":"int32","name":"LINE_LIST","value":5},{"type":"int32","name":"CUBE_LIST","value":6},{"type":"int32","name":"SPHERE_LIST","value":7},{"type":"int32","name":"POINTS","value":8},{"type":"int32","name":"TEXT_VIEW_FACING","value":9},{"type":"int32","name":"MESH_RESOURCE","value":10},{"type":"int32","name":"TRIANGLE_LIST","value":11},{"type":"int32","name":"ADD","value":0},{"type":"int32","name":"MODIFY","value":0},{"type":"int32","name":"DELETE","value":2},{"type":"int32","name":"DELETEALL","value":3}],"fields":[{"name":"header","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":"std_msgs","type":"Header","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"ns","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"string","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"id","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"int32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"type","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"int32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"action","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"int32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"pose","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":"geometry_msgs","type":"Pose","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"scale","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":"geometry_msgs","type":"Vector3","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"color","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":"std_msgs","type":"ColorRGBA","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"lifetime","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":"builtin_interfaces","type":"Duration","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"frame_locked","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"bool","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"points","type":{"isArray":true,"arraySize":null,"isUpperBound":false,"isDynamicArray":true,"isFixedSizeArray":null,"pkgName":"geometry_msgs","type":"Point","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"colors","type":{"isArray":true,"arraySize":null,"isUpperBound":false,"isDynamicArray":true,"isFixedSizeArray":null,"pkgName":"std_msgs","type":"ColorRGBA","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"text","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"string","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"mesh_resource","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"string","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"mesh_use_embedded_materials","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"bool","stringUpperBound":null,"isPrimitiveType":true},"default_value":null}],"baseType":{"pkgName":"visualization_msgs","type":"Marker","stringUpperBound":null,"isPrimitiveType":false},"msgName":"Marker"};
  }
  hasMember(name) {
    let memberNames = ["header","ns","id","type","action","pose","scale","color","lifetime","frame_locked","points","colors","text","mesh_resource","mesh_use_embedded_materials"];
    return memberNames.indexOf(name) !== -1;
  }
}
// Define the wrapper of array class.
class MarkerArrayWrapper {
  constructor(size = 0) {
    this._resize(size);
  }
  toRawROS() {
    return this._refObject.ref();
  }
  fill(values) {
    const length = values.length;
    this._resize(length);
    values.forEach((value, index) => {
      if (value instanceof MarkerWrapper) {
        this._wrappers[index].copy(value);
      } else {
        this._wrappers[index] = new MarkerWrapper(value);
      }
    });
  }
  // Put all data currently stored in `this._wrappers` into `this._refObject`
  freeze(own) {
    this._wrappers.forEach((wrapper, index) => {
      wrapper.freeze(own);
      this._refArray[index] = wrapper.refObject;
    });
    this._refObject.size = this._wrappers.length;
    this._refObject.capacity = this._wrappers.length;
    if (this._refObject.capacity === 0) {
      this._refObject.data = null
    } else {
    this._refObject.data = this._refArray.buffer;
    }
  }
  get refObject() {
    return this._refObject;
  }
  get data() {
    return this._wrappers;
  }
  get size() {
    return this._wrappers.length;
  }
  set size(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to MarkerArrayWrapper.size setter');
      return;
    }
    return this._resize(value);
  }
  get capacity() {
    return this._wrappers.length;
  }
  set capacity(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to MarkerArrayWrapper.capacity setter');
    }
    return this._resize(value);
  }
  get refObject() {
    return this._refObject;
  }
  _resize(size) {
    if (size < 0) {
      throw new RangeError('Invalid argument: should provide a positive number');
      return;
    }
    this._refArray = new MarkerRefArray(size);
    this._refObject = new MarkerRefStructArray();
    this._refObject.size = size;
    this._refObject.capacity = size;
    this._wrappers = new Array();
    for (let i = 0; i < size; i++) {
      this._wrappers.push(new MarkerWrapper());
    }
  }
  // Copy all data from `this._refObject` into `this._wrappers`
  copyRefObject(refObject) {
    this._refObject = refObject;
    let refObjectArray = this._refObject.data;
    refObjectArray.length = this._refObject.size;
    this._resize(this._refObject.size);
    for (let index = 0; index < this._refObject.size; index++) {
      this._wrappers[index].copyRefObject(refObjectArray[index]);
    }
  }
  copy(other) {
    if (! (other instanceof MarkerArrayWrapper)) {
      throw new TypeError('Invalid argument: should provide "MarkerArrayWrapper".');
    }
    this._resize(other.size);
    // Array deep copy
    other._wrappers.forEach((wrapper, index) => {
      this._wrappers[index].copy(wrapper);
    });
  }
  static freeArray(refObject) {
    let refObjectArray = refObject.data;
    refObjectArray.length = refObject.size;
    for (let index = 0; index < refObject.size; index++) {
      MarkerWrapper.freeStruct(refObjectArray[index]);
    }
  }
  static get elementType() {
    return MarkerWrapper;
  }
  static get isROSArray() {
    return true;
  }
  static get useTypedArray() {
    return false;
  }
  get classType() {
    return MarkerArrayWrapper;
  }
}
// Define constants (16 in total)
Object.defineProperty(MarkerWrapper, "ARROW", {value: 0, writable: false, enumerable: true, configurable: true});
Object.defineProperty(MarkerWrapper, "CUBE", {value: 1, writable: false, enumerable: true, configurable: true});
Object.defineProperty(MarkerWrapper, "SPHERE", {value: 2, writable: false, enumerable: true, configurable: true});
Object.defineProperty(MarkerWrapper, "CYLINDER", {value: 3, writable: false, enumerable: true, configurable: true});
Object.defineProperty(MarkerWrapper, "LINE_STRIP", {value: 4, writable: false, enumerable: true, configurable: true});
Object.defineProperty(MarkerWrapper, "LINE_LIST", {value: 5, writable: false, enumerable: true, configurable: true});
Object.defineProperty(MarkerWrapper, "CUBE_LIST", {value: 6, writable: false, enumerable: true, configurable: true});
Object.defineProperty(MarkerWrapper, "SPHERE_LIST", {value: 7, writable: false, enumerable: true, configurable: true});
Object.defineProperty(MarkerWrapper, "POINTS", {value: 8, writable: false, enumerable: true, configurable: true});
Object.defineProperty(MarkerWrapper, "TEXT_VIEW_FACING", {value: 9, writable: false, enumerable: true, configurable: true});
Object.defineProperty(MarkerWrapper, "MESH_RESOURCE", {value: 10, writable: false, enumerable: true, configurable: true});
Object.defineProperty(MarkerWrapper, "TRIANGLE_LIST", {value: 11, writable: false, enumerable: true, configurable: true});
Object.defineProperty(MarkerWrapper, "ADD", {value: 0, writable: false, enumerable: true, configurable: true});
Object.defineProperty(MarkerWrapper, "MODIFY", {value: 0, writable: false, enumerable: true, configurable: true});
Object.defineProperty(MarkerWrapper, "DELETE", {value: 2, writable: false, enumerable: true, configurable: true});
Object.defineProperty(MarkerWrapper, "DELETEALL", {value: 3, writable: false, enumerable: true, configurable: true});
module.exports = MarkerWrapper;
/*
 * The following is the original spec object coming from parser:
{
  "constants": [
    {
      "type": "int32",
      "name": "ARROW",
      "value": 0
    },
    {
      "type": "int32",
      "name": "CUBE",
      "value": 1
    },
    {
      "type": "int32",
      "name": "SPHERE",
      "value": 2
    },
    {
      "type": "int32",
      "name": "CYLINDER",
      "value": 3
    },
    {
      "type": "int32",
      "name": "LINE_STRIP",
      "value": 4
    },
    {
      "type": "int32",
      "name": "LINE_LIST",
      "value": 5
    },
    {
      "type": "int32",
      "name": "CUBE_LIST",
      "value": 6
    },
    {
      "type": "int32",
      "name": "SPHERE_LIST",
      "value": 7
    },
    {
      "type": "int32",
      "name": "POINTS",
      "value": 8
    },
    {
      "type": "int32",
      "name": "TEXT_VIEW_FACING",
      "value": 9
    },
    {
      "type": "int32",
      "name": "MESH_RESOURCE",
      "value": 10
    },
    {
      "type": "int32",
      "name": "TRIANGLE_LIST",
      "value": 11
    },
    {
      "type": "int32",
      "name": "ADD",
      "value": 0
    },
    {
      "type": "int32",
      "name": "MODIFY",
      "value": 0
    },
    {
      "type": "int32",
      "name": "DELETE",
      "value": 2
    },
    {
      "type": "int32",
      "name": "DELETEALL",
      "value": 3
    }
  ],
  "fields": [
    {
      "name": "header",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": "std_msgs",
        "type": "Header",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "ns",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "string",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "id",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "int32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "type",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "int32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "action",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "int32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "pose",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": "geometry_msgs",
        "type": "Pose",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "scale",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": "geometry_msgs",
        "type": "Vector3",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "color",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": "std_msgs",
        "type": "ColorRGBA",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "lifetime",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": "builtin_interfaces",
        "type": "Duration",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "frame_locked",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "bool",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "points",
      "type": {
        "isArray": true,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": true,
        "isFixedSizeArray": null,
        "pkgName": "geometry_msgs",
        "type": "Point",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "colors",
      "type": {
        "isArray": true,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": true,
        "isFixedSizeArray": null,
        "pkgName": "std_msgs",
        "type": "ColorRGBA",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "text",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "string",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "mesh_resource",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "string",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "mesh_use_embedded_materials",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "bool",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    }
  ],
  "baseType": {
    "pkgName": "visualization_msgs",
    "type": "Marker",
    "stringUpperBound": null,
    "isPrimitiveType": false
  },
  "msgName": "Marker"
}
*/
