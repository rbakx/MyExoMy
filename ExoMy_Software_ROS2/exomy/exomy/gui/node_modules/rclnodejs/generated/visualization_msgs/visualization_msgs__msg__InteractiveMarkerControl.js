// This file is automatically generated by Intel rclnodejs
//
// *** DO NOT EDIT directly
//
'use strict';
const ref = require('ref-napi');
const StructType = require('ref-struct-di')(ref);
const ArrayType = require('ref-array-di')(ref);
const primitiveTypes = require('../../rosidl_gen/primitive_types.js');
const deallocator = require('../../rosidl_gen/deallocator.js');
const translator = require('../../rosidl_gen/message_translator.js');
const StringWrapper = require('../../generated/std_msgs/std_msgs__msg__String.js');
const QuaternionWrapper = require('../../generated/geometry_msgs/geometry_msgs__msg__Quaternion.js');
const MarkerWrapper = require('../../generated/visualization_msgs/visualization_msgs__msg__Marker.js');
const InteractiveMarkerControlRefStruct = StructType({
  name: primitiveTypes.string,
  orientation: QuaternionWrapper.refObjectType,
  orientation_mode: primitiveTypes.uint8,
  interaction_mode: primitiveTypes.uint8,
  always_visible: primitiveTypes.bool,
  markers: MarkerWrapper.refObjectArrayType,
  independent_marker_orientation: primitiveTypes.bool,
  description: primitiveTypes.string,
});
const InteractiveMarkerControlRefArray = ArrayType(InteractiveMarkerControlRefStruct);
const InteractiveMarkerControlRefStructArray = StructType({
  data: InteractiveMarkerControlRefArray,
  size: ref.types.size_t,
  capacity: ref.types.size_t
});
// Define the wrapper class.
class InteractiveMarkerControlWrapper {
  constructor(other) {
    this._wrapperFields = {};
    if (typeof other === 'object' && other._refObject) {
      this._refObject = new InteractiveMarkerControlRefStruct(other._refObject.toObject());
      this._nameIntialized = true;
      this._wrapperFields.name =  new StringWrapper(other._wrapperFields.name);
      this._wrapperFields.orientation =  new QuaternionWrapper(other._wrapperFields.orientation);
      this._orientation_modeIntialized = true;
      this._interaction_modeIntialized = true;
      this._always_visibleIntialized = true;
      this._wrapperFields.markers = MarkerWrapper.createArray();
      this._wrapperFields.markers.copy(other._wrapperFields.markers);
      this._independent_marker_orientationIntialized = true;
      this._descriptionIntialized = true;
      this._wrapperFields.description =  new StringWrapper(other._wrapperFields.description);
    } else if (typeof other !== 'undefined') {
      this._initMembers();
      translator.constructFromPlanObject(this, other);
    } else {
      this._initMembers();
    }
    this.freeze();
  }
  _initMembers() {
    this._refObject = new InteractiveMarkerControlRefStruct();
    this._nameIntialized = false;
    this._wrapperFields.name = new StringWrapper();
    this._wrapperFields.orientation = new QuaternionWrapper();
    this._orientation_modeIntialized = false;
    this._interaction_modeIntialized = false;
    this._always_visibleIntialized = false;
    this._wrapperFields.markers = MarkerWrapper.createArray();
    this._independent_marker_orientationIntialized = false;
    this._descriptionIntialized = false;
    this._wrapperFields.description = new StringWrapper();
  }
  static createFromRefObject(refObject) {
    let self = new InteractiveMarkerControlWrapper();
    self.copyRefObject(refObject);
    return self;
  }
  static createArray() {
    return new InteractiveMarkerControlArrayWrapper;
  }
  static get ArrayType() {
    return InteractiveMarkerControlArrayWrapper;
  }
  static get refObjectArrayType() {
    return InteractiveMarkerControlRefStructArray
  }
  static get refObjectType() {
    return InteractiveMarkerControlRefStruct;
  }
  toRawROS() {
    this.freeze(true);
    return this._refObject.ref();
  }
  freeze(own = false, checkConsistency = false) {
    if (checkConsistency) {
      if (!this._nameIntialized) {
        throw new TypeError('Invalid argument: name in InteractiveMarkerControl');
      }
      if (!this._orientation_modeIntialized) {
        throw new TypeError('Invalid argument: orientation_mode in InteractiveMarkerControl');
      }
      if (!this._interaction_modeIntialized) {
        throw new TypeError('Invalid argument: interaction_mode in InteractiveMarkerControl');
      }
      if (!this._always_visibleIntialized) {
        throw new TypeError('Invalid argument: always_visible in InteractiveMarkerControl');
      }
      if (!this._independent_marker_orientationIntialized) {
        throw new TypeError('Invalid argument: independent_marker_orientation in InteractiveMarkerControl');
      }
      if (!this._descriptionIntialized) {
        throw new TypeError('Invalid argument: description in InteractiveMarkerControl');
      }
    }
    if (own) {
      this._wrapperFields.name.freeze(own, checkConsistency);
    }
    this._refObject.name = this._wrapperFields.name.refObject;
    this._wrapperFields.orientation.freeze(own, checkConsistency);
    this._refObject.orientation = this._wrapperFields.orientation.refObject;
    this._wrapperFields.markers.freeze(own, checkConsistency);
    this._refObject.markers = this._wrapperFields.markers.refObject;
    if (own) {
      this._wrapperFields.description.freeze(own, checkConsistency);
    }
    this._refObject.description = this._wrapperFields.description.refObject;
  }
  serialize() {
    this.freeze(false, true);
    return this._refObject.ref();
  }
  deserialize(refObject) {
    this._nameIntialized = true;
    this._wrapperFields.name.data = refObject.name.data;
    this._wrapperFields.orientation.copyRefObject(refObject.orientation);
    this._orientation_modeIntialized = true;
    this._refObject.orientation_mode = refObject.orientation_mode;
    this._interaction_modeIntialized = true;
    this._refObject.interaction_mode = refObject.interaction_mode;
    this._always_visibleIntialized = true;
    this._refObject.always_visible = refObject.always_visible;
    this._wrapperFields.markers.copyRefObject(refObject.markers);
    this._independent_marker_orientationIntialized = true;
    this._refObject.independent_marker_orientation = refObject.independent_marker_orientation;
    this._descriptionIntialized = true;
    this._wrapperFields.description.data = refObject.description.data;
  }
  toPlainObject(enableTypedArray) {
    return translator.toPlainObject(this, enableTypedArray);
  }
  static freeStruct(refObject) {
    StringWrapper.freeStruct(refObject.name);
    QuaternionWrapper.freeStruct(refObject.orientation);
    if (refObject.markers.size != 0) {
      MarkerWrapper.ArrayType.freeArray(refObject.markers);
      if (MarkerWrapper.ArrayType.useTypedArray) {
        // Do nothing, the v8 will take the ownership of the ArrayBuffer used by the typed array.
      } else {
        deallocator.freeStructMember(refObject.markers, MarkerWrapper.refObjectArrayType, 'data');
      }
    }
    StringWrapper.freeStruct(refObject.description);
  }
  static destoryRawROS(msg) {
    InteractiveMarkerControlWrapper.freeStruct(msg.refObject);
  }
  static type() {
    return {pkgName: 'visualization_msgs', subFolder: 'msg', interfaceName: 'InteractiveMarkerControl'};
  }
  static isPrimitive() {
    return false;
  }
  static get isROSArray() {
    return false;
  }
  get refObject() {
    return this._refObject;
  }
  get name() {
    if (!this._nameIntialized) {
      return undefined;
    }
    return this._wrapperFields.name.data;
  }
  set name(value) {
    this._nameIntialized = true;
    this._wrapperFields.name.data = value;
  }
  get orientation() {
    return this._wrapperFields.orientation;
  }
  set orientation(value) {
    if (value instanceof QuaternionWrapper) {
      this._wrapperFields.orientation.copy(value);
    } else {
      this._wrapperFields.orientation.copy(new QuaternionWrapper(value));
    }
  }
  get orientation_mode() {
    if (!this._orientation_modeIntialized) {
      return undefined;
    }
    return this._refObject.orientation_mode;
  }
  set orientation_mode(value) {
    this._orientation_modeIntialized = true;
    this._refObject.orientation_mode = value;
  }
  get interaction_mode() {
    if (!this._interaction_modeIntialized) {
      return undefined;
    }
    return this._refObject.interaction_mode;
  }
  set interaction_mode(value) {
    this._interaction_modeIntialized = true;
    this._refObject.interaction_mode = value;
  }
  get always_visible() {
    if (!this._always_visibleIntialized) {
      return undefined;
    }
    return this._refObject.always_visible;
  }
  set always_visible(value) {
    this._always_visibleIntialized = true;
    this._refObject.always_visible = value;
  }
  get markers() {
    return this._wrapperFields.markers;
  }
  set markers(value) {
    this._wrapperFields.markers.fill(value);
  }
  get independent_marker_orientation() {
    if (!this._independent_marker_orientationIntialized) {
      return undefined;
    }
    return this._refObject.independent_marker_orientation;
  }
  set independent_marker_orientation(value) {
    this._independent_marker_orientationIntialized = true;
    this._refObject.independent_marker_orientation = value;
  }
  get description() {
    if (!this._descriptionIntialized) {
      return undefined;
    }
    return this._wrapperFields.description.data;
  }
  set description(value) {
    this._descriptionIntialized = true;
    this._wrapperFields.description.data = value;
  }
  copyRefObject(refObject) {
    this._refObject = new InteractiveMarkerControlRefStruct(refObject.toObject());
    this._nameIntialized = true;
    this._wrapperFields.name.copyRefObject(this._refObject.name);
    this._wrapperFields.orientation.copyRefObject(this._refObject.orientation);
    this._orientation_modeIntialized = true;
    this._interaction_modeIntialized = true;
    this._always_visibleIntialized = true;
    this._wrapperFields.markers.copyRefObject(this._refObject.markers);
    this._independent_marker_orientationIntialized = true;
    this._descriptionIntialized = true;
    this._wrapperFields.description.copyRefObject(this._refObject.description);
  }
  copy(other) {
    this._refObject = new InteractiveMarkerControlRefStruct(other._refObject.toObject());
    this._nameIntialized = true;
    this._wrapperFields.name.copy(other._wrapperFields.name);
    this._wrapperFields.orientation.copy(other._wrapperFields.orientation);
    this._orientation_modeIntialized = true;
    this._interaction_modeIntialized = true;
    this._always_visibleIntialized = true;
    this._wrapperFields.markers.copy(other._wrapperFields.markers);
    this._independent_marker_orientationIntialized = true;
    this._descriptionIntialized = true;
    this._wrapperFields.description.copy(other._wrapperFields.description);
  }
  static get classType() {
    return InteractiveMarkerControlWrapper;
  }
  static get ROSMessageDef() {
    return {"constants":[{"type":"uint8","name":"INHERIT","value":0},{"type":"uint8","name":"FIXED","value":1},{"type":"uint8","name":"VIEW_FACING","value":2},{"type":"uint8","name":"NONE","value":0},{"type":"uint8","name":"MENU","value":1},{"type":"uint8","name":"BUTTON","value":2},{"type":"uint8","name":"MOVE_AXIS","value":3},{"type":"uint8","name":"MOVE_PLANE","value":4},{"type":"uint8","name":"ROTATE_AXIS","value":5},{"type":"uint8","name":"MOVE_ROTATE","value":6},{"type":"uint8","name":"MOVE_3D","value":7},{"type":"uint8","name":"ROTATE_3D","value":8},{"type":"uint8","name":"MOVE_ROTATE_3D","value":9}],"fields":[{"name":"name","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"string","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"orientation","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":"geometry_msgs","type":"Quaternion","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"orientation_mode","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint8","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"interaction_mode","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint8","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"always_visible","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"bool","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"markers","type":{"isArray":true,"arraySize":null,"isUpperBound":false,"isDynamicArray":true,"isFixedSizeArray":null,"pkgName":"visualization_msgs","type":"Marker","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"independent_marker_orientation","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"bool","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"description","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"string","stringUpperBound":null,"isPrimitiveType":true},"default_value":null}],"baseType":{"pkgName":"visualization_msgs","type":"InteractiveMarkerControl","stringUpperBound":null,"isPrimitiveType":false},"msgName":"InteractiveMarkerControl"};
  }
  hasMember(name) {
    let memberNames = ["name","orientation","orientation_mode","interaction_mode","always_visible","markers","independent_marker_orientation","description"];
    return memberNames.indexOf(name) !== -1;
  }
}
// Define the wrapper of array class.
class InteractiveMarkerControlArrayWrapper {
  constructor(size = 0) {
    this._resize(size);
  }
  toRawROS() {
    return this._refObject.ref();
  }
  fill(values) {
    const length = values.length;
    this._resize(length);
    values.forEach((value, index) => {
      if (value instanceof InteractiveMarkerControlWrapper) {
        this._wrappers[index].copy(value);
      } else {
        this._wrappers[index] = new InteractiveMarkerControlWrapper(value);
      }
    });
  }
  // Put all data currently stored in `this._wrappers` into `this._refObject`
  freeze(own) {
    this._wrappers.forEach((wrapper, index) => {
      wrapper.freeze(own);
      this._refArray[index] = wrapper.refObject;
    });
    this._refObject.size = this._wrappers.length;
    this._refObject.capacity = this._wrappers.length;
    if (this._refObject.capacity === 0) {
      this._refObject.data = null
    } else {
    this._refObject.data = this._refArray.buffer;
    }
  }
  get refObject() {
    return this._refObject;
  }
  get data() {
    return this._wrappers;
  }
  get size() {
    return this._wrappers.length;
  }
  set size(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to InteractiveMarkerControlArrayWrapper.size setter');
      return;
    }
    return this._resize(value);
  }
  get capacity() {
    return this._wrappers.length;
  }
  set capacity(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to InteractiveMarkerControlArrayWrapper.capacity setter');
    }
    return this._resize(value);
  }
  get refObject() {
    return this._refObject;
  }
  _resize(size) {
    if (size < 0) {
      throw new RangeError('Invalid argument: should provide a positive number');
      return;
    }
    this._refArray = new InteractiveMarkerControlRefArray(size);
    this._refObject = new InteractiveMarkerControlRefStructArray();
    this._refObject.size = size;
    this._refObject.capacity = size;
    this._wrappers = new Array();
    for (let i = 0; i < size; i++) {
      this._wrappers.push(new InteractiveMarkerControlWrapper());
    }
  }
  // Copy all data from `this._refObject` into `this._wrappers`
  copyRefObject(refObject) {
    this._refObject = refObject;
    let refObjectArray = this._refObject.data;
    refObjectArray.length = this._refObject.size;
    this._resize(this._refObject.size);
    for (let index = 0; index < this._refObject.size; index++) {
      this._wrappers[index].copyRefObject(refObjectArray[index]);
    }
  }
  copy(other) {
    if (! (other instanceof InteractiveMarkerControlArrayWrapper)) {
      throw new TypeError('Invalid argument: should provide "InteractiveMarkerControlArrayWrapper".');
    }
    this._resize(other.size);
    // Array deep copy
    other._wrappers.forEach((wrapper, index) => {
      this._wrappers[index].copy(wrapper);
    });
  }
  static freeArray(refObject) {
    let refObjectArray = refObject.data;
    refObjectArray.length = refObject.size;
    for (let index = 0; index < refObject.size; index++) {
      InteractiveMarkerControlWrapper.freeStruct(refObjectArray[index]);
    }
  }
  static get elementType() {
    return InteractiveMarkerControlWrapper;
  }
  static get isROSArray() {
    return true;
  }
  static get useTypedArray() {
    return false;
  }
  get classType() {
    return InteractiveMarkerControlArrayWrapper;
  }
}
// Define constants (13 in total)
Object.defineProperty(InteractiveMarkerControlWrapper, "INHERIT", {value: 0, writable: false, enumerable: true, configurable: true});
Object.defineProperty(InteractiveMarkerControlWrapper, "FIXED", {value: 1, writable: false, enumerable: true, configurable: true});
Object.defineProperty(InteractiveMarkerControlWrapper, "VIEW_FACING", {value: 2, writable: false, enumerable: true, configurable: true});
Object.defineProperty(InteractiveMarkerControlWrapper, "NONE", {value: 0, writable: false, enumerable: true, configurable: true});
Object.defineProperty(InteractiveMarkerControlWrapper, "MENU", {value: 1, writable: false, enumerable: true, configurable: true});
Object.defineProperty(InteractiveMarkerControlWrapper, "BUTTON", {value: 2, writable: false, enumerable: true, configurable: true});
Object.defineProperty(InteractiveMarkerControlWrapper, "MOVE_AXIS", {value: 3, writable: false, enumerable: true, configurable: true});
Object.defineProperty(InteractiveMarkerControlWrapper, "MOVE_PLANE", {value: 4, writable: false, enumerable: true, configurable: true});
Object.defineProperty(InteractiveMarkerControlWrapper, "ROTATE_AXIS", {value: 5, writable: false, enumerable: true, configurable: true});
Object.defineProperty(InteractiveMarkerControlWrapper, "MOVE_ROTATE", {value: 6, writable: false, enumerable: true, configurable: true});
Object.defineProperty(InteractiveMarkerControlWrapper, "MOVE_3D", {value: 7, writable: false, enumerable: true, configurable: true});
Object.defineProperty(InteractiveMarkerControlWrapper, "ROTATE_3D", {value: 8, writable: false, enumerable: true, configurable: true});
Object.defineProperty(InteractiveMarkerControlWrapper, "MOVE_ROTATE_3D", {value: 9, writable: false, enumerable: true, configurable: true});
module.exports = InteractiveMarkerControlWrapper;
/*
 * The following is the original spec object coming from parser:
{
  "constants": [
    {
      "type": "uint8",
      "name": "INHERIT",
      "value": 0
    },
    {
      "type": "uint8",
      "name": "FIXED",
      "value": 1
    },
    {
      "type": "uint8",
      "name": "VIEW_FACING",
      "value": 2
    },
    {
      "type": "uint8",
      "name": "NONE",
      "value": 0
    },
    {
      "type": "uint8",
      "name": "MENU",
      "value": 1
    },
    {
      "type": "uint8",
      "name": "BUTTON",
      "value": 2
    },
    {
      "type": "uint8",
      "name": "MOVE_AXIS",
      "value": 3
    },
    {
      "type": "uint8",
      "name": "MOVE_PLANE",
      "value": 4
    },
    {
      "type": "uint8",
      "name": "ROTATE_AXIS",
      "value": 5
    },
    {
      "type": "uint8",
      "name": "MOVE_ROTATE",
      "value": 6
    },
    {
      "type": "uint8",
      "name": "MOVE_3D",
      "value": 7
    },
    {
      "type": "uint8",
      "name": "ROTATE_3D",
      "value": 8
    },
    {
      "type": "uint8",
      "name": "MOVE_ROTATE_3D",
      "value": 9
    }
  ],
  "fields": [
    {
      "name": "name",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "string",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "orientation",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": "geometry_msgs",
        "type": "Quaternion",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "orientation_mode",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint8",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "interaction_mode",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint8",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "always_visible",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "bool",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "markers",
      "type": {
        "isArray": true,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": true,
        "isFixedSizeArray": null,
        "pkgName": "visualization_msgs",
        "type": "Marker",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "independent_marker_orientation",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "bool",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "description",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "string",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    }
  ],
  "baseType": {
    "pkgName": "visualization_msgs",
    "type": "InteractiveMarkerControl",
    "stringUpperBound": null,
    "isPrimitiveType": false
  },
  "msgName": "InteractiveMarkerControl"
}
*/
