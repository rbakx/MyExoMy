// This file is automatically generated by Intel rclnodejs
//
// *** DO NOT EDIT directly
//
'use strict';
const ref = require('ref-napi');
const StructType = require('ref-struct-di')(ref);
const ArrayType = require('ref-array-di')(ref);
const primitiveTypes = require('../../rosidl_gen/primitive_types.js');
const deallocator = require('../../rosidl_gen/deallocator.js');
const translator = require('../../rosidl_gen/message_translator.js');
const Float64Wrapper = require('../../generated/std_msgs/std_msgs__msg__Float64.js');
const SolidPrimitiveRefStruct = StructType({
  type: primitiveTypes.uint8,
  dimensions: Float64Wrapper.refObjectArrayType,
});
const SolidPrimitiveRefArray = ArrayType(SolidPrimitiveRefStruct);
const SolidPrimitiveRefStructArray = StructType({
  data: SolidPrimitiveRefArray,
  size: ref.types.size_t,
  capacity: ref.types.size_t
});
// Define the wrapper class.
class SolidPrimitiveWrapper {
  constructor(other) {
    this._wrapperFields = {};
    if (typeof other === 'object' && other._refObject) {
      this._refObject = new SolidPrimitiveRefStruct(other._refObject.toObject());
      this._typeIntialized = true;
      this._wrapperFields.dimensions = Float64Wrapper.createArray();
      this._wrapperFields.dimensions.copy(other._wrapperFields.dimensions);
    } else if (typeof other !== 'undefined') {
      this._initMembers();
      translator.constructFromPlanObject(this, other);
    } else {
      this._initMembers();
    }
    this.freeze();
  }
  _initMembers() {
    this._refObject = new SolidPrimitiveRefStruct();
    this._typeIntialized = false;
    this._wrapperFields.dimensions = Float64Wrapper.createArray();
  }
  static createFromRefObject(refObject) {
    let self = new SolidPrimitiveWrapper();
    self.copyRefObject(refObject);
    return self;
  }
  static createArray() {
    return new SolidPrimitiveArrayWrapper;
  }
  static get ArrayType() {
    return SolidPrimitiveArrayWrapper;
  }
  static get refObjectArrayType() {
    return SolidPrimitiveRefStructArray
  }
  static get refObjectType() {
    return SolidPrimitiveRefStruct;
  }
  toRawROS() {
    this.freeze(true);
    return this._refObject.ref();
  }
  freeze(own = false, checkConsistency = false) {
    if (checkConsistency) {
      if (!this._typeIntialized) {
        throw new TypeError('Invalid argument: type in SolidPrimitive');
      }
    }
    this._wrapperFields.dimensions.freeze(own, checkConsistency);
    this._refObject.dimensions = this._wrapperFields.dimensions.refObject;
    if (own) {
      this._wrapperFields.dimensions.fill(Float64Array.from([]));
      this._wrapperFields.dimensions.freeze(own, checkConsistency);
      this._refObject.dimensions = this._wrapperFields.dimensions.refObject;
    }
  }
  serialize() {
    this.freeze(false, true);
    return this._refObject.ref();
  }
  deserialize(refObject) {
    this._typeIntialized = true;
    this._refObject.type = refObject.type;
    this._wrapperFields.dimensions.copyRefObject(refObject.dimensions);
  }
  toPlainObject(enableTypedArray) {
    return translator.toPlainObject(this, enableTypedArray);
  }
  static freeStruct(refObject) {
    if (refObject.dimensions.size != 0) {
      Float64Wrapper.ArrayType.freeArray(refObject.dimensions);
      if (Float64Wrapper.ArrayType.useTypedArray) {
        // Do nothing, the v8 will take the ownership of the ArrayBuffer used by the typed array.
      } else {
        deallocator.freeStructMember(refObject.dimensions, Float64Wrapper.refObjectArrayType, 'data');
      }
    }
  }
  static destoryRawROS(msg) {
    SolidPrimitiveWrapper.freeStruct(msg.refObject);
  }
  static type() {
    return {pkgName: 'shape_msgs', subFolder: 'msg', interfaceName: 'SolidPrimitive'};
  }
  static isPrimitive() {
    return false;
  }
  static get isROSArray() {
    return false;
  }
  get refObject() {
    return this._refObject;
  }
  get type() {
    if (!this._typeIntialized) {
      return undefined;
    }
    return this._refObject.type;
  }
  set type(value) {
    this._typeIntialized = true;
    this._refObject.type = value;
  }
  get dimensions() {
    return this._wrapperFields['dimensions'].data;
  }
  set dimensions(value) {
    if (value.length > 3) {
      throw new RangeError('The length of array dimensions must be <= 3.');
    }
    this._wrapperFields['dimensions'].fill(value);
  }
  copyRefObject(refObject) {
    this._refObject = new SolidPrimitiveRefStruct(refObject.toObject());
    this._typeIntialized = true;
    this._wrapperFields.dimensions.copyRefObject(this._refObject.dimensions);
  }
  copy(other) {
    this._refObject = new SolidPrimitiveRefStruct(other._refObject.toObject());
    this._typeIntialized = true;
    this._wrapperFields.dimensions.copy(other._wrapperFields.dimensions);
  }
  static get classType() {
    return SolidPrimitiveWrapper;
  }
  static get ROSMessageDef() {
    return {"constants":[{"type":"uint8","name":"BOX","value":1},{"type":"uint8","name":"SPHERE","value":2},{"type":"uint8","name":"CYLINDER","value":3},{"type":"uint8","name":"CONE","value":4},{"type":"uint8","name":"BOX_X","value":0},{"type":"uint8","name":"BOX_Y","value":1},{"type":"uint8","name":"BOX_Z","value":2},{"type":"uint8","name":"SPHERE_RADIUS","value":0},{"type":"uint8","name":"CYLINDER_HEIGHT","value":0},{"type":"uint8","name":"CYLINDER_RADIUS","value":1},{"type":"uint8","name":"CONE_HEIGHT","value":0},{"type":"uint8","name":"CONE_RADIUS","value":1}],"fields":[{"name":"type","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint8","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"dimensions","type":{"isArray":true,"arraySize":3,"isUpperBound":true,"isDynamicArray":true,"isFixedSizeArray":false,"pkgName":null,"type":"float64","stringUpperBound":null,"isPrimitiveType":true},"default_value":null}],"baseType":{"pkgName":"shape_msgs","type":"SolidPrimitive","stringUpperBound":null,"isPrimitiveType":false},"msgName":"SolidPrimitive"};
  }
  hasMember(name) {
    let memberNames = ["type","dimensions"];
    return memberNames.indexOf(name) !== -1;
  }
}
// Define the wrapper of array class.
class SolidPrimitiveArrayWrapper {
  constructor(size = 0) {
    this._resize(size);
  }
  toRawROS() {
    return this._refObject.ref();
  }
  fill(values) {
    const length = values.length;
    this._resize(length);
    values.forEach((value, index) => {
      if (value instanceof SolidPrimitiveWrapper) {
        this._wrappers[index].copy(value);
      } else {
        this._wrappers[index] = new SolidPrimitiveWrapper(value);
      }
    });
  }
  // Put all data currently stored in `this._wrappers` into `this._refObject`
  freeze(own) {
    this._wrappers.forEach((wrapper, index) => {
      wrapper.freeze(own);
      this._refArray[index] = wrapper.refObject;
    });
    this._refObject.size = this._wrappers.length;
    this._refObject.capacity = this._wrappers.length;
    if (this._refObject.capacity === 0) {
      this._refObject.data = null
    } else {
    this._refObject.data = this._refArray.buffer;
    }
  }
  get refObject() {
    return this._refObject;
  }
  get data() {
    return this._wrappers;
  }
  get size() {
    return this._wrappers.length;
  }
  set size(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to SolidPrimitiveArrayWrapper.size setter');
      return;
    }
    return this._resize(value);
  }
  get capacity() {
    return this._wrappers.length;
  }
  set capacity(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to SolidPrimitiveArrayWrapper.capacity setter');
    }
    return this._resize(value);
  }
  get refObject() {
    return this._refObject;
  }
  _resize(size) {
    if (size < 0) {
      throw new RangeError('Invalid argument: should provide a positive number');
      return;
    }
    this._refArray = new SolidPrimitiveRefArray(size);
    this._refObject = new SolidPrimitiveRefStructArray();
    this._refObject.size = size;
    this._refObject.capacity = size;
    this._wrappers = new Array();
    for (let i = 0; i < size; i++) {
      this._wrappers.push(new SolidPrimitiveWrapper());
    }
  }
  // Copy all data from `this._refObject` into `this._wrappers`
  copyRefObject(refObject) {
    this._refObject = refObject;
    let refObjectArray = this._refObject.data;
    refObjectArray.length = this._refObject.size;
    this._resize(this._refObject.size);
    for (let index = 0; index < this._refObject.size; index++) {
      this._wrappers[index].copyRefObject(refObjectArray[index]);
    }
  }
  copy(other) {
    if (! (other instanceof SolidPrimitiveArrayWrapper)) {
      throw new TypeError('Invalid argument: should provide "SolidPrimitiveArrayWrapper".');
    }
    this._resize(other.size);
    // Array deep copy
    other._wrappers.forEach((wrapper, index) => {
      this._wrappers[index].copy(wrapper);
    });
  }
  static freeArray(refObject) {
    let refObjectArray = refObject.data;
    refObjectArray.length = refObject.size;
    for (let index = 0; index < refObject.size; index++) {
      SolidPrimitiveWrapper.freeStruct(refObjectArray[index]);
    }
  }
  static get elementType() {
    return SolidPrimitiveWrapper;
  }
  static get isROSArray() {
    return true;
  }
  static get useTypedArray() {
    return false;
  }
  get classType() {
    return SolidPrimitiveArrayWrapper;
  }
}
// Define constants (12 in total)
Object.defineProperty(SolidPrimitiveWrapper, "BOX", {value: 1, writable: false, enumerable: true, configurable: true});
Object.defineProperty(SolidPrimitiveWrapper, "SPHERE", {value: 2, writable: false, enumerable: true, configurable: true});
Object.defineProperty(SolidPrimitiveWrapper, "CYLINDER", {value: 3, writable: false, enumerable: true, configurable: true});
Object.defineProperty(SolidPrimitiveWrapper, "CONE", {value: 4, writable: false, enumerable: true, configurable: true});
Object.defineProperty(SolidPrimitiveWrapper, "BOX_X", {value: 0, writable: false, enumerable: true, configurable: true});
Object.defineProperty(SolidPrimitiveWrapper, "BOX_Y", {value: 1, writable: false, enumerable: true, configurable: true});
Object.defineProperty(SolidPrimitiveWrapper, "BOX_Z", {value: 2, writable: false, enumerable: true, configurable: true});
Object.defineProperty(SolidPrimitiveWrapper, "SPHERE_RADIUS", {value: 0, writable: false, enumerable: true, configurable: true});
Object.defineProperty(SolidPrimitiveWrapper, "CYLINDER_HEIGHT", {value: 0, writable: false, enumerable: true, configurable: true});
Object.defineProperty(SolidPrimitiveWrapper, "CYLINDER_RADIUS", {value: 1, writable: false, enumerable: true, configurable: true});
Object.defineProperty(SolidPrimitiveWrapper, "CONE_HEIGHT", {value: 0, writable: false, enumerable: true, configurable: true});
Object.defineProperty(SolidPrimitiveWrapper, "CONE_RADIUS", {value: 1, writable: false, enumerable: true, configurable: true});
module.exports = SolidPrimitiveWrapper;
/*
 * The following is the original spec object coming from parser:
{
  "constants": [
    {
      "type": "uint8",
      "name": "BOX",
      "value": 1
    },
    {
      "type": "uint8",
      "name": "SPHERE",
      "value": 2
    },
    {
      "type": "uint8",
      "name": "CYLINDER",
      "value": 3
    },
    {
      "type": "uint8",
      "name": "CONE",
      "value": 4
    },
    {
      "type": "uint8",
      "name": "BOX_X",
      "value": 0
    },
    {
      "type": "uint8",
      "name": "BOX_Y",
      "value": 1
    },
    {
      "type": "uint8",
      "name": "BOX_Z",
      "value": 2
    },
    {
      "type": "uint8",
      "name": "SPHERE_RADIUS",
      "value": 0
    },
    {
      "type": "uint8",
      "name": "CYLINDER_HEIGHT",
      "value": 0
    },
    {
      "type": "uint8",
      "name": "CYLINDER_RADIUS",
      "value": 1
    },
    {
      "type": "uint8",
      "name": "CONE_HEIGHT",
      "value": 0
    },
    {
      "type": "uint8",
      "name": "CONE_RADIUS",
      "value": 1
    }
  ],
  "fields": [
    {
      "name": "type",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint8",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "dimensions",
      "type": {
        "isArray": true,
        "arraySize": 3,
        "isUpperBound": true,
        "isDynamicArray": true,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float64",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    }
  ],
  "baseType": {
    "pkgName": "shape_msgs",
    "type": "SolidPrimitive",
    "stringUpperBound": null,
    "isPrimitiveType": false
  },
  "msgName": "SolidPrimitive"
}
*/
