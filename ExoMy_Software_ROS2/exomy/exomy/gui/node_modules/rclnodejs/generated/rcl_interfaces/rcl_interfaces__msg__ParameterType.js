// This file is automatically generated by Intel rclnodejs
//
// *** DO NOT EDIT directly
//
'use strict';
const ref = require('ref-napi');
const StructType = require('ref-struct-di')(ref);
const ArrayType = require('ref-array-di')(ref);
const primitiveTypes = require('../../rosidl_gen/primitive_types.js');
const deallocator = require('../../rosidl_gen/deallocator.js');
const translator = require('../../rosidl_gen/message_translator.js');
const ParameterTypeRefStruct = StructType({
  _dummy: primitiveTypes.bool,
});
const ParameterTypeRefArray = ArrayType(ParameterTypeRefStruct);
const ParameterTypeRefStructArray = StructType({
  data: ParameterTypeRefArray,
  size: ref.types.size_t,
  capacity: ref.types.size_t
});
// Define the wrapper class.
class ParameterTypeWrapper {
  constructor(other) {
    this._wrapperFields = {};
    if (typeof other === 'object' && other._refObject) {
      this._refObject = new ParameterTypeRefStruct(other._refObject.toObject());
      this.__dummyIntialized = true;
    } else if (typeof other !== 'undefined') {
      this._initMembers();
      translator.constructFromPlanObject(this, other);
    } else {
      this._initMembers();
    }
    this.freeze();
  }
  _initMembers() {
    this._refObject = new ParameterTypeRefStruct();
    this.__dummyIntialized = true;
  }
  static createFromRefObject(refObject) {
    let self = new ParameterTypeWrapper();
    self.copyRefObject(refObject);
    return self;
  }
  static createArray() {
    return new ParameterTypeArrayWrapper;
  }
  static get ArrayType() {
    return ParameterTypeArrayWrapper;
  }
  static get refObjectArrayType() {
    return ParameterTypeRefStructArray
  }
  static get refObjectType() {
    return ParameterTypeRefStruct;
  }
  toRawROS() {
    this.freeze(true);
    return this._refObject.ref();
  }
  freeze(own = false, checkConsistency = false) {
    if (checkConsistency) {
      if (!this.__dummyIntialized) {
        throw new TypeError('Invalid argument: _dummy in ParameterType');
      }
    }
  }
  serialize() {
    this.freeze(false, true);
    return this._refObject.ref();
  }
  deserialize(refObject) {
    this.__dummyIntialized = true;
    this._refObject._dummy = refObject._dummy;
  }
  toPlainObject(enableTypedArray) {
    return translator.toPlainObject(this, enableTypedArray);
  }
  static freeStruct(refObject) {
  }
  static destoryRawROS(msg) {
    ParameterTypeWrapper.freeStruct(msg.refObject);
  }
  static type() {
    return {pkgName: 'rcl_interfaces', subFolder: 'msg', interfaceName: 'ParameterType'};
  }
  static isPrimitive() {
    return false;
  }
  static get isROSArray() {
    return false;
  }
  get refObject() {
    return this._refObject;
  }
  get _dummy() {
    if (!this.__dummyIntialized) {
      return undefined;
    }
    return this._refObject._dummy;
  }
  set _dummy(value) {
    this.__dummyIntialized = true;
    this._refObject._dummy = value;
  }
  copyRefObject(refObject) {
    this._refObject = new ParameterTypeRefStruct(refObject.toObject());
    this.__dummyIntialized = true;
  }
  copy(other) {
    this._refObject = new ParameterTypeRefStruct(other._refObject.toObject());
    this.__dummyIntialized = true;
  }
  static get classType() {
    return ParameterTypeWrapper;
  }
  static get ROSMessageDef() {
    return {"constants":[{"type":"uint8","name":"PARAMETER_NOT_SET","value":0},{"type":"uint8","name":"PARAMETER_BOOL","value":1},{"type":"uint8","name":"PARAMETER_INTEGER","value":2},{"type":"uint8","name":"PARAMETER_DOUBLE","value":3},{"type":"uint8","name":"PARAMETER_STRING","value":4},{"type":"uint8","name":"PARAMETER_BYTE_ARRAY","value":5},{"type":"uint8","name":"PARAMETER_BOOL_ARRAY","value":6},{"type":"uint8","name":"PARAMETER_INTEGER_ARRAY","value":7},{"type":"uint8","name":"PARAMETER_DOUBLE_ARRAY","value":8},{"type":"uint8","name":"PARAMETER_STRING_ARRAY","value":9}],"fields":[],"baseType":{"pkgName":"rcl_interfaces","type":"ParameterType","stringUpperBound":null,"isPrimitiveType":false},"msgName":"ParameterType"};
  }
  hasMember(name) {
    let memberNames = ["_dummy"];
    return memberNames.indexOf(name) !== -1;
  }
}
// Define the wrapper of array class.
class ParameterTypeArrayWrapper {
  constructor(size = 0) {
    this._resize(size);
  }
  toRawROS() {
    return this._refObject.ref();
  }
  fill(values) {
    const length = values.length;
    this._resize(length);
    values.forEach((value, index) => {
      if (value instanceof ParameterTypeWrapper) {
        this._wrappers[index].copy(value);
      } else {
        this._wrappers[index] = new ParameterTypeWrapper(value);
      }
    });
  }
  // Put all data currently stored in `this._wrappers` into `this._refObject`
  freeze(own) {
    this._wrappers.forEach((wrapper, index) => {
      wrapper.freeze(own);
      this._refArray[index] = wrapper.refObject;
    });
    this._refObject.size = this._wrappers.length;
    this._refObject.capacity = this._wrappers.length;
    if (this._refObject.capacity === 0) {
      this._refObject.data = null
    } else {
    this._refObject.data = this._refArray.buffer;
    }
  }
  get refObject() {
    return this._refObject;
  }
  get data() {
    return this._wrappers;
  }
  get size() {
    return this._wrappers.length;
  }
  set size(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to ParameterTypeArrayWrapper.size setter');
      return;
    }
    return this._resize(value);
  }
  get capacity() {
    return this._wrappers.length;
  }
  set capacity(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to ParameterTypeArrayWrapper.capacity setter');
    }
    return this._resize(value);
  }
  get refObject() {
    return this._refObject;
  }
  _resize(size) {
    if (size < 0) {
      throw new RangeError('Invalid argument: should provide a positive number');
      return;
    }
    this._refArray = new ParameterTypeRefArray(size);
    this._refObject = new ParameterTypeRefStructArray();
    this._refObject.size = size;
    this._refObject.capacity = size;
    this._wrappers = new Array();
    for (let i = 0; i < size; i++) {
      this._wrappers.push(new ParameterTypeWrapper());
    }
  }
  // Copy all data from `this._refObject` into `this._wrappers`
  copyRefObject(refObject) {
    this._refObject = refObject;
    let refObjectArray = this._refObject.data;
    refObjectArray.length = this._refObject.size;
    this._resize(this._refObject.size);
    for (let index = 0; index < this._refObject.size; index++) {
      this._wrappers[index].copyRefObject(refObjectArray[index]);
    }
  }
  copy(other) {
    if (! (other instanceof ParameterTypeArrayWrapper)) {
      throw new TypeError('Invalid argument: should provide "ParameterTypeArrayWrapper".');
    }
    this._resize(other.size);
    // Array deep copy
    other._wrappers.forEach((wrapper, index) => {
      this._wrappers[index].copy(wrapper);
    });
  }
  static freeArray(refObject) {
    let refObjectArray = refObject.data;
    refObjectArray.length = refObject.size;
    for (let index = 0; index < refObject.size; index++) {
      ParameterTypeWrapper.freeStruct(refObjectArray[index]);
    }
  }
  static get elementType() {
    return ParameterTypeWrapper;
  }
  static get isROSArray() {
    return true;
  }
  static get useTypedArray() {
    return false;
  }
  get classType() {
    return ParameterTypeArrayWrapper;
  }
}
// Define constants (10 in total)
Object.defineProperty(ParameterTypeWrapper, "PARAMETER_NOT_SET", {value: 0, writable: false, enumerable: true, configurable: true});
Object.defineProperty(ParameterTypeWrapper, "PARAMETER_BOOL", {value: 1, writable: false, enumerable: true, configurable: true});
Object.defineProperty(ParameterTypeWrapper, "PARAMETER_INTEGER", {value: 2, writable: false, enumerable: true, configurable: true});
Object.defineProperty(ParameterTypeWrapper, "PARAMETER_DOUBLE", {value: 3, writable: false, enumerable: true, configurable: true});
Object.defineProperty(ParameterTypeWrapper, "PARAMETER_STRING", {value: 4, writable: false, enumerable: true, configurable: true});
Object.defineProperty(ParameterTypeWrapper, "PARAMETER_BYTE_ARRAY", {value: 5, writable: false, enumerable: true, configurable: true});
Object.defineProperty(ParameterTypeWrapper, "PARAMETER_BOOL_ARRAY", {value: 6, writable: false, enumerable: true, configurable: true});
Object.defineProperty(ParameterTypeWrapper, "PARAMETER_INTEGER_ARRAY", {value: 7, writable: false, enumerable: true, configurable: true});
Object.defineProperty(ParameterTypeWrapper, "PARAMETER_DOUBLE_ARRAY", {value: 8, writable: false, enumerable: true, configurable: true});
Object.defineProperty(ParameterTypeWrapper, "PARAMETER_STRING_ARRAY", {value: 9, writable: false, enumerable: true, configurable: true});
module.exports = ParameterTypeWrapper;
/*
 * The following is the original spec object coming from parser:
{
  "constants": [
    {
      "type": "uint8",
      "name": "PARAMETER_NOT_SET",
      "value": 0
    },
    {
      "type": "uint8",
      "name": "PARAMETER_BOOL",
      "value": 1
    },
    {
      "type": "uint8",
      "name": "PARAMETER_INTEGER",
      "value": 2
    },
    {
      "type": "uint8",
      "name": "PARAMETER_DOUBLE",
      "value": 3
    },
    {
      "type": "uint8",
      "name": "PARAMETER_STRING",
      "value": 4
    },
    {
      "type": "uint8",
      "name": "PARAMETER_BYTE_ARRAY",
      "value": 5
    },
    {
      "type": "uint8",
      "name": "PARAMETER_BOOL_ARRAY",
      "value": 6
    },
    {
      "type": "uint8",
      "name": "PARAMETER_INTEGER_ARRAY",
      "value": 7
    },
    {
      "type": "uint8",
      "name": "PARAMETER_DOUBLE_ARRAY",
      "value": 8
    },
    {
      "type": "uint8",
      "name": "PARAMETER_STRING_ARRAY",
      "value": 9
    }
  ],
  "fields": [],
  "baseType": {
    "pkgName": "rcl_interfaces",
    "type": "ParameterType",
    "stringUpperBound": null,
    "isPrimitiveType": false
  },
  "msgName": "ParameterType"
}
*/
