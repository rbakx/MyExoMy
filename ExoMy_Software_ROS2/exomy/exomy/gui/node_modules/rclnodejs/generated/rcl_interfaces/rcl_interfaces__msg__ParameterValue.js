// This file is automatically generated by Intel rclnodejs
//
// *** DO NOT EDIT directly
//
'use strict';
const ref = require('ref-napi');
const StructType = require('ref-struct-di')(ref);
const ArrayType = require('ref-array-di')(ref);
const primitiveTypes = require('../../rosidl_gen/primitive_types.js');
const deallocator = require('../../rosidl_gen/deallocator.js');
const translator = require('../../rosidl_gen/message_translator.js');
const StringWrapper = require('../../generated/std_msgs/std_msgs__msg__String.js');
const ByteWrapper = require('../../generated/std_msgs/std_msgs__msg__Byte.js');
const BoolWrapper = require('../../generated/std_msgs/std_msgs__msg__Bool.js');
const Int64Wrapper = require('../../generated/std_msgs/std_msgs__msg__Int64.js');
const Float64Wrapper = require('../../generated/std_msgs/std_msgs__msg__Float64.js');
const ParameterValueRefStruct = StructType({
  type: primitiveTypes.uint8,
  bool_value: primitiveTypes.bool,
  integer_value: primitiveTypes.int64,
  double_value: primitiveTypes.float64,
  string_value: primitiveTypes.string,
  byte_array_value: ByteWrapper.refObjectArrayType,
  bool_array_value: BoolWrapper.refObjectArrayType,
  integer_array_value: Int64Wrapper.refObjectArrayType,
  double_array_value: Float64Wrapper.refObjectArrayType,
  string_array_value: StringWrapper.refObjectArrayType,
});
const ParameterValueRefArray = ArrayType(ParameterValueRefStruct);
const ParameterValueRefStructArray = StructType({
  data: ParameterValueRefArray,
  size: ref.types.size_t,
  capacity: ref.types.size_t
});
// Define the wrapper class.
class ParameterValueWrapper {
  constructor(other) {
    this._wrapperFields = {};
    this._bool_array_valueArray = [];
    this._integer_array_valueArray = [];
    this._string_array_valueArray = [];
    if (typeof other === 'object' && other._refObject) {
      this._refObject = new ParameterValueRefStruct(other._refObject.toObject());
      this._typeIntialized = true;
      this._bool_valueIntialized = true;
      this._integer_valueIntialized = true;
      this._double_valueIntialized = true;
      this._string_valueIntialized = true;
      this._wrapperFields.string_value =  new StringWrapper(other._wrapperFields.string_value);
      this._wrapperFields.byte_array_value = ByteWrapper.createArray();
      this._wrapperFields.byte_array_value.copy(other._wrapperFields.byte_array_value);
      this._wrapperFields.bool_array_value = BoolWrapper.createArray();
      this._wrapperFields.bool_array_value.copy(other._wrapperFields.bool_array_value);
      this.bool_array_value = other.bool_array_value;
      this._wrapperFields.integer_array_value = Int64Wrapper.createArray();
      this._wrapperFields.integer_array_value.copy(other._wrapperFields.integer_array_value);
      this.integer_array_value = other.integer_array_value;
      this._wrapperFields.double_array_value = Float64Wrapper.createArray();
      this._wrapperFields.double_array_value.copy(other._wrapperFields.double_array_value);
      this._wrapperFields.string_array_value = StringWrapper.createArray();
      this._wrapperFields.string_array_value.copy(other._wrapperFields.string_array_value);
      this.string_array_value = other.string_array_value;
    } else if (typeof other !== 'undefined') {
      this._initMembers();
      translator.constructFromPlanObject(this, other);
    } else {
      this._initMembers();
    }
    this.freeze();
  }
  _initMembers() {
    this._refObject = new ParameterValueRefStruct();
    this._typeIntialized = false;
    this._bool_valueIntialized = false;
    this._integer_valueIntialized = false;
    this._double_valueIntialized = false;
    this._string_valueIntialized = false;
    this._wrapperFields.string_value = new StringWrapper();
    this._wrapperFields.byte_array_value = ByteWrapper.createArray();
    this._wrapperFields.bool_array_value = BoolWrapper.createArray();
    this._wrapperFields.integer_array_value = Int64Wrapper.createArray();
    this._wrapperFields.double_array_value = Float64Wrapper.createArray();
    this._wrapperFields.string_array_value = StringWrapper.createArray();
  }
  static createFromRefObject(refObject) {
    let self = new ParameterValueWrapper();
    self.copyRefObject(refObject);
    return self;
  }
  static createArray() {
    return new ParameterValueArrayWrapper;
  }
  static get ArrayType() {
    return ParameterValueArrayWrapper;
  }
  static get refObjectArrayType() {
    return ParameterValueRefStructArray
  }
  static get refObjectType() {
    return ParameterValueRefStruct;
  }
  toRawROS() {
    this.freeze(true);
    return this._refObject.ref();
  }
  freeze(own = false, checkConsistency = false) {
    if (checkConsistency) {
      if (!this._typeIntialized) {
        throw new TypeError('Invalid argument: type in ParameterValue');
      }
      if (!this._bool_valueIntialized) {
        throw new TypeError('Invalid argument: bool_value in ParameterValue');
      }
      if (!this._integer_valueIntialized) {
        throw new TypeError('Invalid argument: integer_value in ParameterValue');
      }
      if (!this._double_valueIntialized) {
        throw new TypeError('Invalid argument: double_value in ParameterValue');
      }
      if (!this._string_valueIntialized) {
        throw new TypeError('Invalid argument: string_value in ParameterValue');
      }
    }
    if (own) {
      this._wrapperFields.string_value.freeze(own, checkConsistency);
    }
    this._refObject.string_value = this._wrapperFields.string_value.refObject;
    this._wrapperFields.byte_array_value.freeze(own, checkConsistency);
    this._refObject.byte_array_value = this._wrapperFields.byte_array_value.refObject;
    if (own) {
      this._wrapperFields.byte_array_value.fill(Uint8Array.from([]));
      this._wrapperFields.byte_array_value.freeze(own, checkConsistency);
      this._refObject.byte_array_value = this._wrapperFields.byte_array_value.refObject;
    }
    if (!own) {
      this._wrapperFields.bool_array_value.fill(this._bool_array_valueArray);
      this._wrapperFields.bool_array_value.freeze(own, checkConsistency);
      this._refObject.bool_array_value = this._wrapperFields.bool_array_value.refObject;
    } else {
      this._wrapperFields.bool_array_value.fill([]);
      this._wrapperFields.bool_array_value.freeze(own, checkConsistency);
      this._refObject.bool_array_value = this._wrapperFields.bool_array_value.refObject;
    }
    if (!own) {
      this._wrapperFields.integer_array_value.fill(this._integer_array_valueArray);
      this._wrapperFields.integer_array_value.freeze(own, checkConsistency);
      this._refObject.integer_array_value = this._wrapperFields.integer_array_value.refObject;
    } else {
      this._wrapperFields.integer_array_value.fill([]);
      this._wrapperFields.integer_array_value.freeze(own, checkConsistency);
      this._refObject.integer_array_value = this._wrapperFields.integer_array_value.refObject;
    }
    this._wrapperFields.double_array_value.freeze(own, checkConsistency);
    this._refObject.double_array_value = this._wrapperFields.double_array_value.refObject;
    if (own) {
      this._wrapperFields.double_array_value.fill(Float64Array.from([]));
      this._wrapperFields.double_array_value.freeze(own, checkConsistency);
      this._refObject.double_array_value = this._wrapperFields.double_array_value.refObject;
    }
    if (!own) {
      this._wrapperFields.string_array_value.fill(this._string_array_valueArray);
      this._wrapperFields.string_array_value.freeze(own, checkConsistency);
      this._refObject.string_array_value = this._wrapperFields.string_array_value.refObject;
    } else {
      this._wrapperFields.string_array_value.fill([]);
      this._wrapperFields.string_array_value.freeze(own, checkConsistency);
      this._refObject.string_array_value = this._wrapperFields.string_array_value.refObject;
    }
  }
  serialize() {
    this.freeze(false, true);
    return this._refObject.ref();
  }
  deserialize(refObject) {
    this._typeIntialized = true;
    this._refObject.type = refObject.type;
    this._bool_valueIntialized = true;
    this._refObject.bool_value = refObject.bool_value;
    this._integer_valueIntialized = true;
    this._refObject.integer_value = refObject.integer_value;
    this._double_valueIntialized = true;
    this._refObject.double_value = refObject.double_value;
    this._string_valueIntialized = true;
    this._wrapperFields.string_value.data = refObject.string_value.data;
    this._wrapperFields.byte_array_value.copyRefObject(refObject.byte_array_value);
    refObject.bool_array_value.data.length = refObject.bool_array_value.size;
    for (let index = 0; index < refObject.bool_array_value.size; index++) {
      this._bool_array_valueArray[index] = refObject.bool_array_value.data[index].data;
    }
    refObject.integer_array_value.data.length = refObject.integer_array_value.size;
    for (let index = 0; index < refObject.integer_array_value.size; index++) {
      this._integer_array_valueArray[index] = refObject.integer_array_value.data[index].data;
    }
    this._wrapperFields.double_array_value.copyRefObject(refObject.double_array_value);
    refObject.string_array_value.data.length = refObject.string_array_value.size;
    for (let index = 0; index < refObject.string_array_value.size; index++) {
      this._string_array_valueArray[index] = refObject.string_array_value.data[index].data;
    }
  }
  toPlainObject(enableTypedArray) {
    return translator.toPlainObject(this, enableTypedArray);
  }
  static freeStruct(refObject) {
    StringWrapper.freeStruct(refObject.string_value);
    if (refObject.byte_array_value.size != 0) {
      ByteWrapper.ArrayType.freeArray(refObject.byte_array_value);
      if (ByteWrapper.ArrayType.useTypedArray) {
        // Do nothing, the v8 will take the ownership of the ArrayBuffer used by the typed array.
      } else {
        deallocator.freeStructMember(refObject.byte_array_value, ByteWrapper.refObjectArrayType, 'data');
      }
    }
    if (refObject.bool_array_value.size != 0) {
      BoolWrapper.ArrayType.freeArray(refObject.bool_array_value);
      if (BoolWrapper.ArrayType.useTypedArray) {
        // Do nothing, the v8 will take the ownership of the ArrayBuffer used by the typed array.
      } else {
        deallocator.freeStructMember(refObject.bool_array_value, BoolWrapper.refObjectArrayType, 'data');
      }
    }
    if (refObject.integer_array_value.size != 0) {
      Int64Wrapper.ArrayType.freeArray(refObject.integer_array_value);
      if (Int64Wrapper.ArrayType.useTypedArray) {
        // Do nothing, the v8 will take the ownership of the ArrayBuffer used by the typed array.
      } else {
        deallocator.freeStructMember(refObject.integer_array_value, Int64Wrapper.refObjectArrayType, 'data');
      }
    }
    if (refObject.double_array_value.size != 0) {
      Float64Wrapper.ArrayType.freeArray(refObject.double_array_value);
      if (Float64Wrapper.ArrayType.useTypedArray) {
        // Do nothing, the v8 will take the ownership of the ArrayBuffer used by the typed array.
      } else {
        deallocator.freeStructMember(refObject.double_array_value, Float64Wrapper.refObjectArrayType, 'data');
      }
    }
    if (refObject.string_array_value.size != 0) {
      StringWrapper.ArrayType.freeArray(refObject.string_array_value);
      if (StringWrapper.ArrayType.useTypedArray) {
        // Do nothing, the v8 will take the ownership of the ArrayBuffer used by the typed array.
      } else {
        deallocator.freeStructMember(refObject.string_array_value, StringWrapper.refObjectArrayType, 'data');
      }
    }
  }
  static destoryRawROS(msg) {
    ParameterValueWrapper.freeStruct(msg.refObject);
  }
  static type() {
    return {pkgName: 'rcl_interfaces', subFolder: 'msg', interfaceName: 'ParameterValue'};
  }
  static isPrimitive() {
    return false;
  }
  static get isROSArray() {
    return false;
  }
  get refObject() {
    return this._refObject;
  }
  get type() {
    if (!this._typeIntialized) {
      return undefined;
    }
    return this._refObject.type;
  }
  set type(value) {
    this._typeIntialized = true;
    this._refObject.type = value;
  }
  get bool_value() {
    if (!this._bool_valueIntialized) {
      return undefined;
    }
    return this._refObject.bool_value;
  }
  set bool_value(value) {
    this._bool_valueIntialized = true;
    this._refObject.bool_value = value;
  }
  get integer_value() {
    if (!this._integer_valueIntialized) {
      return undefined;
    }
    return this._refObject.integer_value;
  }
  set integer_value(value) {
    this._integer_valueIntialized = true;
    this._refObject.integer_value = value;
  }
  get double_value() {
    if (!this._double_valueIntialized) {
      return undefined;
    }
    return this._refObject.double_value;
  }
  set double_value(value) {
    this._double_valueIntialized = true;
    this._refObject.double_value = value;
  }
  get string_value() {
    if (!this._string_valueIntialized) {
      return undefined;
    }
    return this._wrapperFields.string_value.data;
  }
  set string_value(value) {
    this._string_valueIntialized = true;
    this._wrapperFields.string_value.data = value;
  }
  get byte_array_value() {
    return this._wrapperFields['byte_array_value'].data;
  }
  set byte_array_value(value) {
    this._wrapperFields['byte_array_value'].fill(value);
  }
  get bool_array_value() {
    return this._bool_array_valueArray;
  }
  set bool_array_value(value) {
    this._bool_array_valueArray = value;
  }
  get integer_array_value() {
    return this._integer_array_valueArray;
  }
  set integer_array_value(value) {
    this._integer_array_valueArray = value;
  }
  get double_array_value() {
    return this._wrapperFields['double_array_value'].data;
  }
  set double_array_value(value) {
    this._wrapperFields['double_array_value'].fill(value);
  }
  get string_array_value() {
    return this._string_array_valueArray;
  }
  set string_array_value(value) {
    this._string_array_valueArray = value;
  }
  copyRefObject(refObject) {
    this._refObject = new ParameterValueRefStruct(refObject.toObject());
    this._typeIntialized = true;
    this._bool_valueIntialized = true;
    this._integer_valueIntialized = true;
    this._double_valueIntialized = true;
    this._string_valueIntialized = true;
    this._wrapperFields.string_value.copyRefObject(this._refObject.string_value);
    this._wrapperFields.byte_array_value.copyRefObject(this._refObject.byte_array_value);
    refObject.bool_array_value.data.length = refObject.bool_array_value.size;
    for (let index = 0; index < refObject.bool_array_value.size; index++) {
      this._bool_array_valueArray[index] = refObject.bool_array_value.data[index].data;
    }
    refObject.integer_array_value.data.length = refObject.integer_array_value.size;
    for (let index = 0; index < refObject.integer_array_value.size; index++) {
      this._integer_array_valueArray[index] = refObject.integer_array_value.data[index].data;
    }
    this._wrapperFields.double_array_value.copyRefObject(this._refObject.double_array_value);
    refObject.string_array_value.data.length = refObject.string_array_value.size;
    for (let index = 0; index < refObject.string_array_value.size; index++) {
      this._string_array_valueArray[index] = refObject.string_array_value.data[index].data;
    }
  }
  copy(other) {
    this._refObject = new ParameterValueRefStruct(other._refObject.toObject());
    this._typeIntialized = true;
    this._bool_valueIntialized = true;
    this._integer_valueIntialized = true;
    this._double_valueIntialized = true;
    this._string_valueIntialized = true;
    this._wrapperFields.string_value.copy(other._wrapperFields.string_value);
    this._wrapperFields.byte_array_value.copy(other._wrapperFields.byte_array_value);
    this._bool_array_valueArray = other._bool_array_valueArray.slice();
    this._integer_array_valueArray = other._integer_array_valueArray.slice();
    this._wrapperFields.double_array_value.copy(other._wrapperFields.double_array_value);
    this._string_array_valueArray = other._string_array_valueArray.slice();
  }
  static get classType() {
    return ParameterValueWrapper;
  }
  static get ROSMessageDef() {
    return {"constants":[],"fields":[{"name":"type","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint8","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"bool_value","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"bool","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"integer_value","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"int64","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"double_value","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float64","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"string_value","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"string","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"byte_array_value","type":{"isArray":true,"arraySize":null,"isUpperBound":false,"isDynamicArray":true,"isFixedSizeArray":null,"pkgName":null,"type":"byte","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"bool_array_value","type":{"isArray":true,"arraySize":null,"isUpperBound":false,"isDynamicArray":true,"isFixedSizeArray":null,"pkgName":null,"type":"bool","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"integer_array_value","type":{"isArray":true,"arraySize":null,"isUpperBound":false,"isDynamicArray":true,"isFixedSizeArray":null,"pkgName":null,"type":"int64","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"double_array_value","type":{"isArray":true,"arraySize":null,"isUpperBound":false,"isDynamicArray":true,"isFixedSizeArray":null,"pkgName":null,"type":"float64","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"string_array_value","type":{"isArray":true,"arraySize":null,"isUpperBound":false,"isDynamicArray":true,"isFixedSizeArray":null,"pkgName":null,"type":"string","stringUpperBound":null,"isPrimitiveType":true},"default_value":null}],"baseType":{"pkgName":"rcl_interfaces","type":"ParameterValue","stringUpperBound":null,"isPrimitiveType":false},"msgName":"ParameterValue"};
  }
  hasMember(name) {
    let memberNames = ["type","bool_value","integer_value","double_value","string_value","byte_array_value","bool_array_value","integer_array_value","double_array_value","string_array_value"];
    return memberNames.indexOf(name) !== -1;
  }
}
// Define the wrapper of array class.
class ParameterValueArrayWrapper {
  constructor(size = 0) {
    this._resize(size);
  }
  toRawROS() {
    return this._refObject.ref();
  }
  fill(values) {
    const length = values.length;
    this._resize(length);
    values.forEach((value, index) => {
      if (value instanceof ParameterValueWrapper) {
        this._wrappers[index].copy(value);
      } else {
        this._wrappers[index] = new ParameterValueWrapper(value);
      }
    });
  }
  // Put all data currently stored in `this._wrappers` into `this._refObject`
  freeze(own) {
    this._wrappers.forEach((wrapper, index) => {
      wrapper.freeze(own);
      this._refArray[index] = wrapper.refObject;
    });
    this._refObject.size = this._wrappers.length;
    this._refObject.capacity = this._wrappers.length;
    if (this._refObject.capacity === 0) {
      this._refObject.data = null
    } else {
    this._refObject.data = this._refArray.buffer;
    }
  }
  get refObject() {
    return this._refObject;
  }
  get data() {
    return this._wrappers;
  }
  get size() {
    return this._wrappers.length;
  }
  set size(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to ParameterValueArrayWrapper.size setter');
      return;
    }
    return this._resize(value);
  }
  get capacity() {
    return this._wrappers.length;
  }
  set capacity(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to ParameterValueArrayWrapper.capacity setter');
    }
    return this._resize(value);
  }
  get refObject() {
    return this._refObject;
  }
  _resize(size) {
    if (size < 0) {
      throw new RangeError('Invalid argument: should provide a positive number');
      return;
    }
    this._refArray = new ParameterValueRefArray(size);
    this._refObject = new ParameterValueRefStructArray();
    this._refObject.size = size;
    this._refObject.capacity = size;
    this._wrappers = new Array();
    for (let i = 0; i < size; i++) {
      this._wrappers.push(new ParameterValueWrapper());
    }
  }
  // Copy all data from `this._refObject` into `this._wrappers`
  copyRefObject(refObject) {
    this._refObject = refObject;
    let refObjectArray = this._refObject.data;
    refObjectArray.length = this._refObject.size;
    this._resize(this._refObject.size);
    for (let index = 0; index < this._refObject.size; index++) {
      this._wrappers[index].copyRefObject(refObjectArray[index]);
    }
  }
  copy(other) {
    if (! (other instanceof ParameterValueArrayWrapper)) {
      throw new TypeError('Invalid argument: should provide "ParameterValueArrayWrapper".');
    }
    this._resize(other.size);
    // Array deep copy
    other._wrappers.forEach((wrapper, index) => {
      this._wrappers[index].copy(wrapper);
    });
  }
  static freeArray(refObject) {
    let refObjectArray = refObject.data;
    refObjectArray.length = refObject.size;
    for (let index = 0; index < refObject.size; index++) {
      ParameterValueWrapper.freeStruct(refObjectArray[index]);
    }
  }
  static get elementType() {
    return ParameterValueWrapper;
  }
  static get isROSArray() {
    return true;
  }
  static get useTypedArray() {
    return false;
  }
  get classType() {
    return ParameterValueArrayWrapper;
  }
}
module.exports = ParameterValueWrapper;
/*
 * The following is the original spec object coming from parser:
{
  "constants": [],
  "fields": [
    {
      "name": "type",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint8",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "bool_value",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "bool",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "integer_value",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "int64",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "double_value",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float64",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "string_value",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "string",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "byte_array_value",
      "type": {
        "isArray": true,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": true,
        "isFixedSizeArray": null,
        "pkgName": null,
        "type": "byte",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "bool_array_value",
      "type": {
        "isArray": true,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": true,
        "isFixedSizeArray": null,
        "pkgName": null,
        "type": "bool",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "integer_array_value",
      "type": {
        "isArray": true,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": true,
        "isFixedSizeArray": null,
        "pkgName": null,
        "type": "int64",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "double_array_value",
      "type": {
        "isArray": true,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": true,
        "isFixedSizeArray": null,
        "pkgName": null,
        "type": "float64",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "string_array_value",
      "type": {
        "isArray": true,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": true,
        "isFixedSizeArray": null,
        "pkgName": null,
        "type": "string",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    }
  ],
  "baseType": {
    "pkgName": "rcl_interfaces",
    "type": "ParameterValue",
    "stringUpperBound": null,
    "isPrimitiveType": false
  },
  "msgName": "ParameterValue"
}
*/
